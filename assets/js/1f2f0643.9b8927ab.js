"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4829],{46064:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>o,metadata:()=>p,toc:()=>s,default:()=>c});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),d=["components"],i={tags:["Components"],type:"\u6570\u636e\u5c55\u793a",title:"Tree \u6811\u5f62\u63a7\u4ef6"},o=void 0,p={unversionedId:"components/data-display/tree",id:"components/data-display/tree",isDocsHomePage:!1,title:"Tree \u6811\u5f62\u63a7\u4ef6",description:"---",source:"@site/docs/components/data-display/tree.md",sourceDirName:"components/data-display",slug:"/components/data-display/tree",permalink:"/tnt-next/docs/components/data-display/tree",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/tree.md",tags:[{label:"Components",permalink:"/tnt-next/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"\u6570\u636e\u5c55\u793a",title:"Tree \u6811\u5f62\u63a7\u4ef6"},sidebar:"componentsSidebar",previous:{title:"Tooltip \u6587\u5b57\u63d0\u793a",permalink:"/tnt-next/docs/components/data-display/tooltip"},next:{title:"Alert \u53cd\u9988",permalink:"/tnt-next/docs/components/feedback/alert"}},s=[{value:"\u4f55\u65f6\u4f7f\u7528",id:"\u4f55\u65f6\u4f7f\u7528",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"\u57fa\u672c",id:"\u57fa\u672c",children:[],level:3},{value:"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b",id:"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b",children:[],level:3},{value:"\u62d6\u52a8\u793a\u4f8b",id:"\u62d6\u52a8\u793a\u4f8b",children:[],level:3},{value:"\u5f02\u6b65\u6570\u636e\u52a0\u8f7d",id:"\u5f02\u6b65\u6570\u636e\u52a0\u8f7d",children:[],level:3},{value:"\u53ef\u641c\u7d22",id:"\u53ef\u641c\u7d22",children:[],level:3},{value:"\u8fde\u63a5\u7ebf",id:"\u8fde\u63a5\u7ebf",children:[],level:3},{value:"\u81ea\u5b9a\u4e49\u56fe\u6807",id:"\u81ea\u5b9a\u4e49\u56fe\u6807",children:[],level:3},{value:"\u76ee\u5f55",id:"\u76ee\u5f55",children:[],level:3},{value:"\u81ea\u5b9a\u4e49\u5c55\u5f00/\u6298\u53e0\u56fe\u6807",id:"\u81ea\u5b9a\u4e49\u5c55\u5f00\u6298\u53e0\u56fe\u6807",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Tree props",id:"tree-props",children:[],level:3},{value:"TreeNode props",id:"treenode-props",children:[],level:3},{value:"DirectoryTree props",id:"directorytree-props",children:[],level:3}],level:2},{value:"\u6ce8\u610f",id:"\u6ce8\u610f",children:[],level:2},{value:"FAQ",id:"faq",children:[{value:"\u5728 showLine \u65f6\uff0c\u5982\u4f55\u9690\u85cf\u5b50\u8282\u70b9\u56fe\u6807\uff1f",id:"\u5728-showline-\u65f6\u5982\u4f55\u9690\u85cf\u5b50\u8282\u70b9\u56fe\u6807",children:[],level:3}],level:2}],k={toc:s};function c(e){var t=e.components,n=(0,l.Z)(e,d);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"\u591a\u5c42\u6b21\u7684\u7ed3\u6784\u5217\u8868\u3002"),(0,r.kt)("h2",{id:"\u4f55\u65f6\u4f7f\u7528"},"\u4f55\u65f6\u4f7f\u7528"),(0,r.kt)("p",null,"\u6587\u4ef6\u5939\u3001\u7ec4\u7ec7\u67b6\u6784\u3001\u751f\u7269\u5206\u7c7b\u3001\u56fd\u5bb6\u5730\u533a\u7b49\u7b49\uff0c\u4e16\u95f4\u4e07\u7269\u7684\u5927\u591a\u6570\u7ed3\u6784\u90fd\u662f\u6811\u5f62\u7ed3\u6784\u3002\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"\u6811\u63a7\u4ef6")," \u53ef\u4ee5\u5b8c\u6574\u5c55\u73b0\u5176\u4e2d\u7684\u5c42\u7ea7\u5173\u7cfb\uff0c\u5e76\u5177\u6709\u5c55\u5f00\u6536\u8d77\u9009\u62e9\u7b49\u4ea4\u4e92\u529f\u80fd\u3002"),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"\u57fa\u672c"},"\u57fa\u672c"),(0,r.kt)("p",null,"\u6700\u7b80\u5355\u7684\u7528\u6cd5\uff0c\u5c55\u793a\u53ef\u52fe\u9009\uff0c\u53ef\u9009\u4e2d\uff0c\u7981\u7528\uff0c\u9ed8\u8ba4\u5c55\u5f00\u7b49\u529f\u80fd\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log(\'selected\', selectedKeys, info);\n  };\n\n  onCheck = (checkedKeys, info) => {\n    console.log(\'onCheck\', checkedKeys, info);\n  };\n\n  render() {\n    return (\n      <Tree\n        checkable\n        defaultExpandedKeys={[\'0-0-0\', \'0-0-1\']}\n        defaultSelectedKeys={[\'0-0-0\', \'0-0-1\']}\n        defaultCheckedKeys={[\'0-0-0\', \'0-0-1\']}\n        onSelect={this.onSelect}\n        onCheck={this.onCheck}\n      >\n        <TreeNode title="parent 1" key="0-0">\n          <TreeNode title="parent 1-0" key="0-0-0" disabled>\n            <TreeNode title="leaf" key="0-0-0-0" disableCheckbox />\n            <TreeNode title="leaf" key="0-0-0-1" />\n          </TreeNode>\n          <TreeNode title="parent 1-1" key="0-0-1">\n            <TreeNode title={<span style={{ color: \'#1890ff\' }}>sss</span>} key="0-0-1-0" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b"},"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b"),(0,r.kt)("p",null,"\u53d7\u63a7\u64cd\u4f5c\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TreeNode } = Tree;\n\nconst treeData = [\n  {\n    title: '0-0',\n    key: '0-0',\n    children: [\n      {\n        title: '0-0-0',\n        key: '0-0-0',\n        children: [\n          { title: '0-0-0-0', key: '0-0-0-0' },\n          { title: '0-0-0-1', key: '0-0-0-1' },\n          { title: '0-0-0-2', key: '0-0-0-2' },\n        ],\n      },\n      {\n        title: '0-0-1',\n        key: '0-0-1',\n        children: [\n          { title: '0-0-1-0', key: '0-0-1-0' },\n          { title: '0-0-1-1', key: '0-0-1-1' },\n          { title: '0-0-1-2', key: '0-0-1-2' },\n        ],\n      },\n      {\n        title: '0-0-2',\n        key: '0-0-2',\n      },\n    ],\n  },\n  {\n    title: '0-1',\n    key: '0-1',\n    children: [\n      { title: '0-1-0-0', key: '0-1-0-0' },\n      { title: '0-1-0-1', key: '0-1-0-1' },\n      { title: '0-1-0-2', key: '0-1-0-2' },\n    ],\n  },\n  {\n    title: '0-2',\n    key: '0-2',\n  },\n];\n\nclass Demo extends React.Component {\n  state = {\n    expandedKeys: ['0-0-0', '0-0-1'],\n    autoExpandParent: true,\n    checkedKeys: ['0-0-0'],\n    selectedKeys: [],\n  };\n\n  onExpand = expandedKeys => {\n    console.log('onExpand', expandedKeys);\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  };\n\n  onCheck = checkedKeys => {\n    console.log('onCheck', checkedKeys);\n    this.setState({ checkedKeys });\n  };\n\n  onSelect = (selectedKeys, info) => {\n    console.log('onSelect', info);\n    this.setState({ selectedKeys });\n  };\n\n  renderTreeNodes = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.title} key={item.key} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} {...item} />;\n    });\n\n  render() {\n    return (\n      <Tree\n        checkable\n        onExpand={this.onExpand}\n        expandedKeys={this.state.expandedKeys}\n        autoExpandParent={this.state.autoExpandParent}\n        onCheck={this.onCheck}\n        checkedKeys={this.state.checkedKeys}\n        onSelect={this.onSelect}\n        selectedKeys={this.state.selectedKeys}\n      >\n        {this.renderTreeNodes(treeData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"\u62d6\u52a8\u793a\u4f8b"},"\u62d6\u52a8\u793a\u4f8b"),(0,r.kt)("p",null,"\u5c06\u8282\u70b9\u62d6\u62fd\u5230\u5176\u4ed6\u8282\u70b9\u5185\u90e8\u6216\u524d\u540e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TreeNode } = Tree;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nclass Demo extends React.Component {\n  state = {\n    gData,\n    expandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\n  };\n\n  onDragEnter = info => {\n    console.log(info);\n    // expandedKeys \u9700\u8981\u53d7\u63a7\u65f6\u8bbe\u7f6e\n    // this.setState({\n    //   expandedKeys: info.expandedKeys,\n    // });\n  };\n\n  onDrop = info => {\n    console.log(info);\n    const dropKey = info.node.props.eventKey;\n    const dragKey = info.dragNode.props.eventKey;\n    const dropPos = info.node.props.pos.split('-');\n    const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n    const loop = (data, key, callback) => {\n      data.forEach((item, index, arr) => {\n        if (item.key === key) {\n          return callback(item, index, arr);\n        }\n        if (item.children) {\n          return loop(item.children, key, callback);\n        }\n      });\n    };\n    const data = [...this.state.gData];\n\n    // Find dragObject\n    let dragObj;\n    loop(data, dragKey, (item, index, arr) => {\n      arr.splice(index, 1);\n      dragObj = item;\n    });\n\n    if (!info.dropToGap) {\n      // Drop on the content\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        // where to insert \u793a\u4f8b\u6dfb\u52a0\u5230\u5c3e\u90e8\uff0c\u53ef\u4ee5\u662f\u968f\u610f\u4f4d\u7f6e\n        item.children.push(dragObj);\n      });\n    } else if (\n      (info.node.props.children || []).length > 0 && // Has children\n      info.node.props.expanded && // Is expanded\n      dropPosition === 1 // On the bottom gap\n    ) {\n      loop(data, dropKey, item => {\n        item.children = item.children || [];\n        // where to insert \u793a\u4f8b\u6dfb\u52a0\u5230\u5934\u90e8\uff0c\u53ef\u4ee5\u662f\u968f\u610f\u4f4d\u7f6e\n        item.children.unshift(dragObj);\n      });\n    } else {\n      let ar;\n      let i;\n      loop(data, dropKey, (item, index, arr) => {\n        ar = arr;\n        i = index;\n      });\n      if (dropPosition === -1) {\n        ar.splice(i, 0, dragObj);\n      } else {\n        ar.splice(i + 1, 0, dragObj);\n      }\n    }\n\n    this.setState({\n      gData: data,\n    });\n  };\n\n  render() {\n    const loop = data =>\n      data.map(item => {\n        if (item.children && item.children.length) {\n          return (\n            <TreeNode key={item.key} title={item.title}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={item.key} title={item.title} />;\n      });\n    return (\n      <Tree\n        className=\"draggable-tree\"\n        defaultExpandedKeys={this.state.expandedKeys}\n        draggable\n        blockNode\n        onDragEnter={this.onDragEnter}\n        onDrop={this.onDrop}\n      >\n        {loop(this.state.gData)}\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"\u5f02\u6b65\u6570\u636e\u52a0\u8f7d"},"\u5f02\u6b65\u6570\u636e\u52a0\u8f7d"),(0,r.kt)("p",null,"\u70b9\u51fb\u5c55\u5f00\u8282\u70b9\uff0c\u52a8\u6001\u52a0\u8f7d\u6570\u636e\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  state = {\n    treeData: [\n      { title: 'Expand to load', key: '0' },\n      { title: 'Expand to load', key: '1' },\n      { title: 'Tree Node', key: '2', isLeaf: true },\n    ],\n  };\n\n  onLoadData = treeNode =>\n    new Promise(resolve => {\n      if (treeNode.props.children) {\n        resolve();\n        return;\n      }\n      setTimeout(() => {\n        treeNode.props.dataRef.children = [\n          { title: 'Child Node', key: `${treeNode.props.eventKey}-0` },\n          { title: 'Child Node', key: `${treeNode.props.eventKey}-1` },\n        ];\n        this.setState({\n          treeData: [...this.state.treeData],\n        });\n        resolve();\n      }, 1000);\n    });\n\n  renderTreeNodes = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <TreeNode title={item.title} key={item.key} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </TreeNode>\n        );\n      }\n      return <TreeNode key={item.key} {...item} dataRef={item} />;\n    });\n\n  render() {\n    return <Tree loadData={this.onLoadData}>{this.renderTreeNodes(this.state.treeData)}</Tree>;\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"\u53ef\u641c\u7d22"},"\u53ef\u641c\u7d22"),(0,r.kt)("p",null,"\u53ef\u641c\u7d22\u7684\u6811\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TreeNode } = Tree;\nconst { Search } = Input;\n\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n\n  const children = [];\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({ title: key, key });\n    if (i < y) {\n      children.push(key);\n    }\n  }\n  if (_level < 0) {\n    return tns;\n  }\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\ngenerateData(z);\n\nconst dataList = [];\nconst generateList = data => {\n  for (let i = 0; i < data.length; i++) {\n    const node = data[i];\n    const { key } = node;\n    dataList.push({ key, title: key });\n    if (node.children) {\n      generateList(node.children);\n    }\n  }\n};\ngenerateList(gData);\n\nconst getParentKey = (key, tree) => {\n  let parentKey;\n  for (let i = 0; i < tree.length; i++) {\n    const node = tree[i];\n    if (node.children) {\n      if (node.children.some(item => item.key === key)) {\n        parentKey = node.key;\n      } else if (getParentKey(key, node.children)) {\n        parentKey = getParentKey(key, node.children);\n      }\n    }\n  }\n  return parentKey;\n};\n\nclass SearchTree extends React.Component {\n  state = {\n    expandedKeys: [],\n    searchValue: '',\n    autoExpandParent: true,\n  };\n\n  onExpand = expandedKeys => {\n    this.setState({\n      expandedKeys,\n      autoExpandParent: false,\n    });\n  };\n\n  onChange = e => {\n    const { value } = e.target;\n    const expandedKeys = dataList\n      .map(item => {\n        if (item.title.indexOf(value) > -1) {\n          return getParentKey(item.key, gData);\n        }\n        return null;\n      })\n      .filter((item, i, self) => item && self.indexOf(item) === i);\n    this.setState({\n      expandedKeys,\n      searchValue: value,\n      autoExpandParent: true,\n    });\n  };\n\n  render() {\n    const { searchValue, expandedKeys, autoExpandParent } = this.state;\n    const loop = data =>\n      data.map(item => {\n        const index = item.title.indexOf(searchValue);\n        const beforeStr = item.title.substr(0, index);\n        const afterStr = item.title.substr(index + searchValue.length);\n        const title =\n          index > -1 ? (\n            <span>\n              {beforeStr}\n              <span style={{ color: '#f50' }}>{searchValue}</span>\n              {afterStr}\n            </span>\n          ) : (\n            <span>{item.title}</span>\n          );\n        if (item.children) {\n          return (\n            <TreeNode key={item.key} title={title}>\n              {loop(item.children)}\n            </TreeNode>\n          );\n        }\n        return <TreeNode key={item.key} title={title} />;\n      });\n    return (\n      <div>\n        <Search style={{ marginBottom: 8 }} placeholder=\"Search\" onChange={this.onChange} />\n        <Tree\n          onExpand={this.onExpand}\n          expandedKeys={expandedKeys}\n          autoExpandParent={autoExpandParent}\n        >\n          {loop(gData)}\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SearchTree />, mountNode);\n")),(0,r.kt)("h3",{id:"\u8fde\u63a5\u7ebf"},"\u8fde\u63a5\u7ebf"),(0,r.kt)("p",null,"\u8282\u70b9\u4e4b\u95f4\u5e26\u8fde\u63a5\u7ebf\u7684\u6811\uff0c\u5e38\u7528\u4e8e\u6587\u4ef6\u76ee\u5f55\u7ed3\u6784\u5c55\u793a\u3002\u4f7f\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"showLine")," \u5f00\u542f\uff0c\u53ef\u4ee5\u7528 ",(0,r.kt)("inlineCode",{parentName:"p"},"switcherIcon")," \u4fee\u6539\u9ed8\u8ba4\u56fe\u6807\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  state = {\n    showLine: true,\n    showIcon: false,\n  }\n\n  onShowLineChange = showLine => {\n    this.setState({ showLine });\n  }\n\n  onShowIconChange = showIcon => {\n    this.setState({ showIcon });\n  }\n\n  render() {\n    const { showIcon, showLine } = this.state;\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          showLine: <Switch checked={showLine} onChange={this.onShowLineChange} />\n          <br />\n          <br />\n          showIcon: <Switch checked={showIcon} onChange={this.onShowIconChange} />\n        </div>\n        <Tree\n          showLine={showLine}\n          showIcon={showIcon}\n          defaultExpandedKeys={[\'0-0-0\', \'0-0-1\', \'0-0-2\']}\n        >\n          <TreeNode icon={<Icon type="carry-out" />} title="parent 1" key="0-0">\n            <TreeNode icon={<Icon type="carry-out" />} title="parent 1-0" key="0-0-0">\n              <TreeNode icon={<Icon type="carry-out" />} title="leaf" key="0-0-0-0" />\n              <TreeNode icon={<Icon type="carry-out" />} title="leaf" key="0-0-0-1" />\n              <TreeNode icon={<Icon type="carry-out" />} title="leaf" key="0-0-0-2" />\n            </TreeNode>\n            <TreeNode icon={<Icon type="carry-out" />} title="parent 1-1" key="0-0-1">\n              <TreeNode icon={<Icon type="carry-out" />} title="leaf" key="0-0-1-0" />\n            </TreeNode>\n            <TreeNode icon={<Icon type="carry-out" />} title="parent 1-2" key="0-0-2">\n              <TreeNode icon={<Icon type="carry-out" />} title="leaf" key="0-0-2-0" />\n              <TreeNode\n                switcherIcon={<Icon type="form" />}\n                icon={<Icon type="carry-out" />}\n                title="leaf"\n                key="0-0-2-1"\n              />\n            </TreeNode>\n          </TreeNode>\n        </Tree>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"\u81ea\u5b9a\u4e49\u56fe\u6807"},"\u81ea\u5b9a\u4e49\u56fe\u6807"),(0,r.kt)("p",null,"\u53ef\u4ee5\u9488\u5bf9\u4e0d\u540c\u7684\u8282\u70b9\u5b9a\u5236\u56fe\u6807\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = Tree;\n\nReactDOM.render(\n  <Tree\n    showIcon\n    defaultExpandAll\n    defaultSelectedKeys={[\'0-0-0\']}\n    switcherIcon={<Icon type="down" />}\n  >\n    <TreeNode icon={<Icon type="smile-o" />} title="parent 1" key="0-0">\n      <TreeNode icon={<Icon type="meh-o" />} title="leaf" key="0-0-0" />\n      <TreeNode\n        icon={({ selected }) => <Icon type={selected ? \'frown\' : \'frown-o\'} />}\n        title="leaf"\n        key="0-0-1"\n      />\n    </TreeNode>\n  </Tree>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"\u76ee\u5f55"},"\u76ee\u5f55"),(0,r.kt)("p",null,"\u5185\u7f6e\u7684\u76ee\u5f55\u6811\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"multiple")," \u6a21\u5f0f\u652f\u6301 ",(0,r.kt)("inlineCode",{parentName:"p"},"ctrl(Windows)")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"command(Mac)")," \u590d\u9009\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode, DirectoryTree } = Tree;\n\nclass Demo extends React.Component {\n  onSelect = (keys, event) => {\n    console.log(\'Trigger Select\', keys, event);\n  };\n\n  onExpand = () => {\n    console.log(\'Trigger Expand\');\n  };\n\n  render() {\n    return (\n      <DirectoryTree multiple defaultExpandAll onSelect={this.onSelect} onExpand={this.onExpand}>\n        <TreeNode title="parent 0" key="0-0">\n          <TreeNode title="leaf 0-0" key="0-0-0" isLeaf />\n          <TreeNode title="leaf 0-1" key="0-0-1" isLeaf />\n        </TreeNode>\n        <TreeNode title="parent 1" key="0-1">\n          <TreeNode title="leaf 1-0" key="0-1-0" isLeaf />\n          <TreeNode title="leaf 1-1" key="0-1-1" isLeaf />\n        </TreeNode>\n      </DirectoryTree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"\u81ea\u5b9a\u4e49\u5c55\u5f00\u6298\u53e0\u56fe\u6807"},"\u81ea\u5b9a\u4e49\u5c55\u5f00/\u6298\u53e0\u56fe\u6807"),(0,r.kt)("p",null,"\u81ea\u5b9a\u4e49\u5c55\u5f00/\u6298\u53e0\u56fe\u6807\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = Tree;\n\nclass Demo extends React.Component {\n  onSelect = (selectedKeys, info) => {\n    console.log(\'selected\', selectedKeys, info);\n  };\n\n  render() {\n    return (\n      <Tree\n        showLine\n        switcherIcon={<Icon type="down" />}\n        defaultExpandedKeys={[\'0-0-0\']}\n        onSelect={this.onSelect}\n      >\n        <TreeNode title="parent 1" key="0-0">\n          <TreeNode title="parent 1-0" key="0-0-0">\n            <TreeNode title="leaf" key="0-0-0-0" />\n            <TreeNode title="leaf" key="0-0-0-1" />\n            <TreeNode title="leaf" key="0-0-0-2" />\n          </TreeNode>\n          <TreeNode title="parent 1-1" key="0-0-1">\n            <TreeNode title="leaf" key="0-0-1-0" />\n          </TreeNode>\n          <TreeNode title="parent 1-2" key="0-0-2">\n            <TreeNode title="leaf" key="0-0-2-0" />\n            <TreeNode title="leaf" key="0-0-2-1" />\n          </TreeNode>\n        </TreeNode>\n      </Tree>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"tree-props"},"Tree props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u53c2\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7c7b\u578b"),(0,r.kt)("th",{parentName:"tr",align:null},"\u9ed8\u8ba4\u503c"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7248\u672c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoExpandParent"),(0,r.kt)("td",{parentName:"tr",align:null},"\u662f\u5426\u81ea\u52a8\u5c55\u5f00\u7236\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blockNode"),(0,r.kt)("td",{parentName:"tr",align:null},"\u662f\u5426\u8282\u70b9\u5360\u636e\u4e00\u884c"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.15.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkable"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8282\u70b9\u524d\u6dfb\u52a0 Checkbox \u590d\u9009\u6846"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\uff08\u53d7\u63a7\uff09\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9\uff08\u6ce8\u610f\uff1a\u7236\u5b50\u8282\u70b9\u6709\u5173\u8054\uff0c\u5982\u679c\u4f20\u5165\u7236\u8282\u70b9 key\uff0c\u5219\u5b50\u8282\u70b9\u81ea\u52a8\u9009\u4e2d\uff1b\u76f8\u5e94\u5f53\u5b50\u8282\u70b9 key \u90fd\u4f20\u5165\uff0c\u7236\u8282\u70b9\u4e5f\u81ea\u52a8\u9009\u4e2d\u3002\u5f53\u8bbe\u7f6e",(0,r.kt)("inlineCode",{parentName:"td"},"checkable"),"\u548c",(0,r.kt)("inlineCode",{parentName:"td"},"checkStrictly"),"\uff0c\u5b83\u662f\u4e00\u4e2a\u6709",(0,r.kt)("inlineCode",{parentName:"td"},"checked"),"\u548c",(0,r.kt)("inlineCode",{parentName:"td"},"halfChecked"),"\u5c5e\u6027\u7684\u5bf9\u8c61\uff0c\u5e76\u4e14\u7236\u5b50\u8282\u70b9\u7684\u9009\u4e2d\u4e0e\u5426\u4e0d\u518d\u5173\u8054"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"{checked: string","[","], halfChecked: string","[","]}"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkStrictly"),(0,r.kt)("td",{parentName:"tr",align:null},"checkable \u72b6\u6001\u4e0b\u8282\u70b9\u9009\u62e9\u5b8c\u5168\u53d7\u63a7\uff08\u7236\u5b50\u8282\u70b9\u9009\u4e2d\u72b6\u6001\u4e0d\u518d\u5173\u8054\uff09"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultCheckedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9ed8\u8ba4\u9009\u4e2d\u590d\u9009\u6846\u7684\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultExpandAll"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9ed8\u8ba4\u5c55\u5f00\u6240\u6709\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultExpandedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9ed8\u8ba4\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultExpandParent"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9ed8\u8ba4\u5c55\u5f00\u7236\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.4.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultSelectedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\u9ed8\u8ba4\u9009\u4e2d\u7684\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u6811\u7981\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.4.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"draggable"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8bbe\u7f6e\u8282\u70b9\u53ef\u62d6\u62fd\uff08IE>8\uff09"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\uff08\u53d7\u63a7\uff09\u5c55\u5f00\u6307\u5b9a\u7684\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterTreeNode"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6309\u9700\u7b5b\u9009\u6811\u8282\u70b9\uff08\u9ad8\u4eae\uff09\uff0c\u8fd4\u56de true"),(0,r.kt)("td",{parentName:"tr",align:null},"function(node)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loadData"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5f02\u6b65\u52a0\u8f7d\u6570\u636e"),(0,r.kt)("td",{parentName:"tr",align:null},"function(node)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loadedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\uff08\u53d7\u63a7\uff09\u5df2\u7ecf\u52a0\u8f7d\u7684\u8282\u70b9\uff0c\u9700\u8981\u914d\u5408 ",(0,r.kt)("inlineCode",{parentName:"td"},"loadData")," \u4f7f\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"multiple"),(0,r.kt)("td",{parentName:"tr",align:null},"\u652f\u6301\u70b9\u9009\u591a\u4e2a\u8282\u70b9\uff08\u8282\u70b9\u672c\u8eab\uff09"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectable"),(0,r.kt)("td",{parentName:"tr",align:null},"\u662f\u5426\u53ef\u9009\u4e2d"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"\uff08\u53d7\u63a7\uff09\u8bbe\u7f6e\u9009\u4e2d\u7684\u6811\u8282\u70b9"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"\u662f\u5426\u5c55\u793a TreeNode title \u524d\u7684\u56fe\u6807\uff0c\u6ca1\u6709\u9ed8\u8ba4\u6837\u5f0f\uff0c\u5982\u8bbe\u7f6e\u4e3a true\uff0c\u9700\u8981\u81ea\u884c\u5b9a\u4e49\u56fe\u6807\u76f8\u5173\u6837\u5f0f"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"switcherIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"\u81ea\u5b9a\u4e49\u6811\u8282\u70b9\u7684\u5c55\u5f00/\u6298\u53e0\u56fe\u6807"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ReactElement"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.12.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showLine"),(0,r.kt)("td",{parentName:"tr",align:null},"\u662f\u5426\u5c55\u793a\u8fde\u63a5\u7ebf"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onCheck"),(0,r.kt)("td",{parentName:"tr",align:null},"\u70b9\u51fb\u590d\u9009\u6846\u89e6\u53d1"),(0,r.kt)("td",{parentName:"tr",align:null},"function(checkedKeys, e:{checked: bool, checkedNodes, node, event, halfCheckedKeys})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDragEnd"),(0,r.kt)("td",{parentName:"tr",align:null},"dragend \u89e6\u53d1\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDragEnter"),(0,r.kt)("td",{parentName:"tr",align:null},"dragenter \u89e6\u53d1\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node, expandedKeys})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDragLeave"),(0,r.kt)("td",{parentName:"tr",align:null},"dragleave \u89e6\u53d1\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDragOver"),(0,r.kt)("td",{parentName:"tr",align:null},"dragover \u89e6\u53d1\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDragStart"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5f00\u59cb\u62d6\u62fd\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDrop"),(0,r.kt)("td",{parentName:"tr",align:null},"drop \u89e6\u53d1\u65f6\u8c03\u7528"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node, dragNode, dragNodesKeys})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onExpand"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c55\u5f00/\u6536\u8d77\u8282\u70b9\u65f6\u89e6\u53d1"),(0,r.kt)("td",{parentName:"tr",align:null},"function(expandedKeys, {expanded: bool, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onLoad"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8282\u70b9\u52a0\u8f7d\u5b8c\u6bd5\u65f6\u89e6\u53d1"),(0,r.kt)("td",{parentName:"tr",align:null},"function(loadedKeys, {event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onRightClick"),(0,r.kt)("td",{parentName:"tr",align:null},"\u54cd\u5e94\u53f3\u952e\u70b9\u51fb"),(0,r.kt)("td",{parentName:"tr",align:null},"function({event, node})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"\u70b9\u51fb\u6811\u8282\u70b9\u89e6\u53d1"),(0,r.kt)("td",{parentName:"tr",align:null},"function(selectedKeys, e:{selected: bool, selectedNodes, node, event})"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeData"),(0,r.kt)("td",{parentName:"tr",align:null},"treeNodes \u6570\u636e\uff0c\u5982\u679c\u8bbe\u7f6e\u5219\u4e0d\u9700\u8981\u624b\u52a8\u6784\u9020 TreeNode \u8282\u70b9\uff08key \u5728\u6574\u4e2a\u6811\u8303\u56f4\u5185\u552f\u4e00\uff09"),(0,r.kt)("td",{parentName:"tr",align:null},"array<{key, title, children, ","[","disabled, selectable]}>"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.19.8")))),(0,r.kt)("h3",{id:"treenode-props"},"TreeNode props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u53c2\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7c7b\u578b"),(0,r.kt)("th",{parentName:"tr",align:null},"\u9ed8\u8ba4\u503c"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7248\u672c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkable"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5f53\u6811\u4e3a checkable \u65f6\uff0c\u8bbe\u7f6e\u72ec\u7acb\u8282\u70b9\u662f\u5426\u5c55\u793a Checkbox"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.17.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disableCheckbox"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7981\u6389 checkbox"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7981\u6389\u54cd\u5e94"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"icon"),(0,r.kt)("td",{parentName:"tr",align:null},"\u81ea\u5b9a\u4e49\u56fe\u6807\u3002\u53ef\u63a5\u6536\u7ec4\u4ef6\uff0cprops \u4e3a\u5f53\u524d\u8282\u70b9 props"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode/Function(props):ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.4.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isLeaf"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8bbe\u7f6e\u4e3a\u53f6\u5b50\u8282\u70b9(\u8bbe\u7f6e\u4e86",(0,r.kt)("inlineCode",{parentName:"td"},"loadData"),"\u65f6\u6709\u6548)"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"\u88ab\u6811\u7684 (default)ExpandedKeys / (default)CheckedKeys / (default)SelectedKeys \u5c5e\u6027\u6240\u7528\u3002\u6ce8\u610f\uff1a\u6574\u4e2a\u6811\u8303\u56f4\u5185\u7684\u6240\u6709\u8282\u70b9\u7684 key \u503c\u4e0d\u80fd\u91cd\u590d\uff01"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5185\u90e8\u8ba1\u7b97\u51fa\u7684\u8282\u70b9\u4f4d\u7f6e"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectable"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8bbe\u7f6e\u8282\u70b9\u662f\u5426\u53ef\u88ab\u9009\u4e2d"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6807\u9898"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"'---'")))),(0,r.kt)("h3",{id:"directorytree-props"},"DirectoryTree props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u53c2\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7c7b\u578b"),(0,r.kt)("th",{parentName:"tr",align:null},"\u9ed8\u8ba4\u503c"),(0,r.kt)("th",{parentName:"tr",align:null},"\u7248\u672c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandAction"),(0,r.kt)("td",{parentName:"tr",align:null},"\u76ee\u5f55\u5c55\u5f00\u903b\u8f91\uff0c\u53ef\u9009 ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," ",(0,r.kt)("inlineCode",{parentName:"td"},"'click'")," ",(0,r.kt)("inlineCode",{parentName:"td"},"'doubleClick'")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"click"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")))),(0,r.kt)("h2",{id:"\u6ce8\u610f"},"\u6ce8\u610f"),(0,r.kt)("p",null,"\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"3.4.0")," \u4e4b\u524d\uff1a\u6811\u8282\u70b9\u53ef\u4ee5\u6709\u5f88\u591a\uff0c\u4f46\u5728\u8bbe\u7f6e",(0,r.kt)("inlineCode",{parentName:"p"},"checkable"),"\u65f6\uff0c\u5c06\u4f1a\u82b1\u8d39\u66f4\u591a\u7684\u8ba1\u7b97\u65f6\u95f4\uff0c\u56e0\u6b64\u6211\u4eec\u7f13\u5b58\u4e86\u4e00\u4e9b\u8ba1\u7b97\u7ed3\u679c\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"this.treeNodesStates"),"\uff09\u6765\u590d\u7528\uff0c\u907f\u514d\u591a\u6b21\u91cd\u590d\u8ba1\u7b97\uff0c\u4ee5\u6b64\u63d0\u9ad8\u6027\u80fd\u3002\u4f46\u8fd9\u4e5f\u5e26\u6765\u4e86\u4e00\u4e9b\u9650\u5236\uff0c\u5f53\u4f60\u5f02\u6b65\u52a0\u8f7d\u6811\u8282\u70b9\u65f6\uff0c\u4f60\u9700\u8981\u8fd9\u6837\u6e32\u67d3\u6811\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"{\n  this.state.treeData.length ? (\n    <Tree>\n      {this.state.treeData.map(data => (\n        <TreeNode />\n      ))}\n    </Tree>\n  ) : (\n    'loading tree'\n  );\n}\n")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"\u5728-showline-\u65f6\u5982\u4f55\u9690\u85cf\u5b50\u8282\u70b9\u56fe\u6807"},"\u5728 showLine \u65f6\uff0c\u5982\u4f55\u9690\u85cf\u5b50\u8282\u70b9\u56fe\u6807\uff1f"),(0,r.kt)("p",null,"\u6587\u4ef6\u56fe\u6807\u901a\u8fc7 switcherIcon \u6765\u5b9e\u73b0\uff0c\u5982\u679c\u4e0d\u9700\u8981\u4f60\u53ef\u4ee5\u8986\u76d6\u5bf9\u5e94\u7684\u6837\u5f0f\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/long-moon-go9e2"},"https://codesandbox.io/s/long-moon-go9e2")))}c.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=l,u=c["".concat(o,".").concat(m)]||c[m]||k[m]||r;return n?a.createElement(u,d(d({ref:t},s),{},{components:n})):a.createElement(u,d({ref:t},s))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,d=new Array(r);d[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:l,d[1]=i;for(var p=2;p<r;p++)d[p]=n[p];return a.createElement.apply(null,d)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);