"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6641],{24021:(n,e,t)=>{t.r(e),t.d(e,{frontMatter:()=>o,contentTitle:()=>d,metadata:()=>u,toc:()=>p,default:()=>c});var a=t(7896),l=t(31461),r=(t(2784),t(30876)),i=["components"],o={tags:["Components"],type:"Data Entry",title:"Cascader"},d=void 0,u={unversionedId:"components/data-entry/cascader",id:"components/data-entry/cascader",isDocsHomePage:!1,title:"Cascader",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/cascader.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/cascader",permalink:"/tnt-next/en/docs/components/data-entry/cascader",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/cascader.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"Cascader"},sidebar:"componentsSidebar",previous:{title:"AutoComplete",permalink:"/tnt-next/en/docs/components/data-entry/auto-complete"},next:{title:"Checkbox",permalink:"/tnt-next/en/docs/components/data-entry/checkbox"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Default value",id:"default-value",children:[],level:3},{value:"Custom trigger",id:"custom-trigger",children:[],level:3},{value:"Hover",id:"hover",children:[],level:3},{value:"Disabled option",id:"disabled-option",children:[],level:3},{value:"Change on select",id:"change-on-select",children:[],level:3},{value:"Size",id:"size",children:[],level:3},{value:"Custom render",id:"custom-render",children:[],level:3},{value:"Search",id:"search",children:[],level:3},{value:"Load Options Lazily",id:"load-options-lazily",children:[],level:3},{value:"Custom Field Names",id:"custom-field-names",children:[],level:3},{value:"Suffix",id:"suffix",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Option",id:"option",children:[],level:3}],level:2},{value:"Methods",id:"methods",children:[],level:2}],s={toc:p};function c(n){var e=n.components,t=(0,l.Z)(n,i);return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Cascade selection box."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When you need to select from a set of associated data set. Such as province/city/district, company level, things classification."),(0,r.kt)("li",{parentName:"ul"},"When selecting from a large data set, with multi-stage classification separated for easy selection."),(0,r.kt)("li",{parentName:"ul"},"Chooses cascade items in one float layer for better user experience.")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("p",null,"Cascade selection box for selecting province/city/district."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader options={options} onChange={onChange} placeholder=\"Please select\" />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"default-value"},"Default value"),(0,r.kt)("p",null,"Specifies default value by an array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader\n    defaultValue={['zhejiang', 'hangzhou', 'xihu']}\n    options={options}\n    onChange={onChange}\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"custom-trigger"},"Custom trigger"),(0,r.kt)("p",null,"Separate trigger button and result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n      },\n    ],\n  },\n];\n\nclass CitySwitcher extends React.Component {\n  state = {\n    text: 'Unselect',\n  };\n\n  onChange = (value, selectedOptions) => {\n    this.setState({\n      text: selectedOptions.map(o => o.label).join(', '),\n    });\n  };\n\n  render() {\n    return (\n      <span>\n        {this.state.text}\n        &nbsp;\n        <Cascader options={options} onChange={this.onChange}>\n          <a href=\"#\">Change city</a>\n        </Cascader>\n      </span>\n    );\n  }\n}\n\nReactDOM.render(<CitySwitcher />, mountNode);\n")),(0,r.kt)("h3",{id:"hover"},"Hover"),(0,r.kt)("p",null,"Hover to expand sub menu, click to select option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\n// Just show the latest item.\nfunction displayRender(label) {\n  return label[label.length - 1];\n}\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    expandTrigger=\"hover\"\n    displayRender={displayRender}\n    onChange={onChange}\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"disabled-option"},"Disabled option"),(0,r.kt)("p",null,"Disable option by specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"disabled")," property in ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    disabled: true,\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(<Cascader options={options} onChange={onChange} />, mountNode);\n")),(0,r.kt)("h3",{id:"change-on-select"},"Change on select"),(0,r.kt)("p",null,"Allow only select parent options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hanzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(<Cascader options={options} onChange={onChange} changeOnSelect />, mountNode);\n")),(0,r.kt)("h3",{id:"size"},"Size"),(0,r.kt)("p",null,"Cascade selection box of different sizes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <div>\n    <Cascader size=\"large\" options={options} onChange={onChange} />\n    <br />\n    <br />\n    <Cascader options={options} onChange={onChange} />\n    <br />\n    <br />\n    <Cascader size=\"small\" options={options} onChange={onChange} />\n    <br />\n    <br />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"custom-render"},"Custom render"),(0,r.kt)("p",null,"For instance, add an external link after the selected value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n            code: 752100,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n            code: 453400,\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction handleAreaClick(e, label, option) {\n  e.stopPropagation();\n  console.log('clicked', label, option);\n}\n\nconst displayRender = (labels, selectedOptions) =>\n  labels.map((label, i) => {\n    const option = selectedOptions[i];\n    if (i === labels.length - 1) {\n      return (\n        <span key={option.value}>\n          {label} (<a onClick={e => handleAreaClick(e, label, option)}>{option.code}</a>)\n        </span>\n      );\n    }\n    return <span key={option.value}>{label} / </span>;\n  });\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    defaultValue={['zhejiang', 'hangzhou', 'xihu']}\n    displayRender={displayRender}\n    style={{ width: '100%' }}\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"search"},"Search"),(0,r.kt)("p",null,"Search and select options directly."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n          {\n            value: 'xiasha',\n            label: 'Xia Sha',\n            disabled: true,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value, selectedOptions) {\n  console.log(value, selectedOptions);\n}\n\nfunction filter(inputValue, path) {\n  return path.some(option => option.label.toLowerCase().indexOf(inputValue.toLowerCase()) > -1);\n}\n\nReactDOM.render(\n  <Cascader\n    options={options}\n    onChange={onChange}\n    placeholder=\"Please select\"\n    showSearch={{ filter }}\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"load-options-lazily"},"Load Options Lazily"),(0,r.kt)("p",null,"Load options lazily with ",(0,r.kt)("inlineCode",{parentName:"p"},"loadData"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    isLeaf: false,\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    isLeaf: false,\n  },\n];\n\nclass LazyOptions extends React.Component {\n  state = {\n    options,\n  };\n\n  onChange = (value, selectedOptions) => {\n    console.log(value, selectedOptions);\n  };\n\n  loadData = selectedOptions => {\n    const targetOption = selectedOptions[selectedOptions.length - 1];\n    targetOption.loading = true;\n\n    // load options lazily\n    setTimeout(() => {\n      targetOption.loading = false;\n      targetOption.children = [\n        {\n          label: `${targetOption.label} Dynamic 1`,\n          value: 'dynamic1',\n        },\n        {\n          label: `${targetOption.label} Dynamic 2`,\n          value: 'dynamic2',\n        },\n      ];\n      this.setState({\n        options: [...this.state.options],\n      });\n    }, 1000);\n  };\n\n  render() {\n    return (\n      <Cascader\n        options={this.state.options}\n        loadData={this.loadData}\n        onChange={this.onChange}\n        changeOnSelect\n      />\n    );\n  }\n}\n\nReactDOM.render(<LazyOptions />, mountNode);\n")),(0,r.kt)("h3",{id:"custom-field-names"},"Custom Field Names"),(0,r.kt)("p",null,"Custom field names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    code: 'zhejiang',\n    name: 'Zhejiang',\n    items: [\n      {\n        code: 'hangzhou',\n        name: 'Hangzhou',\n        items: [\n          {\n            code: 'xihu',\n            name: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    code: 'jiangsu',\n    name: 'Jiangsu',\n    items: [\n      {\n        code: 'nanjing',\n        name: 'Nanjing',\n        items: [\n          {\n            code: 'zhonghuamen',\n            name: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <Cascader\n    fieldNames={{ label: 'name', value: 'code', children: 'items' }}\n    options={options}\n    onChange={onChange}\n    placeholder=\"Please select\"\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"suffix"},"Suffix"),(0,r.kt)("p",null,"Cascade selection box for selecting province/city/district."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nfunction onChange(value) {\n  console.log(value);\n}\n\nReactDOM.render(\n  <div>\n    <Cascader\n      suffixIcon={<Icon type=\"smile\" />}\n      options={options}\n      onChange={onChange}\n      placeholder=\"Please select\"\n    />\n    <Cascader\n      suffixIcon=\"ab\"\n      style={{ marginTop: '1rem' }}\n      options={options}\n      onChange={onChange}\n      placeholder=\"Please select\"\n    />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Cascader options={options} onChange={onChange} />\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"whether allow clear"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus when component mounted"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"changeOnSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"change value on each selection if set to true, see above demo for details"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"className"),(0,r.kt)("td",{parentName:"tr",align:null},"additional css class"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"initial selected value"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"whether disabled select"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"displayRender"),(0,r.kt)("td",{parentName:"tr",align:null},"render function of displaying selected options"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(label, selectedOptions) => ReactNode")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"label => label.join(' / ')")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandTrigger"),(0,r.kt)("td",{parentName:"tr",align:null},"expand current item when click or hover, one of 'click' 'hover'"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'click'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fieldNames"),(0,r.kt)("td",{parentName:"tr",align:null},"custom field name for label and value and children (before 3.7.0 it calls ",(0,r.kt)("inlineCode",{parentName:"td"},"filedNames")," which is typo\uff09)"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"{ label: 'label', value: 'value', children: 'children' }")),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getPopupContainer"),(0,r.kt)("td",{parentName:"tr",align:null},"Parent Node which the selector should be rendered to. Default to ",(0,r.kt)("inlineCode",{parentName:"td"},"body"),". When position issues happen, try to modify it into scrollable content and position it relative.",(0,r.kt)("a",{parentName:"td",href:"https://codepen.io/afc163/pen/zEjNOy?editors=0010"},"example")),(0,r.kt)("td",{parentName:"tr",align:null},"Function(triggerNode)"),(0,r.kt)("td",{parentName:"tr",align:null},"() => document.body"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loadData"),(0,r.kt)("td",{parentName:"tr",align:null},"To load option lazily, and it cannot work with ",(0,r.kt)("inlineCode",{parentName:"td"},"showSearch")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(selectedOptions) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notFoundContent"),(0,r.kt)("td",{parentName:"tr",align:null},"Specify content to show when no result matches."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'Not Found'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"data options of cascade"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#Option"},"Option"),"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"placeholder"),(0,r.kt)("td",{parentName:"tr",align:null},"input placeholder"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'Please select'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"popupClassName"),(0,r.kt)("td",{parentName:"tr",align:null},"additional className of popup overlay"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"popupPlacement"),(0,r.kt)("td",{parentName:"tr",align:null},"use preset popup align config from builtinPlacements\uff1a",(0,r.kt)("inlineCode",{parentName:"td"},"bottomLeft")," ",(0,r.kt)("inlineCode",{parentName:"td"},"bottomRight")," ",(0,r.kt)("inlineCode",{parentName:"td"},"topLeft")," ",(0,r.kt)("inlineCode",{parentName:"td"},"topRight")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bottomLeft")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"popupVisible"),(0,r.kt)("td",{parentName:"tr",align:null},"set visible of cascader popup"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether show search input in single mode."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"input size, one of ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," ",(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"style"),(0,r.kt)("td",{parentName:"tr",align:null},"additional style"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"suffixIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom suffix icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"selected value"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"callback when finishing cascader select"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(value, selectedOptions) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPopupVisibleChange"),(0,r.kt)("td",{parentName:"tr",align:null},"callback when popup shown or hidden"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(value) => void")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"Fields in ",(0,r.kt)("inlineCode",{parentName:"p"},"showSearch"),":"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filter"),(0,r.kt)("td",{parentName:"tr",align:null},"The function will receive two arguments, inputValue and option, if the function returns true, the option will be included in the filtered set; Otherwise, it will be excluded."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function(inputValue, path): boolean")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"limit"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the count of filtered items"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"50")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"matchInputWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the width of result list equals to input's"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"render"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to render filtered options."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function(inputValue, path): ReactNode")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sort"),(0,r.kt)("td",{parentName:"tr",align:null},"Used to sort filtered options."),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"function(a, b, inputValue)")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"option"},"Option"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"interface Option {\n  value: string;\n  label?: React.ReactNode;\n  disabled?: boolean;\n  children?: Option[];\n}\n")),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blur()"),(0,r.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus()"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus"),(0,r.kt)("td",{parentName:"tr",align:null})))))}c.isMDXComponent=!0},30876:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>g});var a=t(2784);function l(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){l(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,a,l=function(n,e){if(null==n)return{};var t,a,l={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var d=a.createContext({}),u=function(n){var e=a.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=u(n.components);return a.createElement(d.Provider,{value:e},n.children)},s={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,l=n.mdxType,r=n.originalType,d=n.parentName,p=o(n,["components","mdxType","originalType","parentName"]),c=u(t),g=l,m=c["".concat(d,".").concat(g)]||c[g]||s[g]||r;return t?a.createElement(m,i(i({ref:e},p),{},{components:t})):a.createElement(m,i({ref:e},p))}));function g(n,e){var t=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=n,o.mdxType="string"==typeof n?n:l,i[1]=o;for(var u=2;u<r;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);