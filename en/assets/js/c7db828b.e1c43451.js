"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8469],{91846:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>i,contentTitle:()=>m,metadata:()=>p,toc:()=>o,default:()=>d});var a=t(7896),l=t(31461),u=(t(2784),t(30876)),r=["components"],i={tags:["Components"],cols:1,type:"Navigation",title:"Menu"},m=void 0,p={unversionedId:"components/navigation/menu",id:"components/navigation/menu",isDocsHomePage:!1,title:"Menu",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/navigation/menu.md",sourceDirName:"components/navigation",slug:"/components/navigation/menu",permalink:"/tnt-next/en/docs/components/navigation/menu",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/navigation/menu.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],cols:1,type:"Navigation",title:"Menu"},sidebar:"componentsSidebar",previous:{title:"Dropdown",permalink:"/tnt-next/en/docs/components/navigation/dropdown"},next:{title:"PageHeader",permalink:"/tnt-next/en/docs/components/navigation/page-header"}},o=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Top Navigation",id:"top-navigation",children:[],level:3},{value:"Inline menu",id:"inline-menu",children:[],level:3},{value:"Collapsed inline menu",id:"collapsed-inline-menu",children:[],level:3},{value:"Open current submenu only",id:"open-current-submenu-only",children:[],level:3},{value:"Vertical menu",id:"vertical-menu",children:[],level:3},{value:"Menu Themes",id:"menu-themes",children:[],level:3},{value:"Switch the menu type",id:"switch-the-menu-type",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Menu",id:"menu",children:[],level:3},{value:"Menu.Item",id:"menuitem",children:[],level:3},{value:"Menu.SubMenu",id:"menusubmenu",children:[],level:3},{value:"Menu.ItemGroup",id:"menuitemgroup",children:[],level:3},{value:"Menu.Divider",id:"menudivider",children:[],level:3}],level:2}],s={toc:o};function d(e){var n=e.components,t=(0,l.Z)(e,r);return(0,u.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,u.kt)("hr",null),(0,u.kt)("p",null,"A versatile menu for navigation."),(0,u.kt)("h2",{id:"when-to-use"},"When To Use"),(0,u.kt)("p",null,"Navigation is an important part of any website, as a good navigation setup allows users to move around the site quickly and efficiently. Ant Design offers top and side navigation options. Top navigation provides all the categories and functions of the website. Side navigation provides the multi-level structure of the website."),(0,u.kt)("p",null,"More layouts with navigation: ",(0,u.kt)("a",{parentName:"p",href:"/components/layout"},"Layout"),"."),(0,u.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,u.kt)("h3",{id:"top-navigation"},"Top Navigation"),(0,u.kt)("p",null,"Horizontal top navigation menu."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass App extends React.Component {\n  state = {\n    current: \'mail\',\n  };\n\n  handleClick = e => {\n    console.log(\'click \', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    return (\n      <Menu onClick={this.handleClick} selectedKeys={[this.state.current]} mode="horizontal">\n        <Menu.Item key="mail">\n          <Icon type="mail" />\n          Navigation One\n        </Menu.Item>\n        <Menu.Item key="app" disabled>\n          <Icon type="appstore" />\n          Navigation Two\n        </Menu.Item>\n        <SubMenu\n          title={\n            <span className="submenu-title-wrapper">\n              <Icon type="setting" />\n              Navigation Three - Submenu\n            </span>\n          }\n        >\n          <Menu.ItemGroup title="Item 1">\n            <Menu.Item key="setting:1">Option 1</Menu.Item>\n            <Menu.Item key="setting:2">Option 2</Menu.Item>\n          </Menu.ItemGroup>\n          <Menu.ItemGroup title="Item 2">\n            <Menu.Item key="setting:3">Option 3</Menu.Item>\n            <Menu.Item key="setting:4">Option 4</Menu.Item>\n          </Menu.ItemGroup>\n        </SubMenu>\n        <Menu.Item key="alipay">\n          <a href="https://ant.design" target="_blank" rel="noopener noreferrer">\n            Navigation Four - Link\n          </a>\n        </Menu.Item>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,u.kt)("h3",{id:"inline-menu"},"Inline menu"),(0,u.kt)("p",null,"Vertical menu with inline submenus."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  handleClick = e => {\n    console.log(\'click \', e);\n  };\n\n  render() {\n    return (\n      <Menu\n        onClick={this.handleClick}\n        style={{ width: 256 }}\n        defaultSelectedKeys={[\'1\']}\n        defaultOpenKeys={[\'sub1\']}\n        mode="inline"\n      >\n        <SubMenu\n          key="sub1"\n          title={\n            <span>\n              <Icon type="mail" />\n              <span>Navigation One</span>\n            </span>\n          }\n        >\n          <Menu.ItemGroup key="g1" title="Item 1">\n            <Menu.Item key="1">Option 1</Menu.Item>\n            <Menu.Item key="2">Option 2</Menu.Item>\n          </Menu.ItemGroup>\n          <Menu.ItemGroup key="g2" title="Item 2">\n            <Menu.Item key="3">Option 3</Menu.Item>\n            <Menu.Item key="4">Option 4</Menu.Item>\n          </Menu.ItemGroup>\n        </SubMenu>\n        <SubMenu\n          key="sub2"\n          title={\n            <span>\n              <Icon type="appstore" />\n              <span>Navigation Two</span>\n            </span>\n          }\n        >\n          <Menu.Item key="5">Option 5</Menu.Item>\n          <Menu.Item key="6">Option 6</Menu.Item>\n          <SubMenu key="sub3" title="Submenu">\n            <Menu.Item key="7">Option 7</Menu.Item>\n            <Menu.Item key="8">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu\n          key="sub4"\n          title={\n            <span>\n              <Icon type="setting" />\n              <span>Navigation Three</span>\n            </span>\n          }\n        >\n          <Menu.Item key="9">Option 9</Menu.Item>\n          <Menu.Item key="10">Option 10</Menu.Item>\n          <Menu.Item key="11">Option 11</Menu.Item>\n          <Menu.Item key="12">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n')),(0,u.kt)("h3",{id:"collapsed-inline-menu"},"Collapsed inline menu"),(0,u.kt)("p",null,"Inline menu could be collapsed."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass App extends React.Component {\n  state = {\n    collapsed: false,\n  };\n\n  toggleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <div style={{ width: 256 }}>\n        <Button type="primary" onClick={this.toggleCollapsed} style={{ marginBottom: 16 }}>\n          <Icon type={this.state.collapsed ? \'menu-unfold\' : \'menu-fold\'} />\n        </Button>\n        <Menu\n          defaultSelectedKeys={[\'1\']}\n          defaultOpenKeys={[\'sub1\']}\n          mode="inline"\n          theme="dark"\n          inlineCollapsed={this.state.collapsed}\n        >\n          <Menu.Item key="1">\n            <Icon type="pie-chart" />\n            <span>Option 1</span>\n          </Menu.Item>\n          <Menu.Item key="2">\n            <Icon type="desktop" />\n            <span>Option 2</span>\n          </Menu.Item>\n          <Menu.Item key="3">\n            <Icon type="inbox" />\n            <span>Option 3</span>\n          </Menu.Item>\n          <SubMenu\n            key="sub1"\n            title={\n              <span>\n                <Icon type="mail" />\n                <span>Navigation One</span>\n              </span>\n            }\n          >\n            <Menu.Item key="5">Option 5</Menu.Item>\n            <Menu.Item key="6">Option 6</Menu.Item>\n            <Menu.Item key="7">Option 7</Menu.Item>\n            <Menu.Item key="8">Option 8</Menu.Item>\n          </SubMenu>\n          <SubMenu\n            key="sub2"\n            title={\n              <span>\n                <Icon type="appstore" />\n                <span>Navigation Two</span>\n              </span>\n            }\n          >\n            <Menu.Item key="9">Option 9</Menu.Item>\n            <Menu.Item key="10">Option 10</Menu.Item>\n            <SubMenu key="sub3" title="Submenu">\n              <Menu.Item key="11">Option 11</Menu.Item>\n              <Menu.Item key="12">Option 12</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,u.kt)("h3",{id:"open-current-submenu-only"},"Open current submenu only"),(0,u.kt)("p",null,"Click the menu and you will see that all the other menus gets collapsed to keep the entire menu compact."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  // submenu keys of first level\n  rootSubmenuKeys = [\'sub1\', \'sub2\', \'sub4\'];\n\n  state = {\n    openKeys: [\'sub1\'],\n  };\n\n  onOpenChange = openKeys => {\n    const latestOpenKey = openKeys.find(key => this.state.openKeys.indexOf(key) === -1);\n    if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n      this.setState({ openKeys });\n    } else {\n      this.setState({\n        openKeys: latestOpenKey ? [latestOpenKey] : [],\n      });\n    }\n  };\n\n  render() {\n    return (\n      <Menu\n        mode="inline"\n        openKeys={this.state.openKeys}\n        onOpenChange={this.onOpenChange}\n        style={{ width: 256 }}\n      >\n        <SubMenu\n          key="sub1"\n          title={\n            <span>\n              <Icon type="mail" />\n              <span>Navigation One</span>\n            </span>\n          }\n        >\n          <Menu.Item key="1">Option 1</Menu.Item>\n          <Menu.Item key="2">Option 2</Menu.Item>\n          <Menu.Item key="3">Option 3</Menu.Item>\n          <Menu.Item key="4">Option 4</Menu.Item>\n        </SubMenu>\n        <SubMenu\n          key="sub2"\n          title={\n            <span>\n              <Icon type="appstore" />\n              <span>Navigation Two</span>\n            </span>\n          }\n        >\n          <Menu.Item key="5">Option 5</Menu.Item>\n          <Menu.Item key="6">Option 6</Menu.Item>\n          <SubMenu key="sub3" title="Submenu">\n            <Menu.Item key="7">Option 7</Menu.Item>\n            <Menu.Item key="8">Option 8</Menu.Item>\n          </SubMenu>\n        </SubMenu>\n        <SubMenu\n          key="sub4"\n          title={\n            <span>\n              <Icon type="setting" />\n              <span>Navigation Three</span>\n            </span>\n          }\n        >\n          <Menu.Item key="9">Option 9</Menu.Item>\n          <Menu.Item key="10">Option 10</Menu.Item>\n          <Menu.Item key="11">Option 11</Menu.Item>\n          <Menu.Item key="12">Option 12</Menu.Item>\n        </SubMenu>\n      </Menu>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n')),(0,u.kt)("h3",{id:"vertical-menu"},"Vertical menu"),(0,u.kt)("p",null,"Submenus open as pop-ups."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nfunction handleClick(e) {\n  console.log(\'click\', e);\n}\n\nReactDOM.render(\n  <Menu onClick={handleClick} style={{ width: 256 }} mode="vertical">\n    <SubMenu\n      key="sub1"\n      title={\n        <span>\n          <Icon type="mail" />\n          <span>Navigation One</span>\n        </span>\n      }\n    >\n      <Menu.ItemGroup title="Item 1">\n        <Menu.Item key="1">Option 1</Menu.Item>\n        <Menu.Item key="2">Option 2</Menu.Item>\n      </Menu.ItemGroup>\n      <Menu.ItemGroup title="Iteom 2">\n        <Menu.Item key="3">Option 3</Menu.Item>\n        <Menu.Item key="4">Option 4</Menu.Item>\n      </Menu.ItemGroup>\n    </SubMenu>\n    <SubMenu\n      key="sub2"\n      title={\n        <span>\n          <Icon type="appstore" />\n          <span>Navigation Two</span>\n        </span>\n      }\n    >\n      <Menu.Item key="5">Option 5</Menu.Item>\n      <Menu.Item key="6">Option 6</Menu.Item>\n      <SubMenu key="sub3" title="Submenu">\n        <Menu.Item key="7">Option 7</Menu.Item>\n        <Menu.Item key="8">Option 8</Menu.Item>\n      </SubMenu>\n    </SubMenu>\n    <SubMenu\n      key="sub4"\n      title={\n        <span>\n          <Icon type="setting" />\n          <span>Navigation Three</span>\n        </span>\n      }\n    >\n      <Menu.Item key="9">Option 9</Menu.Item>\n      <Menu.Item key="10">Option 10</Menu.Item>\n      <Menu.Item key="11">Option 11</Menu.Item>\n      <Menu.Item key="12">Option 12</Menu.Item>\n    </SubMenu>\n  </Menu>,\n  mountNode,\n);\n')),(0,u.kt)("h3",{id:"menu-themes"},"Menu Themes"),(0,u.kt)("p",null,"There are two built-in themes: 'light' and 'dark'. The default value is 'light'."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  state = {\n    theme: \'dark\',\n    current: \'1\',\n  };\n\n  changeTheme = value => {\n    this.setState({\n      theme: value ? \'dark\' : \'light\',\n    });\n  };\n\n  handleClick = e => {\n    console.log(\'click \', e);\n    this.setState({\n      current: e.key,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Switch\n          checked={this.state.theme === \'dark\'}\n          onChange={this.changeTheme}\n          checkedChildren="Dark"\n          unCheckedChildren="Light"\n        />\n        <br />\n        <br />\n        <Menu\n          theme={this.state.theme}\n          onClick={this.handleClick}\n          style={{ width: 256 }}\n          defaultOpenKeys={[\'sub1\']}\n          selectedKeys={[this.state.current]}\n          mode="inline"\n        >\n          <SubMenu\n            key="sub1"\n            title={\n              <span>\n                <Icon type="mail" />\n                <span>Navigation One</span>\n              </span>\n            }\n          >\n            <Menu.Item key="1">Option 1</Menu.Item>\n            <Menu.Item key="2">Option 2</Menu.Item>\n            <Menu.Item key="3">Option 3</Menu.Item>\n            <Menu.Item key="4">Option 4</Menu.Item>\n          </SubMenu>\n          <SubMenu\n            key="sub2"\n            title={\n              <span>\n                <Icon type="appstore" />\n                <span>Navigation Two</span>\n              </span>\n            }\n          >\n            <Menu.Item key="5">Option 5</Menu.Item>\n            <Menu.Item key="6">Option 6</Menu.Item>\n            <SubMenu key="sub3" title="Submenu">\n              <Menu.Item key="7">Option 7</Menu.Item>\n              <Menu.Item key="8">Option 8</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu\n            key="sub4"\n            title={\n              <span>\n                <Icon type="setting" />\n                <span>Navigation Three</span>\n              </span>\n            }\n          >\n            <Menu.Item key="9">Option 9</Menu.Item>\n            <Menu.Item key="10">Option 10</Menu.Item>\n            <Menu.Item key="11">Option 11</Menu.Item>\n            <Menu.Item key="12">Option 12</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n')),(0,u.kt)("h3",{id:"switch-the-menu-type"},"Switch the menu type"),(0,u.kt)("p",null,"Show the dynamic switching mode (between 'inline' and 'vertical')."),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { SubMenu } = Menu;\n\nclass Sider extends React.Component {\n  state = {\n    mode: \'inline\',\n    theme: \'light\',\n  };\n\n  changeMode = value => {\n    this.setState({\n      mode: value ? \'vertical\' : \'inline\',\n    });\n  };\n\n  changeTheme = value => {\n    this.setState({\n      theme: value ? \'dark\' : \'light\',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Switch onChange={this.changeMode} /> Change Mode\n        <span className="ant-divider" style={{ margin: \'0 1em\' }} />\n        <Switch onChange={this.changeTheme} /> Change Theme\n        <br />\n        <br />\n        <Menu\n          style={{ width: 256 }}\n          defaultSelectedKeys={[\'1\']}\n          defaultOpenKeys={[\'sub1\']}\n          mode={this.state.mode}\n          theme={this.state.theme}\n        >\n          <Menu.Item key="1">\n            <Icon type="mail" />\n            Navigation One\n          </Menu.Item>\n          <Menu.Item key="2">\n            <Icon type="calendar" />\n            Navigation Two\n          </Menu.Item>\n          <SubMenu\n            key="sub1"\n            title={\n              <span>\n                <Icon type="appstore" />\n                <span>Navigation Three</span>\n              </span>\n            }\n          >\n            <Menu.Item key="3">Option 3</Menu.Item>\n            <Menu.Item key="4">Option 4</Menu.Item>\n            <SubMenu key="sub1-2" title="Submenu">\n              <Menu.Item key="5">Option 5</Menu.Item>\n              <Menu.Item key="6">Option 6</Menu.Item>\n            </SubMenu>\n          </SubMenu>\n          <SubMenu\n            key="sub2"\n            title={\n              <span>\n                <Icon type="setting" />\n                <span>Navigation Four</span>\n              </span>\n            }\n          >\n            <Menu.Item key="7">Option 7</Menu.Item>\n            <Menu.Item key="8">Option 8</Menu.Item>\n            <Menu.Item key="9">Option 9</Menu.Item>\n            <Menu.Item key="10">Option 10</Menu.Item>\n          </SubMenu>\n        </Menu>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Sider />, mountNode);\n')),(0,u.kt)("h2",{id:"api"},"API"),(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-html"},'<Menu>\n  <Menu.Item>Menu</Menu.Item>\n  <SubMenu title="SubMenu">\n    <Menu.Item>SubMenuItem</Menu.Item>\n  </SubMenu>\n</Menu>\n')),(0,u.kt)("h3",{id:"menu"},"Menu"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:null},"Param"),(0,u.kt)("th",{parentName:"tr",align:null},"Description"),(0,u.kt)("th",{parentName:"tr",align:null},"Type"),(0,u.kt)("th",{parentName:"tr",align:null},"Default value"),(0,u.kt)("th",{parentName:"tr",align:null},"Version"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"defaultOpenKeys"),(0,u.kt)("td",{parentName:"tr",align:null},"Array with the keys of default opened sub menus"),(0,u.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"defaultSelectedKeys"),(0,u.kt)("td",{parentName:"tr",align:null},"Array with the keys of default selected menu items"),(0,u.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"forceSubMenuRender"),(0,u.kt)("td",{parentName:"tr",align:null},"Render submenu into DOM before it becomes visible"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"false"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"inlineCollapsed"),(0,u.kt)("td",{parentName:"tr",align:null},"Specifies the collapsed status when menu is inline mode"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"-"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"inlineIndent"),(0,u.kt)("td",{parentName:"tr",align:null},"Indent (in pixels) of inline menu items on each level"),(0,u.kt)("td",{parentName:"tr",align:null},"number"),(0,u.kt)("td",{parentName:"tr",align:null},"24"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"mode"),(0,u.kt)("td",{parentName:"tr",align:null},"Type of menu; ",(0,u.kt)("inlineCode",{parentName:"td"},"vertical"),", ",(0,u.kt)("inlineCode",{parentName:"td"},"horizontal"),", or ",(0,u.kt)("inlineCode",{parentName:"td"},"inline")),(0,u.kt)("td",{parentName:"tr",align:null},"string: ",(0,u.kt)("inlineCode",{parentName:"td"},"vertical")),(0,u.kt)("td",{parentName:"tr",align:null},(0,u.kt)("inlineCode",{parentName:"td"},"horizontal")),(0,u.kt)("td",{parentName:"tr",align:null},(0,u.kt)("inlineCode",{parentName:"td"},"inline"))),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"multiple"),(0,u.kt)("td",{parentName:"tr",align:null},"Allows selection of multiple items"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"false"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"openKeys"),(0,u.kt)("td",{parentName:"tr",align:null},"Array with the keys of currently opened sub-menus"),(0,u.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"selectable"),(0,u.kt)("td",{parentName:"tr",align:null},"Allows selecting menu items"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"true"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"selectedKeys"),(0,u.kt)("td",{parentName:"tr",align:null},"Array with the keys of currently selected menu items"),(0,u.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"style"),(0,u.kt)("td",{parentName:"tr",align:null},"Style of the root node"),(0,u.kt)("td",{parentName:"tr",align:null},"object"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"subMenuCloseDelay"),(0,u.kt)("td",{parentName:"tr",align:null},"Delay time to hide submenu when mouse leaves (in seconds)"),(0,u.kt)("td",{parentName:"tr",align:null},"number"),(0,u.kt)("td",{parentName:"tr",align:null},"0.1"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"subMenuOpenDelay"),(0,u.kt)("td",{parentName:"tr",align:null},"Delay time to show submenu when mouse enters, (in seconds)"),(0,u.kt)("td",{parentName:"tr",align:null},"number"),(0,u.kt)("td",{parentName:"tr",align:null},"0"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"theme"),(0,u.kt)("td",{parentName:"tr",align:null},"Color theme of the menu"),(0,u.kt)("td",{parentName:"tr",align:null},"string: ",(0,u.kt)("inlineCode",{parentName:"td"},"light")),(0,u.kt)("td",{parentName:"tr",align:null},(0,u.kt)("inlineCode",{parentName:"td"},"dark")),(0,u.kt)("td",{parentName:"tr",align:null},(0,u.kt)("inlineCode",{parentName:"td"},"light"))),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"onClick"),(0,u.kt)("td",{parentName:"tr",align:null},"Called when a menu item is clicked"),(0,u.kt)("td",{parentName:"tr",align:null},"function({ item, key, keyPath, domEvent })"),(0,u.kt)("td",{parentName:"tr",align:null},"-"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"onDeselect"),(0,u.kt)("td",{parentName:"tr",align:null},"Called when a menu item is deselected (multiple mode only)"),(0,u.kt)("td",{parentName:"tr",align:null},"function({ item, key, keyPath, selectedKeys, domEvent })"),(0,u.kt)("td",{parentName:"tr",align:null},"-"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"onOpenChange"),(0,u.kt)("td",{parentName:"tr",align:null},"Called when sub-menus are opened or closed"),(0,u.kt)("td",{parentName:"tr",align:null},"function(openKeys: string","[","])"),(0,u.kt)("td",{parentName:"tr",align:null},"noop"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,u.kt)("td",{parentName:"tr",align:null},"Called when a menu item is selected"),(0,u.kt)("td",{parentName:"tr",align:null},"function({ item, key, keyPath, selectedKeys, domEvent })"),(0,u.kt)("td",{parentName:"tr",align:null},"none"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"overflowedIndicator"),(0,u.kt)("td",{parentName:"tr",align:null},"Customized icon when menu is collapsed"),(0,u.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,u.kt)("td",{parentName:"tr",align:null},"-"),(0,u.kt)("td",{parentName:"tr",align:null},"3.16.0")))),(0,u.kt)("blockquote",null,(0,u.kt)("p",{parentName:"blockquote"},"More options in ",(0,u.kt)("a",{parentName:"p",href:"https://github.com/react-component/menu#api"},"rc-menu"))),(0,u.kt)("h3",{id:"menuitem"},"Menu.Item"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:null},"Param"),(0,u.kt)("th",{parentName:"tr",align:null},"Description"),(0,u.kt)("th",{parentName:"tr",align:null},"Type"),(0,u.kt)("th",{parentName:"tr",align:null},"Default value"),(0,u.kt)("th",{parentName:"tr",align:null},"Version"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"disabled"),(0,u.kt)("td",{parentName:"tr",align:null},"Whether menu item is disabled"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"false"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"key"),(0,u.kt)("td",{parentName:"tr",align:null},"Unique ID of the menu item"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"title"),(0,u.kt)("td",{parentName:"tr",align:null},"Set display title for collapsed item"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null},"3.11.0")))),(0,u.kt)("h3",{id:"menusubmenu"},"Menu.SubMenu"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:null},"Param"),(0,u.kt)("th",{parentName:"tr",align:null},"Description"),(0,u.kt)("th",{parentName:"tr",align:null},"Type"),(0,u.kt)("th",{parentName:"tr",align:null},"Default value"),(0,u.kt)("th",{parentName:"tr",align:null},"Version"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"popupClassName"),(0,u.kt)("td",{parentName:"tr",align:null},"Sub-menu class name"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null},"3.22.0")),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"children"),(0,u.kt)("td",{parentName:"tr",align:null},"Sub-menus or sub-menu items"),(0,u.kt)("td",{parentName:"tr",align:null},"Array\\<MenuItem"),(0,u.kt)("td",{parentName:"tr",align:null},"SubMenu>"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"disabled"),(0,u.kt)("td",{parentName:"tr",align:null},"Whether sub-menu is disabled"),(0,u.kt)("td",{parentName:"tr",align:null},"boolean"),(0,u.kt)("td",{parentName:"tr",align:null},"false"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"key"),(0,u.kt)("td",{parentName:"tr",align:null},"Unique ID of the sub-menu"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"title"),(0,u.kt)("td",{parentName:"tr",align:null},"Title of the sub-menu"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"onTitleClick"),(0,u.kt)("td",{parentName:"tr",align:null},"Callback executed when the sub-menu title is clicked"),(0,u.kt)("td",{parentName:"tr",align:null},"function({ key, domEvent })"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})))),(0,u.kt)("h3",{id:"menuitemgroup"},"Menu.ItemGroup"),(0,u.kt)("table",null,(0,u.kt)("thead",{parentName:"table"},(0,u.kt)("tr",{parentName:"thead"},(0,u.kt)("th",{parentName:"tr",align:null},"Param"),(0,u.kt)("th",{parentName:"tr",align:null},"Description"),(0,u.kt)("th",{parentName:"tr",align:null},"Type"),(0,u.kt)("th",{parentName:"tr",align:null},"Default value"),(0,u.kt)("th",{parentName:"tr",align:null},"Version"))),(0,u.kt)("tbody",{parentName:"table"},(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"children"),(0,u.kt)("td",{parentName:"tr",align:null},"sub-menu items"),(0,u.kt)("td",{parentName:"tr",align:null},"MenuItem","[","]"),(0,u.kt)("td",{parentName:"tr",align:null}),(0,u.kt)("td",{parentName:"tr",align:null})),(0,u.kt)("tr",{parentName:"tbody"},(0,u.kt)("td",{parentName:"tr",align:null},"title"),(0,u.kt)("td",{parentName:"tr",align:null},"title of the group"),(0,u.kt)("td",{parentName:"tr",align:null},"string"),(0,u.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,u.kt)("td",{parentName:"tr",align:null})))),(0,u.kt)("h3",{id:"menudivider"},"Menu.Divider"),(0,u.kt)("p",null,"Divider line in between menu items, only used in vertical popup Menu or Dropdown Menu."))}d.isMDXComponent=!0},30876:(e,n,t)=>{t.d(n,{Zo:()=>o,kt:()=>k});var a=t(2784);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},u=Object.keys(e);for(a=0;a<u.length;a++)t=u[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(a=0;a<u.length;a++)t=u[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var m=a.createContext({}),p=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},o=function(e){var n=p(e.components);return a.createElement(m.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,u=e.originalType,m=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=p(t),k=l,g=d["".concat(m,".").concat(k)]||d[k]||s[k]||u;return t?a.createElement(g,r(r({ref:n},o),{},{components:t})):a.createElement(g,r({ref:n},o))}));function k(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var u=t.length,r=new Array(u);r[0]=d;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i.mdxType="string"==typeof e?e:l,r[1]=i;for(var p=2;p<u;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);