"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9689],{53100:(t,e,n)=>{n.r(e),n.d(e,{frontMatter:()=>i,contentTitle:()=>p,metadata:()=>u,toc:()=>d,default:()=>c});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),o=["components"],i={tags:["Components"],type:"Data Entry",cols:2,title:"AutoComplete"},p=void 0,u={unversionedId:"components/data-entry/auto-complete",id:"components/data-entry/auto-complete",isDocsHomePage:!1,title:"AutoComplete",description:"-------",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/auto-complete.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/auto-complete",permalink:"/tnt-next/en/docs/components/data-entry/auto-complete",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/auto-complete.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",cols:2,title:"AutoComplete"},sidebar:"componentsSidebar",previous:{title:"Steps",permalink:"/tnt-next/en/docs/components/navigation/steps"},next:{title:"Cascader",permalink:"/tnt-next/en/docs/components/data-entry/cascader"}},d=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic Usage",id:"basic-usage",children:[],level:3},{value:"Customized",id:"customized",children:[],level:3},{value:"Customize Input Component",id:"customize-input-component",children:[],level:3},{value:"Non-case-sensitive AutoComplete",id:"non-case-sensitive-autocomplete",children:[],level:3},{value:"Lookup-Patterns - Certain Category",id:"lookup-patterns---certain-category",children:[],level:3},{value:"Lookup-Patterns - Uncertain Category",id:"lookup-patterns---uncertain-category",children:[],level:3}],level:2},{value:"API",id:"api",children:[],level:2},{value:"Methods",id:"methods",children:[],level:2},{value:"FAQ",id:"faq",children:[{value:"Why doesn&#39;t the text composition system work well with onSearch in controlled mode?",id:"why-doesnt-the-text-composition-system-work-well-with-onsearch-in-controlled-mode",children:[],level:3}],level:2}],s={toc:d};function c(t){var e=t.components,n=(0,l.Z)(t,o);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Autocomplete function of input field."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("p",null,"When there is a need for autocomplete functionality."),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Basic Usage, set data source of autocomplete with ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    value: '',\n    dataSource: [],\n  };\n\n  onSearch = searchText => {\n    this.setState({\n      dataSource: !searchText ? [] : [searchText, searchText.repeat(2), searchText.repeat(3)],\n    });\n  };\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { dataSource, value } = this.state;\n    return (\n      <div>\n        <AutoComplete\n          dataSource={dataSource}\n          style={{ width: 200 }}\n          onSelect={onSelect}\n          onSearch={this.onSearch}\n          placeholder=\"input here\"\n        />\n        <br />\n        <br />\n        <AutoComplete\n          value={value}\n          dataSource={dataSource}\n          style={{ width: 200 }}\n          onSelect={onSelect}\n          onSearch={this.onSearch}\n          onChange={this.onChange}\n          placeholder=\"control mode\"\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n")),(0,r.kt)("h3",{id:"customized"},"Customized"),(0,r.kt)("p",null,"You could pass ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoComplete.Option")," as children of ",(0,r.kt)("inlineCode",{parentName:"p"},"AutoComplete"),", instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = AutoComplete;\n\nclass Complete extends React.Component {\n  state = {\n    result: [],\n  };\n\n  handleSearch = value => {\n    let result;\n    if (!value || value.indexOf('@') >= 0) {\n      result = [];\n    } else {\n      result = ['gmail.com', '163.com', 'qq.com'].map(domain => `${value}@${domain}`);\n    }\n    this.setState({ result });\n  };\n\n  render() {\n    const { result } = this.state;\n    const children = result.map(email => <Option key={email}>{email}</Option>);\n    return (\n      <AutoComplete style={{ width: 200 }} onSearch={this.handleSearch} placeholder=\"input here\">\n        {children}\n      </AutoComplete>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n")),(0,r.kt)("h3",{id:"customize-input-component"},"Customize Input Component"),(0,r.kt)("p",null,"Customize Input Component"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TextArea } = Input;\n\nfunction onSelect(value) {\n  console.log('onSelect', value);\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  };\n\n  handleSearch = value => {\n    this.setState({\n      dataSource: !value ? [] : [value, value + value, value + value + value],\n    });\n  };\n\n  handleKeyPress = ev => {\n    console.log('handleKeyPress', ev);\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <AutoComplete\n        dataSource={dataSource}\n        style={{ width: 200 }}\n        onSelect={onSelect}\n        onSearch={this.handleSearch}\n      >\n        <TextArea\n          placeholder=\"input here\"\n          className=\"custom\"\n          style={{ height: 50 }}\n          onKeyPress={this.handleKeyPress}\n        />\n      </AutoComplete>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n")),(0,r.kt)("h3",{id:"non-case-sensitive-autocomplete"},"Non-case-sensitive AutoComplete"),(0,r.kt)("p",null,"A non-case-sensitive AutoComplete"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const dataSource = ['Burns Bay Road', 'Downing Street', 'Wall Street'];\n\nfunction Complete() {\n  return (\n    <AutoComplete\n      style={{ width: 200 }}\n      dataSource={dataSource}\n      placeholder=\"try to type `b`\"\n      filterOption={(inputValue, option) =>\n        option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n      }\n    />\n  );\n}\n\nReactDOM.render(<Complete />, mountNode);\n")),(0,r.kt)("h3",{id:"lookup-patterns---certain-category"},"Lookup-Patterns - Certain Category"),(0,r.kt)("p",null,"Demonstration of ","[","Lookup Patterns: Certain Category]","(",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/docs/spec/reaction#Lookup-Patterns"},"https://ant.design/docs/spec/reaction#Lookup-Patterns"),"). Basic Usage, set datasource of autocomplete with ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option, OptGroup } = AutoComplete;\n\nconst dataSource = [\n  {\n    title: \'Libraries\',\n    children: [\n      {\n        title: \'AntDesign\',\n        count: 10000,\n      },\n      {\n        title: \'AntDesign UI\',\n        count: 10600,\n      },\n    ],\n  },\n  {\n    title: \'Solutions\',\n    children: [\n      {\n        title: \'AntDesign UI\',\n        count: 60100,\n      },\n      {\n        title: \'AntDesign\',\n        count: 30010,\n      },\n    ],\n  },\n  {\n    title: \'Articles\',\n    children: [\n      {\n        title: \'AntDesign design language\',\n        count: 100000,\n      },\n    ],\n  },\n];\n\nfunction renderTitle(title) {\n  return (\n    <span>\n      {title}\n      <a\n        style={{ float: \'right\' }}\n        href="https://www.google.com/search?q=antd"\n        target="_blank"\n        rel="noopener noreferrer"\n      >\n        more\n      </a>\n    </span>\n  );\n}\n\nconst options = dataSource\n  .map(group => (\n    <OptGroup key={group.title} label={renderTitle(group.title)}>\n      {group.children.map(opt => (\n        <Option key={opt.title} value={opt.title}>\n          {opt.title}\n          <span className="certain-search-item-count">{opt.count} people</span>\n        </Option>\n      ))}\n    </OptGroup>\n  ))\n  .concat([\n    <Option disabled key="all" className="show-all">\n      <a href="https://www.google.com/search?q=antd" target="_blank" rel="noopener noreferrer">\n        View all results\n      </a>\n    </Option>,\n  ]);\n\nfunction Complete() {\n  return (\n    <div className="certain-category-search-wrapper" style={{ width: 250 }}>\n      <AutoComplete\n        className="certain-category-search"\n        dropdownClassName="certain-category-search-dropdown"\n        dropdownMatchSelectWidth={false}\n        dropdownStyle={{ width: 300 }}\n        size="large"\n        style={{ width: \'100%\' }}\n        dataSource={options}\n        placeholder="input here"\n        optionLabelProp="value"\n      >\n        <Input suffix={<Icon type="search" className="certain-category-icon" />} />\n      </AutoComplete>\n    </div>\n  );\n}\n\nReactDOM.render(<Complete />, mountNode);\n')),(0,r.kt)("h3",{id:"lookup-patterns---uncertain-category"},"Lookup-Patterns - Uncertain Category"),(0,r.kt)("p",null,"Demonstration of ","[","Lookup Patterns: Uncertain Category]","(",(0,r.kt)("a",{parentName:"p",href:"https://ant.design/docs/spec/reaction#Lookup-Patterns"},"https://ant.design/docs/spec/reaction#Lookup-Patterns"),"). Basic Usage, set datasource of autocomplete with ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," property."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = AutoComplete;\n\nfunction onSelect(value) {\n  console.log(\'onSelect\', value);\n}\n\nfunction getRandomInt(max, min = 0) {\n  return Math.floor(Math.random() * (max - min + 1)) + min; // eslint-disable-line no-mixed-operators\n}\n\nfunction searchResult(query) {\n  return new Array(getRandomInt(5))\n    .join(\'.\')\n    .split(\'.\')\n    .map((item, idx) => ({\n      query,\n      category: `${query}${idx}`,\n      count: getRandomInt(200, 100),\n    }));\n}\n\nfunction renderOption(item) {\n  return (\n    <Option key={item.category} text={item.category}>\n      <div className="global-search-item">\n        <span className="global-search-item-desc">\n          Found {item.query} on\n          <a\n            href={`https://s.taobao.com/search?q=${item.query}`}\n            target="_blank"\n            rel="noopener noreferrer"\n          >\n            {item.category}\n          </a>\n        </span>\n        <span className="global-search-item-count">{item.count} results</span>\n      </div>\n    </Option>\n  );\n}\n\nclass Complete extends React.Component {\n  state = {\n    dataSource: [],\n  };\n\n  handleSearch = value => {\n    this.setState({\n      dataSource: value ? searchResult(value) : [],\n    });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    return (\n      <div className="global-search-wrapper" style={{ width: 300 }}>\n        <AutoComplete\n          className="global-search"\n          size="large"\n          style={{ width: \'100%\' }}\n          dataSource={dataSource.map(renderOption)}\n          onSelect={onSelect}\n          onSearch={this.handleSearch}\n          placeholder="input here"\n          optionLabelProp="text"\n        >\n          <Input\n            suffix={\n              <Button\n                className="search-btn"\n                style={{ marginRight: -12 }}\n                size="large"\n                type="primary"\n              >\n                <Icon type="search" />\n              </Button>\n            }\n          />\n        </AutoComplete>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Complete />, mountNode);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const dataSource = ['12345', '23456', '34567'];\n<AutoComplete dataSource={dataSource} />;\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"Show clear button, effective in multiple mode only."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus when component mounted"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backfill"),(0,r.kt)("td",{parentName:"tr",align:null},"backfill selected item the input when using keyboard"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"children (for customize input element)"),(0,r.kt)("td",{parentName:"tr",align:null},"customize input element"),(0,r.kt)("td",{parentName:"tr",align:null},"HTMLInputElement ",(0,r.kt)("br",null),(0,r.kt)("br",null)," HTMLTextAreaElement ",(0,r.kt)("br",null),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactElement<InputProps>")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<Input />")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"children (for dataSource)"),(0,r.kt)("td",{parentName:"tr",align:null},"Data source to auto complete"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"React.ReactElement<OptionProps>")," ",(0,r.kt)("br",null),(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"},"Array<React.ReactElement<OptionProps>>")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataSource"),(0,r.kt)("td",{parentName:"tr",align:null},"Data source for autocomplete"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://git.io/vMMKF"},"DataSourceItemType"),"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownMenuStyle"),(0,r.kt)("td",{parentName:"tr",align:null},"additional style applied to dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultActiveFirstOption"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether active first option by default"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial selected option."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether disabled select"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterOption"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, filter options by input, if function, filter options against it. The function will receive two arguments, ",(0,r.kt)("inlineCode",{parentName:"td"},"inputValue")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"option"),", if the function returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the option will be included in the filtered set; Otherwise, it will be excluded."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean or function(inputValue, option)"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"optionLabelProp"),(0,r.kt)("td",{parentName:"tr",align:null},"Which prop value of option will render as content of select."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"children")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"placeholder"),(0,r.kt)("td",{parentName:"tr",align:null},"placeholder of input"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"selected option"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"{ key: string, label: string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onBlur"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when leaving the component."),(0,r.kt)("td",{parentName:"tr",align:null},"function()"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when select an option or input value change, or value of input is changed"),(0,r.kt)("td",{parentName:"tr",align:null},"function(value)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when entering the component"),(0,r.kt)("td",{parentName:"tr",align:null},"function()"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when searching items."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when a option is selected. param is option's value and option instance."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value, option)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultOpen"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial open state of dropdown"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"open"),(0,r.kt)("td",{parentName:"tr",align:null},"Controlled open state of dropdown"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDropdownVisibleChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Call when dropdown open"),(0,r.kt)("td",{parentName:"tr",align:null},"function(open)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")))),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blur()"),(0,r.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus()"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"why-doesnt-the-text-composition-system-work-well-with-onsearch-in-controlled-mode"},"Why doesn't the text composition system work well with onSearch in controlled mode?"),(0,r.kt)("p",null,"Please use ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," to manage control state. ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," is used for searching input which is not same as ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange"),". Besides, clicking on the option will not trigger the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSearch")," event."),(0,r.kt)("p",null,"Related issue: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ant-design/ant-design/issues/18230"},"#18230")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ant-design/ant-design/issues/17916"},"#17916")))}c.isMDXComponent=!0},30876:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>m});var a=n(2784);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=u(n),m=l,g=c["".concat(p,".").concat(m)]||c[m]||s[m]||r;return n?a.createElement(g,o(o({ref:e},d),{},{components:n})):a.createElement(g,o({ref:e},d))}));function m(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:l,o[1]=i;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);