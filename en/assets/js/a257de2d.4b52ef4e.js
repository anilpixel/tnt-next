"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4159],{90271:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>o,contentTitle:()=>p,metadata:()=>u,toc:()=>d,default:()=>m});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),i=["components"],o={tags:["Components"],type:"Data Entry",title:"Input"},p=void 0,u={unversionedId:"components/data-entry/input",id:"components/data-entry/input",isDocsHomePage:!1,title:"Input",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/input.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/input",permalink:"/tnt-next/en/docs/components/data-entry/input",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/input.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"Input"},sidebar:"componentsSidebar",previous:{title:"InputNumber",permalink:"/tnt-next/en/docs/components/data-entry/input-number"},next:{title:"Mentions",permalink:"/tnt-next/en/docs/components/data-entry/mentions"}},d=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic usage",id:"basic-usage",children:[],level:3},{value:"Three sizes of Input",id:"three-sizes-of-input",children:[],level:3},{value:"Pre / Post tab",id:"pre--post-tab",children:[],level:3},{value:"Input Group",id:"input-group",children:[],level:3},{value:"Search box",id:"search-box",children:[],level:3},{value:"Search box with loading",id:"search-box-with-loading",children:[],level:3},{value:"TextArea",id:"textarea",children:[],level:3},{value:"Autosizing the height to fit the content",id:"autosizing-the-height-to-fit-the-content",children:[],level:3},{value:"Format Tooltip Input",id:"format-tooltip-input",children:[],level:3},{value:"prefix and suffix",id:"prefix-and-suffix",children:[],level:3},{value:"Password box",id:"password-box",children:[],level:3},{value:"With clear icon",id:"with-clear-icon",children:[],level:3},{value:"Text Align",id:"text-align",children:[],level:3},{value:"TextArea",id:"textarea-1",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Input",id:"input",children:[],level:3},{value:"Input.TextArea",id:"inputtextarea",children:[{value:"Input.Search",id:"inputsearch",children:[],level:4},{value:"Input.Group",id:"inputgroup",children:[],level:4},{value:"Input.Password (Added in 3.12.0)",id:"inputpassword-added-in-3120",children:[],level:4}],level:3}],level:2},{value:"FAQ",id:"faq",children:[{value:"Why Input lose focus when change <code>prefix/suffix</code>",id:"why-input-lose-focus-when-change-prefixsuffix",children:[],level:3}],level:2}],s={toc:d};function m(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"A basic widget for getting the user input is a text field. Keyboard and mouse can be used for providing or changing data."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A user input in a form field is needed."),(0,r.kt)("li",{parentName:"ul"},"A search input is required.")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Basic usage example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(<Input placeholder="Basic usage" />, mountNode);\n')),(0,r.kt)("h3",{id:"three-sizes-of-input"},"Three sizes of Input"),(0,r.kt)("p",null,"There are three sizes of an Input box: ",(0,r.kt)("inlineCode",{parentName:"p"},"large")," (40px), ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," (32px) and ",(0,r.kt)("inlineCode",{parentName:"p"},"small")," (24px)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div className="example-input">\n    <Input size="large" placeholder="large size" />\n    <Input placeholder="default size" />\n    <Input size="small" placeholder="small size" />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"pre--post-tab"},"Pre / Post tab"),(0,r.kt)("p",null,"Using pre & post tabs example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nconst selectBefore = (\n  <Select defaultValue="Http://" style={{ width: 90 }}>\n    <Option value="Http://">Http://</Option>\n    <Option value="Https://">Https://</Option>\n  </Select>\n);\nconst selectAfter = (\n  <Select defaultValue=".com" style={{ width: 80 }}>\n    <Option value=".com">.com</Option>\n    <Option value=".jp">.jp</Option>\n    <Option value=".cn">.cn</Option>\n    <Option value=".org">.org</Option>\n  </Select>\n);\n\nReactDOM.render(\n  <div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore="Http://" addonAfter=".com" defaultValue="mysite" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonBefore={selectBefore} addonAfter={selectAfter} defaultValue="mysite" />\n    </div>\n    <div style={{ marginBottom: 16 }}>\n      <Input addonAfter={<Icon type="setting" />} defaultValue="mysite" />\n    </div>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"input-group"},"Input Group"),(0,r.kt)("p",null,"Input.Group example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const InputGroup = Input.Group;\nconst { Option } = Select;\n\nconst options = [\n  {\n    value: \'zhejiang\',\n    label: \'Zhejiang\',\n    children: [\n      {\n        value: \'hangzhou\',\n        label: \'Hangzhou\',\n        children: [\n          {\n            value: \'xihu\',\n            label: \'West Lake\',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: \'jiangsu\',\n    label: \'Jiangsu\',\n    children: [\n      {\n        value: \'nanjing\',\n        label: \'Nanjing\',\n        children: [\n          {\n            value: \'zhonghuamen\',\n            label: \'Zhong Hua Men\',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass CompactDemo extends React.Component {\n  state = {\n    dataSource: [],\n  };\n\n  handleChange = value => {\n    this.setState({\n      dataSource:\n        !value || value.indexOf(\'@\') >= 0\n          ? []\n          : [`${value}@gmail.com`, `${value}@163.com`, `${value}@qq.com`],\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <InputGroup size="large">\n          <Row gutter={8}>\n            <Col span={5}>\n              <Input defaultValue="0571" />\n            </Col>\n            <Col span={8}>\n              <Input defaultValue="26888888" />\n            </Col>\n          </Row>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: \'20%\' }} defaultValue="0571" />\n          <Input style={{ width: \'30%\' }} defaultValue="26888888" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue="Zhejiang">\n            <Option value="Zhejiang">Zhejiang</Option>\n            <Option value="Jiangsu">Jiangsu</Option>\n          </Select>\n          <Input style={{ width: \'50%\' }} defaultValue="Xihu District, Hangzhou" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue="Option1">\n            <Option value="Option1">Option1</Option>\n            <Option value="Option2">Option2</Option>\n          </Select>\n          <Input style={{ width: \'50%\' }} defaultValue="input content" />\n          <InputNumber />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Input style={{ width: \'50%\' }} defaultValue="input content" />\n          <DatePicker style={{ width: \'50%\' }} />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue="Option1-1">\n            <Option value="Option1-1">Option1-1</Option>\n            <Option value="Option1-2">Option1-2</Option>\n          </Select>\n          <Select defaultValue="Option2-2">\n            <Option value="Option2-1">Option2-1</Option>\n            <Option value="Option2-2">Option2-2</Option>\n          </Select>\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue="1">\n            <Option value="1">Between</Option>\n            <Option value="2">Except</Option>\n          </Select>\n          <Input style={{ width: 100, textAlign: \'center\' }} placeholder="Minimum" />\n          <Input\n            style={{\n              width: 30,\n              borderLeft: 0,\n              pointerEvents: \'none\',\n              backgroundColor: \'#fff\',\n            }}\n            placeholder="~"\n            disabled\n          />\n          <Input style={{ width: 100, textAlign: \'center\', borderLeft: 0 }} placeholder="Maximum" />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select defaultValue="Sign Up">\n            <Option value="Sign Up">Sign Up</Option>\n            <Option value="Sign In">Sign In</Option>\n          </Select>\n          <AutoComplete\n            dataSource={this.state.dataSource}\n            style={{ width: 200 }}\n            onChange={this.handleChange}\n            placeholder="Email"\n          />\n        </InputGroup>\n        <br />\n        <InputGroup compact>\n          <Select style={{ width: \'30%\' }} defaultValue="Home">\n            <Option value="Home">Home</Option>\n            <Option value="Company">Company</Option>\n          </Select>\n          <Cascader style={{ width: \'70%\' }} options={options} placeholder="Select Address" />\n        </InputGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CompactDemo />, mountNode);\n')),(0,r.kt)("h3",{id:"search-box"},"Search box"),(0,r.kt)("p",null,"Example of creating a search box by grouping a standard input with a search button, added in ",(0,r.kt)("inlineCode",{parentName:"p"},"2.5.0"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Search } = Input;\n\nReactDOM.render(\n  <div>\n    <Search\n      placeholder="input search text"\n      onSearch={value => console.log(value)}\n      style={{ width: 200 }}\n    />\n    <br />\n    <br />\n    <Search placeholder="input search text" onSearch={value => console.log(value)} enterButton />\n    <br />\n    <br />\n    <Search\n      placeholder="input search text"\n      enterButton="Search"\n      size="large"\n      onSearch={value => console.log(value)}\n    />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"search-box-with-loading"},"Search box with loading"),(0,r.kt)("p",null,"Search loading when onSearch."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Search } = Input;\n\nReactDOM.render(\n  <div>\n    <Search placeholder="input search loading deault" loading />\n    <br />\n    <br />\n    <Search placeholder="input search loading with enterButton" loading enterButton />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"textarea"},"TextArea"),(0,r.kt)("p",null,"For multi-line input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TextArea } = Input;\n\nReactDOM.render(<TextArea rows={4} />, mountNode);\n")),(0,r.kt)("h3",{id:"autosizing-the-height-to-fit-the-content"},"Autosizing the height to fit the content"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"autoSize")," prop for a ",(0,r.kt)("inlineCode",{parentName:"p"},"textarea")," type of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," makes the height to automatically adjust based on the content. An options object can be provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"autoSize")," to specify the minimum and maximum number of lines the textarea will automatically adjust."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TextArea } = Input;\n\nclass Demo extends React.Component {\n  state = {\n    value: '',\n  };\n\n  onChange = ({ target: { value } }) => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { value } = this.state;\n\n    return (\n      <div>\n        <TextArea placeholder=\"Autosize height based on content lines\" autoSize />\n        <div style={{ margin: '24px 0' }} />\n        <TextArea\n          placeholder=\"Autosize height with minimum and maximum number of lines\"\n          autoSize={{ minRows: 2, maxRows: 6 }}\n        />\n        <div style={{ margin: '24px 0' }} />\n        <TextArea\n          value={value}\n          onChange={this.onChange}\n          placeholder=\"Controlled autosize\"\n          autoSize={{ minRows: 3, maxRows: 5 }}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"format-tooltip-input"},"Format Tooltip Input"),(0,r.kt)("p",null,"You can use the Input in conjunction with ","[","Tooltip]","(","/components/tooltip) component to create a Numeric Input, which can provide a good experience for extra-long content display."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function formatNumber(value) {\n  value += '';\n  const list = value.split('.');\n  const prefix = list[0].charAt(0) === '-' ? '-' : '';\n  let num = prefix ? list[0].slice(1) : list[0];\n  let result = '';\n  while (num.length > 3) {\n    result = `,${num.slice(-3)}${result}`;\n    num = num.slice(0, num.length - 3);\n  }\n  if (num) {\n    result = num + result;\n  }\n  return `${prefix}${result}${list[1] ? `.${list[1]}` : ''}`;\n}\n\nclass NumericInput extends React.Component {\n  onChange = e => {\n    const { value } = e.target;\n    const reg = /^-?[0-9]*(\\.[0-9]*)?$/;\n    if ((!isNaN(value) && reg.test(value)) || value === '' || value === '-') {\n      this.props.onChange(value);\n    }\n  };\n\n  // '.' at the end or only '-' in the input box.\n  onBlur = () => {\n    const { value, onBlur, onChange } = this.props;\n    let valueTemp = value;\n    if (value.charAt(value.length - 1) === '.' || value === '-') {\n      valueTemp = value.slice(0, -1);\n    }\n    onChange(valueTemp.replace(/0*(\\d+)/, '$1'));\n    if (onBlur) {\n      onBlur();\n    }\n  };\n\n  render() {\n    const { value } = this.props;\n    const title = value ? (\n      <span className=\"numeric-input-title\">{value !== '-' ? formatNumber(value) : '-'}</span>\n    ) : (\n      'Input a number'\n    );\n    return (\n      <Tooltip\n        trigger={['focus']}\n        title={title}\n        placement=\"topLeft\"\n        overlayClassName=\"numeric-input\"\n      >\n        <Input\n          {...this.props}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          placeholder=\"Input a number\"\n          maxLength={25}\n        />\n      </Tooltip>\n    );\n  }\n}\n\nclass NumericInputDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { value: '' };\n  }\n\n  onChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <NumericInput style={{ width: 120 }} value={this.state.value} onChange={this.onChange} />\n    );\n  }\n}\n\nReactDOM.render(<NumericInputDemo />, mountNode);\n")),(0,r.kt)("h3",{id:"prefix-and-suffix"},"prefix and suffix"),(0,r.kt)("p",null,"Add prefix or suffix icons inside input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Input\n      placeholder="Enter your username"\n      prefix={<Icon type="user" style={{ color: \'rgba(0,0,0,.25)\' }} />}\n      suffix={\n        <Tooltip title="Extra information">\n          <Icon type="info-circle" style={{ color: \'rgba(0,0,0,.45)\' }} />\n        </Tooltip>\n      }\n    />\n\n    <br />\n    <br />\n\n    <Input prefix="\uffe5" suffix="RMB" />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"password-box"},"Password box"),(0,r.kt)("p",null,"Input type of password and added in 3.12.0."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(<Input.Password placeholder="input password" />, mountNode);\n')),(0,r.kt)("h3",{id:"with-clear-icon"},"With clear icon"),(0,r.kt)("p",null,"Input box with the remove icon, click the icon to delete everything."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TextArea } = Input;\n\nconst onChange = e => {\n  console.log(e);\n};\n\nReactDOM.render(\n  <div>\n    <Input placeholder="input with clear icon" allowClear onChange={onChange} />\n    <br />\n    <br />\n    <TextArea placeholder="textarea with clear icon" allowClear onChange={onChange} />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"text-align"},"Text Align"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { Text } = Typography;\nconst RadioButton = Radio.Button;\nconst RadioGroup = Radio.Group;\nconst Option = Select.Option;\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst options = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nReactDOM.render(\n  <div>\n    <Mentions style={{ width: 100 }} rows={1} />\n    <Input.TextArea rows={1} style={{ width: 100 }} />\n    <Button type=\"primary\">Button</Button>\n    <Input style={{ width: 100 }} />\n    <Text copyable>Ant Design</Text>\n    <Input prefix=\"1\" suffix=\"2\" style={{ width: 100 }} />\n    <Input addonBefore=\"1\" addonAfter=\"2\" style={{ width: 100 }} />\n    <InputNumber style={{ width: 100 }} />\n    <DatePicker style={{ width: 100 }} />\n    <TimePicker style={{ width: 100 }} />\n    <Select style={{ width: 100 }} defaultValue=\"jack\">\n      <Option value=\"jack\">Jack</Option>\n      <Option value=\"lucy\">Lucy</Option>\n      <Option value=\"disabled\" disabled>\n        Disabled\n      </Option>\n      <Option value=\"Yiminghe\">yiminghe</Option>\n    </Select>\n    <Select style={{ width: 100 }} combobox defaultValue=\"jack\" />\n    <TreeSelect style={{ width: 100 }} />\n    <Cascader defaultValue={['zhejiang', 'hangzhou', 'xihu']} options={options} />\n    <RangePicker />\n    <MonthPicker />\n    <RadioGroup defaultValue=\"a\">\n      <RadioButton value=\"a\">Hangzhou</RadioButton>\n      <RadioButton value=\"b\">Shanghai</RadioButton>\n    </RadioGroup>\n    <AutoComplete style={{ width: 100 }} placeholder=\"input here\" />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"textarea-1"},"TextArea"),(0,r.kt)("p",null,"For multi-line input."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TextArea } = Input;\n\nconst defaultValue =\n  'The autoSize property applies to textarea nodes, and only the height changes automatically. In addition, autoSize can be set to an object, specifying the minimum number of rows and the maximum number of rows. The autoSize property applies to textarea nodes, and only the height changes automatically. In addition, autoSize can be set to an object, specifying the minimum number of rows and the maximum number of rows.';\n\nclass Demo extends React.Component {\n  state = {\n    autoResize: false,\n  };\n\n  render() {\n    const { autoResize } = this.state;\n\n    return (\n      <div>\n        <Button\n          onClick={() => this.setState({ autoResize: !autoResize })}\n          style={{ marginBottom: 16 }}\n        >\n          Auto Resize: {String(autoResize)}\n        </Button>\n        <TextArea rows={4} autoSize={autoResize} defaultValue={defaultValue} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addonAfter"),(0,r.kt)("td",{parentName:"tr",align:null},"The label text displayed after (on the right side of) the input field."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"addonBefore"),(0,r.kt)("td",{parentName:"tr",align:null},"The label text displayed before (on the left side of) the input field."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial input content"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the input is disabled."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"The ID for input"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxLength"),(0,r.kt)("td",{parentName:"tr",align:null},"max length"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"prefix"),(0,r.kt)("td",{parentName:"tr",align:null},"The prefix icon for the Input."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"The size of the input box. Note: in the context of a form, the ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," size is used. Available: ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," ",(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"suffix"),(0,r.kt)("td",{parentName:"tr",align:null},"The suffix icon for the Input."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of input, see: ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types"},"MDN"),"(use ",(0,r.kt)("inlineCode",{parentName:"td"},"Input.TextArea")," instead of ",(0,r.kt)("inlineCode",{parentName:"td"},'type="textarea"'),")"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"text")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The input content value"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"callback when user input"),(0,r.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPressEnter"),(0,r.kt)("td",{parentName:"tr",align:null},"The callback function that is triggered when Enter key is pressed."),(0,r.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"allow to remove input content with clear icon"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3.12.0")))),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"When ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," is used in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Form.Item")," context, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"Form.Item")," has the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"options")," props defined then ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," props of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input")," are automatically set.")),(0,r.kt)("p",null,"The rest of the props of Input are exactly the same as the original ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/react/docs/events.html#supported-events"},"input"),"."),(0,r.kt)("h3",{id:"inputtextarea"},"Input.TextArea"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"If you are using ",(0,r.kt)("inlineCode",{parentName:"p"},"antd@<2.12"),", please use ",(0,r.kt)("inlineCode",{parentName:"p"},"Input[type=textarea]"),".")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Height autosize feature, can be set to `true"),(0,r.kt)("td",{parentName:"tr",align:null},"false",(0,r.kt)("inlineCode",{parentName:"td"},"or an object"),"{ minRows: 2, maxRows: 6 }",(0,r.kt)("inlineCode",{parentName:"td"},". "),"autosize",(0,r.kt)("inlineCode",{parentName:"td"},"is deprecated after"),"3.24.0",(0,r.kt)("inlineCode",{parentName:"td"},", please use "),"autoSize`."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"object")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial input content"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The input content value"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPressEnter"),(0,r.kt)("td",{parentName:"tr",align:null},"The callback function that is triggered when Enter key is pressed."),(0,r.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"allow to remove input content with clear icon"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"3.25.0")))),(0,r.kt)("p",null,"The rest of the props of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input.TextArea")," are the same as the original ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"},"textarea"),"."),(0,r.kt)("h4",{id:"inputsearch"},"Input.Search"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Added in 2.5.0")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enterButton"),(0,r.kt)("td",{parentName:"tr",align:null},"to show an enter button after input. This prop is conflict with addon."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"The callback function triggered when you click on the search-icon, the clear-icon or press the Enter key."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value, event)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loading"),(0,r.kt)("td",{parentName:"tr",align:null},"Search box with loading."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"Supports all props of ",(0,r.kt)("inlineCode",{parentName:"p"},"Input"),"."),(0,r.kt)("h4",{id:"inputgroup"},"Input.Group"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"compact"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether use compact style"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"The size of ",(0,r.kt)("inlineCode",{parentName:"td"},"Input.Group")," specifies the size of the included ",(0,r.kt)("inlineCode",{parentName:"td"},"Input")," fields. Available: ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," ",(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<Input.Group>\n  <input />\n  <input />\n</Input.Group>\n")),(0,r.kt)("h4",{id:"inputpassword-added-in-3120"},"Input.Password (Added in 3.12.0)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visibilityToggle"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether show toggle button"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.12.2")))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"why-input-lose-focus-when-change-prefixsuffix"},"Why Input lose focus when change ",(0,r.kt)("inlineCode",{parentName:"h3"},"prefix/suffix")),(0,r.kt)("p",null,"When Input dynamic add or remove ",(0,r.kt)("inlineCode",{parentName:"p"},"prefix/suffix")," will make React recreate the dom structure and new input will be not focused. You can set an empty ",(0,r.kt)("inlineCode",{parentName:"p"},"<span />")," element to keep the dom structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const suffix = condition ? <Icon type="smile" /> : <span />;\n\n<Input suffix={suffix} />;\n')))}m.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=u(n),c=l,h=m["".concat(p,".").concat(c)]||m[c]||s[c]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);