"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[561],{87757:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>d,metadata:()=>s,toc:()=>u,default:()=>c});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),o=["components"],i={tags:["Components"],type:"Data Display",title:"Badge"},d=void 0,s={unversionedId:"components/data-display/badge",id:"components/data-display/badge",isDocsHomePage:!1,title:"Badge",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/badge.md",sourceDirName:"components/data-display",slug:"/components/data-display/badge",permalink:"/tnt-next/en/docs/components/data-display/badge",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/badge.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Display",title:"Badge"},sidebar:"componentsSidebar",previous:{title:"Avatar",permalink:"/tnt-next/en/docs/components/data-display/avatar"},next:{title:"Calendar",permalink:"/tnt-next/en/docs/components/data-display/calendar"}},u=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Standalone",id:"standalone",children:[],level:3},{value:"Overflow Count",id:"overflow-count",children:[],level:3},{value:"Red badge",id:"red-badge",children:[],level:3},{value:"Clickable",id:"clickable",children:[],level:3},{value:"Dynamic",id:"dynamic",children:[],level:3},{value:"Status",id:"status",children:[],level:3},{value:"Colorful Badge",id:"colorful-badge",children:[],level:3},{value:"Title",id:"title",children:[],level:3}],level:2},{value:"API",id:"api",children:[],level:2}],p={toc:u};function c(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Small numerical value or status descriptor for UI elements."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("p",null,"Badge normally appears in proximity to notifications or user avatars with eye-catching appeal, typically displaying unread messages count."),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("p",null,"Simplest Usage. Badge will be hidden when ",(0,r.kt)("inlineCode",{parentName:"p"},"count")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", but we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"showZero")," to show it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Badge count={5}>\n      <a href="#" className="head-example" />\n    </Badge>\n    <Badge count={0} showZero>\n      <a href="#" className="head-example" />\n    </Badge>\n    <Badge count={<Icon type="clock-circle" style={{ color: \'#f5222d\' }} />}>\n      <a href="#" className="head-example" />\n    </Badge>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"standalone"},"Standalone"),(0,r.kt)("p",null,"Used in standalone when children is empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"ReactDOM.render(\n  <div>\n    <Badge count={25} />\n    <Badge\n      count={4}\n      style={{ backgroundColor: '#fff', color: '#999', boxShadow: '0 0 0 1px #d9d9d9 inset' }}\n    />\n    <Badge count={109} style={{ backgroundColor: '#52c41a' }} />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"overflow-count"},"Overflow Count"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"${overflowCount}+")," is displayed when count is larger than ",(0,r.kt)("inlineCode",{parentName:"p"},"overflowCount"),". The default value of ",(0,r.kt)("inlineCode",{parentName:"p"},"overflowCount")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"99"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Badge count={99}>\n      <a href="#" className="head-example" />\n    </Badge>\n    <Badge count={100}>\n      <a href="#" className="head-example" />\n    </Badge>\n    <Badge count={99} overflowCount={10}>\n      <a href="#" className="head-example" />\n    </Badge>\n    <Badge count={1000} overflowCount={999}>\n      <a href="#" className="head-example" />\n    </Badge>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"red-badge"},"Red badge"),(0,r.kt)("p",null,"This will simply display a red badge, without a specific count. If count equals 0, it won't display the dot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Badge dot>\n      <Icon type="notification" />\n    </Badge>\n    <Badge count={0} dot>\n      <Icon type="notification" />\n    </Badge>\n    <Badge dot>\n      <a href="#">Link something</a>\n    </Badge>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"clickable"},"Clickable"),(0,r.kt)("p",null,"The badge can be wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," tag to make it linkable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <a href="#">\n    <Badge count={5}>\n      <span className="head-example" />\n    </Badge>\n  </a>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"dynamic"},"Dynamic"),(0,r.kt)("p",null,"The count will be animated as it changes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const ButtonGroup = Button.Group;\n\nclass Demo extends React.Component {\n  state = {\n    count: 5,\n    show: true,\n  };\n\n  increase = () => {\n    const count = this.state.count + 1;\n    this.setState({ count });\n  };\n\n  decline = () => {\n    let count = this.state.count - 1;\n    if (count < 0) {\n      count = 0;\n    }\n    this.setState({ count });\n  };\n\n  onChange = show => {\n    this.setState({ show });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <Badge count={this.state.count}>\n            <a href="#" className="head-example" />\n          </Badge>\n          <ButtonGroup>\n            <Button onClick={this.decline}>\n              <Icon type="minus" />\n            </Button>\n            <Button onClick={this.increase}>\n              <Icon type="plus" />\n            </Button>\n          </ButtonGroup>\n        </div>\n        <div style={{ marginTop: 10 }}>\n          <Badge dot={this.state.show}>\n            <a href="#" className="head-example" />\n          </Badge>\n          <Switch onChange={this.onChange} checked={this.state.show} />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"status"},"Status"),(0,r.kt)("p",null,"Standalone badge with status."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Badge status="success" />\n    <Badge status="error" />\n    <Badge status="default" />\n    <Badge status="processing" />\n    <Badge status="warning" />\n    <br />\n    <Badge status="success" text="Success" />\n    <br />\n    <Badge status="error" text="Error" />\n    <br />\n    <Badge status="default" text="Default" />\n    <br />\n    <Badge status="processing" text="Processing" />\n    <br />\n    <Badge status="warning" text="Warning" />\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"colorful-badge"},"Colorful Badge"),(0,r.kt)("p",null,"New feature after 3.16.0. We preset a series of colorful Badge styles for use in different situations. You can also set it to a hex color string for custom color."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const colors = [\n  'pink',\n  'red',\n  'yellow',\n  'orange',\n  'cyan',\n  'green',\n  'blue',\n  'purple',\n  'geekblue',\n  'magenta',\n  'volcano',\n  'gold',\n  'lime',\n];\n\nReactDOM.render(\n  <div>\n    <h4 style={{ marginBottom: 16 }}>Presets:</h4>\n    <div>\n      {colors.map(color => (\n        <div key={color}>\n          <Badge color={color} text={color} />\n        </div>\n      ))}\n    </div>\n    <h4 style={{ margin: '16px 0' }}>Custom:</h4>\n    <div>\n      <Badge color=\"#f50\" text=\"#f50\" />\n      <br />\n      <Badge color=\"#2db7f5\" text=\"#2db7f5\" />\n      <br />\n      <Badge color=\"#87d068\" text=\"#87d068\" />\n      <br />\n      <Badge color=\"#108ee9\" text=\"#108ee9\" />\n    </div>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"title"},"Title"),(0,r.kt)("p",null,"The badge will display ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," when hovered over, instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"count"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Badge count={5} title="Custom hover text">\n      <a href="#" className="head-example" />\n    </Badge>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<Badge count={5}>\n  <a href="#" className="head-example" />\n</Badge>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Badge count={5} />\n")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"color"),(0,r.kt)("td",{parentName:"tr",align:null},"Customize Badge dot color"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.16.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"Number to show in badge"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dot"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to display a red dot instead of ",(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"offset"),(0,r.kt)("td",{parentName:"tr",align:null},"set offset of the badge dot, like",(0,r.kt)("inlineCode",{parentName:"td"},"[x, y]")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[number, number]")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"overflowCount"),(0,r.kt)("td",{parentName:"tr",align:null},"Max count to show"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"99"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showZero"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show badge when ",(0,r.kt)("inlineCode",{parentName:"td"},"count")," is zero"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"status"),(0,r.kt)("td",{parentName:"tr",align:null},"Set Badge as a status dot"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"success")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"processing")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"status")," is set, ",(0,r.kt)("inlineCode",{parentName:"td"},"text")," sets the display text of the status ",(0,r.kt)("inlineCode",{parentName:"td"},"dot")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"''")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"Text to show when hovering over the badge"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"count")),(0,r.kt)("td",{parentName:"tr",align:null},"3.5.0")))))}c.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,d=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),m=l,g=c["".concat(d,".").concat(m)]||c[m]||p[m]||r;return n?a.createElement(g,o(o({ref:t},u),{},{components:n})):a.createElement(g,o({ref:t},u))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=c;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);