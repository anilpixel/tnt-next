"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18],{80957:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>c,metadata:()=>d,toc:()=>p,default:()=>k});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),o=["components"],i={tags:["Components"],type:"Data Entry",title:"Checkbox"},c=void 0,d={unversionedId:"components/data-entry/checkbox",id:"components/data-entry/checkbox",isDocsHomePage:!1,title:"Checkbox",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/checkbox.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/checkbox",permalink:"/tnt-next/en/docs/components/data-entry/checkbox",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/checkbox.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"Checkbox"},sidebar:"componentsSidebar",previous:{title:"Cascader",permalink:"/tnt-next/en/docs/components/data-entry/cascader"},next:{title:"DatePicker",permalink:"/tnt-next/en/docs/components/data-entry/date-picker"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Controlled Checkbox",id:"controlled-checkbox",children:[],level:3},{value:"Checkbox Group",id:"checkbox-group",children:[],level:3},{value:"Check all",id:"check-all",children:[],level:3},{value:"Use with Grid",id:"use-with-grid",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Props",id:"props",children:[{value:"Checkbox",id:"checkbox",children:[],level:4},{value:"Checkbox Group",id:"checkbox-group-1",children:[],level:4}],level:3},{value:"Methods",id:"methods",children:[{value:"Checkbox",id:"checkbox-1",children:[],level:4}],level:3}],level:2}],s={toc:p};function k(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Checkbox component."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Used for selecting multiple values from several options."),(0,r.kt)("li",{parentName:"ul"},"If you use only one checkbox, it is the same as using Switch to toggle between two states. The difference is that Switch will trigger the state change directly, but Checkbox just marks the state as changed and this needs to be submitted.")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("p",null,"Basic usage of checkbox."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onChange(e) {\n  console.log(`checked = ${e.target.checked}`);\n}\n\nReactDOM.render(<Checkbox onChange={onChange}>Checkbox</Checkbox>, mountNode);\n")),(0,r.kt)("h3",{id:"disabled"},"Disabled"),(0,r.kt)("p",null,"Disabled checkbox."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"ReactDOM.render(\n  <div>\n    <Checkbox defaultChecked={false} disabled />\n    <br />\n    <Checkbox defaultChecked disabled />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"controlled-checkbox"},"Controlled Checkbox"),(0,r.kt)("p",null,"Communicated with other components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class App extends React.Component {\n  state = {\n    checked: true,\n    disabled: false,\n  };\n\n  toggleChecked = () => {\n    this.setState({ checked: !this.state.checked });\n  };\n\n  toggleDisable = () => {\n    this.setState({ disabled: !this.state.disabled });\n  };\n\n  onChange = e => {\n    console.log('checked = ', e.target.checked);\n    this.setState({\n      checked: e.target.checked,\n    });\n  };\n\n  render() {\n    const label = `${this.state.checked ? 'Checked' : 'Unchecked'}-${\n      this.state.disabled ? 'Disabled' : 'Enabled'\n    }`;\n    return (\n      <div>\n        <p style={{ marginBottom: '20px' }}>\n          <Checkbox\n            checked={this.state.checked}\n            disabled={this.state.disabled}\n            onChange={this.onChange}\n          >\n            {label}\n          </Checkbox>\n        </p>\n        <p>\n          <Button type=\"primary\" size=\"small\" onClick={this.toggleChecked}>\n            {!this.state.checked ? 'Check' : 'Uncheck'}\n          </Button>\n          <Button\n            style={{ marginLeft: '10px' }}\n            type=\"primary\"\n            size=\"small\"\n            onClick={this.toggleDisable}\n          >\n            {!this.state.disabled ? 'Disable' : 'Enable'}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"checkbox-group"},"Checkbox Group"),(0,r.kt)("p",null,"Generate a group of checkboxes from an array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onChange(checkedValues) {\n  console.log('checked = ', checkedValues);\n}\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst options = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange' },\n];\nconst optionsWithDisabled = [\n  { label: 'Apple', value: 'Apple' },\n  { label: 'Pear', value: 'Pear' },\n  { label: 'Orange', value: 'Orange', disabled: false },\n];\n\nReactDOM.render(\n  <div>\n    <Checkbox.Group options={plainOptions} defaultValue={['Apple']} onChange={onChange} />\n    <br />\n    <br />\n    <Checkbox.Group options={options} defaultValue={['Pear']} onChange={onChange} />\n    <br />\n    <br />\n    <Checkbox.Group\n      options={optionsWithDisabled}\n      disabled\n      defaultValue={['Apple']}\n      onChange={onChange}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"check-all"},"Check all"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"indeterminate")," property can help you to achieve a 'check all' effect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const CheckboxGroup = Checkbox.Group;\n\nconst plainOptions = ['Apple', 'Pear', 'Orange'];\nconst defaultCheckedList = ['Apple', 'Orange'];\n\nclass App extends React.Component {\n  state = {\n    checkedList: defaultCheckedList,\n    indeterminate: true,\n    checkAll: false,\n  };\n\n  onChange = checkedList => {\n    this.setState({\n      checkedList,\n      indeterminate: !!checkedList.length && checkedList.length < plainOptions.length,\n      checkAll: checkedList.length === plainOptions.length,\n    });\n  };\n\n  onCheckAllChange = e => {\n    this.setState({\n      checkedList: e.target.checked ? plainOptions : [],\n      indeterminate: false,\n      checkAll: e.target.checked,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ borderBottom: '1px solid #E9E9E9' }}>\n          <Checkbox\n            indeterminate={this.state.indeterminate}\n            onChange={this.onCheckAllChange}\n            checked={this.state.checkAll}\n          >\n            Check all\n          </Checkbox>\n        </div>\n        <br />\n        <CheckboxGroup\n          options={plainOptions}\n          value={this.state.checkedList}\n          onChange={this.onChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"use-with-grid"},"Use with Grid"),(0,r.kt)("p",null,"We can use Checkbox and Grid in Checkbox.Group, to implement complex layout."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function onChange(checkedValues) {\n  console.log(\'checked = \', checkedValues);\n}\n\nReactDOM.render(\n  <Checkbox.Group style={{ width: \'100%\' }} onChange={onChange}>\n    <Row>\n      <Col span={8}>\n        <Checkbox value="A">A</Checkbox>\n      </Col>\n      <Col span={8}>\n        <Checkbox value="B">B</Checkbox>\n      </Col>\n      <Col span={8}>\n        <Checkbox value="C">C</Checkbox>\n      </Col>\n      <Col span={8}>\n        <Checkbox value="D">D</Checkbox>\n      </Col>\n      <Col span={8}>\n        <Checkbox value="E">E</Checkbox>\n      </Col>\n    </Row>\n  </Checkbox.Group>,\n  mountNode,\n);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"props"},"Props"),(0,r.kt)("h4",{id:"checkbox"},"Checkbox"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus when component mounted"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checked"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies whether the checkbox is selected."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultChecked"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the initial state: whether or not the checkbox is selected."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Disable checkbox"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"indeterminate"),(0,r.kt)("td",{parentName:"tr",align:null},"indeterminate checked state of checkbox"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"The callback function that is triggered when the state changes."),(0,r.kt)("td",{parentName:"tr",align:null},"Function(e:Event)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")))),(0,r.kt)("h4",{id:"checkbox-group-1"},"Checkbox Group"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Default selected value"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Disable all checkboxes"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"The ",(0,r.kt)("inlineCode",{parentName:"td"},"name")," property of all ",(0,r.kt)("inlineCode",{parentName:"td"},'input[type="checkbox"]')," children"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.16.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"options"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies options"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Used for setting the currently selected value."),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"The callback function that is triggered when the state changes."),(0,r.kt)("td",{parentName:"tr",align:null},"Function(checkedValue)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")))),(0,r.kt)("h3",{id:"methods"},"Methods"),(0,r.kt)("h4",{id:"checkbox-1"},"Checkbox"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blur()"),(0,r.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus()"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus"),(0,r.kt)("td",{parentName:"tr",align:null},"3.6.2")))))}k.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),k=d(n),h=l,u=k["".concat(c,".").concat(h)]||k[h]||s[h]||r;return n?a.createElement(u,o(o({ref:t},p),{},{components:n})):a.createElement(u,o({ref:t},p))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=k;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"}}]);