"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1917],{33761:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>d,contentTitle:()=>i,metadata:()=>u,toc:()=>p,default:()=>s});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),o=["components"],d={tags:["Components"],type:"Data Entry",title:"TreeSelect"},i=void 0,u={unversionedId:"components/data-entry/tree-select",id:"components/data-entry/tree-select",isDocsHomePage:!1,title:"TreeSelect",description:"-----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/tree-select.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/tree-select",permalink:"/tnt-next/en/docs/components/data-entry/tree-select",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/tree-select.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"TreeSelect"},sidebar:"componentsSidebar",previous:{title:"Transfer",permalink:"/tnt-next/en/docs/components/data-entry/transfer"},next:{title:"Upload",permalink:"/tnt-next/en/docs/components/data-entry/upload"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Multiple Selection",id:"multiple-selection",children:[],level:3},{value:"Generate from tree data",id:"generate-from-tree-data",children:[],level:3},{value:"Checkable",id:"checkable",children:[],level:3},{value:"Asynchronous loading",id:"asynchronous-loading",children:[],level:3},{value:"Suffix",id:"suffix",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Tree props",id:"tree-props",children:[],level:3},{value:"Tree Methods",id:"tree-methods",children:[],level:3},{value:"TreeNode props",id:"treenode-props",children:[],level:3}],level:2},{value:"FAQ",id:"faq",children:[{value:"How to get parent node in onChange?",id:"how-to-get-parent-node-in-onchange",children:[],level:3}],level:2}],m={toc:p};function s(e){var t=e.components,n=(0,l.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Tree selection control."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TreeSelect")," is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"Select"),", but the values are provided in a tree like structure. Any data whose entries are defined in a hierarchical manner is fit to use this control. Examples of such case may include a corporate hierarchy, a directory structure, and so on."),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("p",null,"The most basic usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = TreeSelect;\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  };\n\n  onChange = value => {\n    console.log(value);\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <TreeSelect\n        showSearch\n        style={{ width: \'100%\' }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: \'auto\' }}\n        placeholder="Please select"\n        allowClear\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      >\n        <TreeNode value="parent 1" title="parent 1" key="0-1">\n          <TreeNode value="parent 1-0" title="parent 1-0" key="0-1-1">\n            <TreeNode value="leaf1" title="my leaf" key="random" />\n            <TreeNode value="leaf2" title="your leaf" key="random1" />\n          </TreeNode>\n          <TreeNode value="parent 1-1" title="parent 1-1" key="random2">\n            <TreeNode value="sss" title={<b style={{ color: \'#08c\' }}>sss</b>} key="random3" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"multiple-selection"},"Multiple Selection"),(0,r.kt)("p",null,"Multiple selection usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = TreeSelect;\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  };\n\n  onChange = value => {\n    console.log(value);\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <TreeSelect\n        showSearch\n        style={{ width: \'100%\' }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: \'auto\' }}\n        placeholder="Please select"\n        allowClear\n        multiple\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      >\n        <TreeNode value="parent 1" title="parent 1" key="0-1">\n          <TreeNode value="parent 1-0" title="parent 1-0" key="0-1-1">\n            <TreeNode value="leaf1" title="my leaf" key="random" />\n            <TreeNode value="leaf2" title="your leaf" key="random1" />\n          </TreeNode>\n          <TreeNode value="parent 1-1" title="parent 1-1" key="random2">\n            <TreeNode value="sss" title={<b style={{ color: \'#08c\' }}>sss</b>} key="random3" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"generate-from-tree-data"},"Generate from tree data"),(0,r.kt)("p",null,"The tree structure can be populated using ",(0,r.kt)("inlineCode",{parentName:"p"},"treeData")," property. This is a quick and easy way to provide the tree content."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const treeData = [\n  {\n    title: 'Node1',\n    value: '0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Child Node1',\n        value: '0-0-1',\n        key: '0-0-1',\n      },\n      {\n        title: 'Child Node2',\n        value: '0-0-2',\n        key: '0-0-2',\n      },\n    ],\n  },\n  {\n    title: 'Node2',\n    value: '0-1',\n    key: '0-1',\n  },\n];\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  };\n\n  onChange = value => {\n    console.log(value);\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <TreeSelect\n        style={{ width: '100%' }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        treeData={treeData}\n        placeholder=\"Please select\"\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"checkable"},"Checkable"),(0,r.kt)("p",null,"Multiple and checkable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { SHOW_PARENT } = TreeSelect;\n\nconst treeData = [\n  {\n    title: 'Node1',\n    value: '0-0',\n    key: '0-0',\n    children: [\n      {\n        title: 'Child Node1',\n        value: '0-0-0',\n        key: '0-0-0',\n      },\n    ],\n  },\n  {\n    title: 'Node2',\n    value: '0-1',\n    key: '0-1',\n    children: [\n      {\n        title: 'Child Node3',\n        value: '0-1-0',\n        key: '0-1-0',\n      },\n      {\n        title: 'Child Node4',\n        value: '0-1-1',\n        key: '0-1-1',\n      },\n      {\n        title: 'Child Node5',\n        value: '0-1-2',\n        key: '0-1-2',\n      },\n    ],\n  },\n];\n\nclass Demo extends React.Component {\n  state = {\n    value: ['0-0-0'],\n  };\n\n  onChange = value => {\n    console.log('onChange ', value);\n    this.setState({ value });\n  };\n\n  render() {\n    const tProps = {\n      treeData,\n      value: this.state.value,\n      onChange: this.onChange,\n      treeCheckable: true,\n      showCheckedStrategy: SHOW_PARENT,\n      searchPlaceholder: 'Please select',\n      style: {\n        width: '100%',\n      },\n    };\n    return <TreeSelect {...tProps} />;\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"asynchronous-loading"},"Asynchronous loading"),(0,r.kt)("p",null,"Asynchronous loading tree node."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class Demo extends React.Component {\n  state = {\n    value: undefined,\n    treeData: [\n      { id: 1, pId: 0, value: '1', title: 'Expand to load' },\n      { id: 2, pId: 0, value: '2', title: 'Expand to load' },\n      { id: 3, pId: 0, value: '3', title: 'Tree Node', isLeaf: true },\n    ],\n  };\n\n  genTreeNode = (parentId, isLeaf = false) => {\n    const random = Math.random()\n      .toString(36)\n      .substring(2, 6);\n    return {\n      id: random,\n      pId: parentId,\n      value: random,\n      title: isLeaf ? 'Tree Node' : 'Expand to load',\n      isLeaf,\n    };\n  };\n\n  onLoadData = treeNode =>\n    new Promise(resolve => {\n      const { id } = treeNode.props;\n      setTimeout(() => {\n        this.setState({\n          treeData: this.state.treeData.concat([\n            this.genTreeNode(id, false),\n            this.genTreeNode(id, true),\n          ]),\n        });\n        resolve();\n      }, 300);\n    });\n\n  onChange = value => {\n    console.log(value);\n    this.setState({ value });\n  };\n\n  render() {\n    const { treeData } = this.state;\n    return (\n      <TreeSelect\n        treeDataSimpleMode\n        style={{ width: '100%' }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n        placeholder=\"Please select\"\n        onChange={this.onChange}\n        loadData={this.onLoadData}\n        treeData={treeData}\n      />\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"suffix"},"Suffix"),(0,r.kt)("p",null,"The most basic usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TreeNode } = TreeSelect;\nconst icon = <Icon type="smile" />;\n\nclass Demo extends React.Component {\n  state = {\n    value: undefined,\n  };\n\n  onChange = value => {\n    console.log(value);\n    this.setState({ value });\n  };\n\n  render() {\n    return (\n      <TreeSelect\n        showSearch\n        suffixIcon={icon}\n        style={{ width: \'100%\' }}\n        value={this.state.value}\n        dropdownStyle={{ maxHeight: 400, overflow: \'auto\' }}\n        placeholder="Please select"\n        allowClear\n        treeDefaultExpandAll\n        onChange={this.onChange}\n      >\n        <TreeNode value="parent 1" title="parent 1" key="0-1">\n          <TreeNode value="parent 1-0" title="parent 1-0" key="0-1-1">\n            <TreeNode value="leaf1" title="my leaf" key="random" />\n            <TreeNode value="leaf2" title="your leaf" key="random1" />\n          </TreeNode>\n          <TreeNode value="parent 1-1" title="parent 1-1" key="random2">\n            <TreeNode value="sss" title={<b style={{ color: \'#08c\' }}>sss</b>} key="random3" />\n          </TreeNode>\n        </TreeNode>\n      </TreeSelect>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"tree-props"},"Tree props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether allow clear"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoClearSearchValue"),(0,r.kt)("td",{parentName:"tr",align:null},"auto clear search input value when multiple select is selected/deselected"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"To set the initial selected treeNode(s)."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Disabled or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownClassName"),(0,r.kt)("td",{parentName:"tr",align:null},"className of dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.3.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownMatchSelectWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Determine whether the dropdown menu and the select input are the same width. Default set ",(0,r.kt)("inlineCode",{parentName:"td"},"min-width")," same as input."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownStyle"),(0,r.kt)("td",{parentName:"tr",align:null},"To set the style of the dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterTreeNode"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to filter treeNodes by input value. The value of ",(0,r.kt)("inlineCode",{parentName:"td"},"treeNodeFilterProp")," is used for filtering by default."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(inputValue: string, treeNode: TreeNode) (should return boolean)"),(0,r.kt)("td",{parentName:"tr",align:null},"Function")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getPopupContainer"),(0,r.kt)("td",{parentName:"tr",align:null},"To set the container of the dropdown menu. The default is to create a ",(0,r.kt)("inlineCode",{parentName:"td"},"div")," element in ",(0,r.kt)("inlineCode",{parentName:"td"},"body"),", you can reset it to the scrolling area and make a relative reposition. ",(0,r.kt)("a",{parentName:"td",href:"https://codepen.io/afc163/pen/zEjNOy?editors=0010"},"example")),(0,r.kt)("td",{parentName:"tr",align:null},"Function(triggerNode)"),(0,r.kt)("td",{parentName:"tr",align:null},"() => document.body"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"labelInValue"),(0,r.kt)("td",{parentName:"tr",align:null},"whether to embed label in value, turn the format of value from ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"{value: string, label: ReactNode, halfChecked: string[]}")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loadData"),(0,r.kt)("td",{parentName:"tr",align:null},"Load data asynchronously."),(0,r.kt)("td",{parentName:"tr",align:null},"function(node)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxTagCount"),(0,r.kt)("td",{parentName:"tr",align:null},"Max tag count to show"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxTagPlaceholder"),(0,r.kt)("td",{parentName:"tr",align:null},"Placeholder for not showing tags"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode/function(omittedValues)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"multiple"),(0,r.kt)("td",{parentName:"tr",align:null},"Support multiple or not, will be ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," when enable ",(0,r.kt)("inlineCode",{parentName:"td"},"treeCheckable"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"placeholder"),(0,r.kt)("td",{parentName:"tr",align:null},"Placeholder of the select input"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"searchPlaceholder"),(0,r.kt)("td",{parentName:"tr",align:null},"Placeholder of the search input"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"searchValue"),(0,r.kt)("td",{parentName:"tr",align:null},"work with ",(0,r.kt)("inlineCode",{parentName:"td"},"onSearch")," to make search value controlled."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"Shows the icon before a TreeNode's title. There is no default style; you must set a custom style for it if set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showCheckedStrategy"),(0,r.kt)("td",{parentName:"tr",align:null},"The way show selected item in box. ",(0,r.kt)("strong",{parentName:"td"},"Default:")," just show child nodes. ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"TreeSelect.SHOW_ALL"),":")," show all checked treeNodes (include parent treeNode). ",(0,r.kt)("strong",{parentName:"td"},(0,r.kt)("inlineCode",{parentName:"strong"},"TreeSelect.SHOW_PARENT"),":")," show checked treeNodes (just show parent treeNode)."),(0,r.kt)("td",{parentName:"tr",align:null},"enum { TreeSelect.SHOW","_","ALL, TreeSelect.SHOW","_","PARENT, TreeSelect.SHOW","_","CHILD }"),(0,r.kt)("td",{parentName:"tr",align:null},"TreeSelect.SHOW","_","CHILD"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"Support search or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"single: ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"multiple: ",(0,r.kt)("inlineCode",{parentName:"td"},"true"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"To set the size of the select input, options: ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," ",(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'default'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"suffixIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom suffix icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeCheckable"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show checkbox on the treeNodes"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeCheckStrictly"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to check nodes precisely (in the ",(0,r.kt)("inlineCode",{parentName:"td"},"checkable")," mode), means parent and child nodes are not associated, and it will make ",(0,r.kt)("inlineCode",{parentName:"td"},"labelInValue")," be true"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeData"),(0,r.kt)("td",{parentName:"tr",align:null},"Data of the treeNodes, manual construction work is no longer needed if this property has been set(ensure the Uniqueness of each value)"),(0,r.kt)("td",{parentName:"tr",align:null},"array<{ value, title, children, ","[","disabled, disableCheckbox, selectable, checkable] }>"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeDataSimpleMode"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable simple mode of treeData. Changes the ",(0,r.kt)("inlineCode",{parentName:"td"},"treeData")," schema to: ","[","{id:1, pId:0, value:'1', title:\"test1\",...},...] where pId is parent node's id). It is possible to replace the default ",(0,r.kt)("inlineCode",{parentName:"td"},"id")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"pId")," keys by providing object to ",(0,r.kt)("inlineCode",{parentName:"td"},"treeDataSimpleMode")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"object<{ id: string, pId: string, rootPId: string }>"),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeDefaultExpandAll"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to expand all treeNodes by default"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeDefaultExpandedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"Default expanded treeNodes"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeExpandedKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"Set expanded keys"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeNodeFilterProp"),(0,r.kt)("td",{parentName:"tr",align:null},"Will be used for filtering if ",(0,r.kt)("inlineCode",{parentName:"td"},"filterTreeNode")," returns true"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'value'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"treeNodeLabelProp"),(0,r.kt)("td",{parentName:"tr",align:null},"Will render as content of select"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'title'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"To set the current selected treeNode(s)."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, can be executed when selected treeNodes or input value change"),(0,r.kt)("td",{parentName:"tr",align:null},"function(value, label, extra)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, can be executed when the search input changes."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value: string)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, can be executed when you select a treeNode."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value, node, extra)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onTreeExpand"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, can be executed when treeNode expanded"),(0,r.kt)("td",{parentName:"tr",align:null},"function(expandedKeys)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")))),(0,r.kt)("h3",{id:"tree-methods"},"Tree Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blur()"),(0,r.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus()"),(0,r.kt)("td",{parentName:"tr",align:null},"get focus"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"treenode-props"},"TreeNode props"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"We recommend you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"treeData")," rather than ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeNode"),", to avoid the trouble of manual construction.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectable"),(0,r.kt)("td",{parentName:"tr",align:null},"can be selected"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checkable"),(0,r.kt)("td",{parentName:"tr",align:null},"When Tree is checkable, set TreeNode display Checkbox or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.17.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disableCheckbox"),(0,r.kt)("td",{parentName:"tr",align:null},"Disables the checkbox of the treeNode"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Disabled or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"isLeaf"),(0,r.kt)("td",{parentName:"tr",align:null},"Leaf node or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"Required property (unless using ",(0,r.kt)("inlineCode",{parentName:"td"},"treeDataSimpleMode"),"), should be unique in the tree"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"Content showed on the treeNodes"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"'---'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Will be treated as ",(0,r.kt)("inlineCode",{parentName:"td"},"treeNodeFilterProp")," by default, should be unique in the tree"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-get-parent-node-in-onchange"},"How to get parent node in onChange?"),(0,r.kt)("p",null,"We don't provide this since performance consideration. You can get by this way: ",(0,r.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/wk080nn81k"},"https://codesandbox.io/s/wk080nn81k")))}s.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,i=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),s=u(n),k=l,N=s["".concat(i,".").concat(k)]||s[k]||m[k]||r;return n?a.createElement(N,o(o({ref:t},p),{},{components:n})):a.createElement(N,o({ref:t},p))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=s;var d={};for(var i in t)hasOwnProperty.call(t,i)&&(d[i]=t[i]);d.originalType=e,d.mdxType="string"==typeof e?e:l,o[1]=d;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);