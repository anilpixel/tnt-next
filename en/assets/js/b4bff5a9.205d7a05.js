"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5646],{34229:(t,n,e)=>{e.r(n),e.d(n,{frontMatter:()=>o,contentTitle:()=>d,metadata:()=>s,toc:()=>p,default:()=>u});var a=e(7896),l=e(31461),i=(e(2784),e(30876)),r=["components"],o={tags:["Components"],type:"Data Display",title:"List",cols:1},d=void 0,s={unversionedId:"components/data-display/list",id:"components/data-display/list",isDocsHomePage:!1,title:"List",description:"----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/list.md",sourceDirName:"components/data-display",slug:"/components/data-display/list",permalink:"/tnt-next/en/docs/components/data-display/list",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/list.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Display",title:"List",cols:1},sidebar:"componentsSidebar",previous:{title:"Empty",permalink:"/tnt-next/en/docs/components/data-display/empty"},next:{title:"Popover",permalink:"/tnt-next/en/docs/components/data-display/popover"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Simple list",id:"simple-list",children:[],level:3},{value:"Basic list",id:"basic-list",children:[],level:3},{value:"Load more",id:"load-more",children:[],level:3},{value:"Vertical",id:"vertical",children:[],level:3},{value:"Grid",id:"grid",children:[],level:3},{value:"Responsive grid list",id:"responsive-grid-list",children:[],level:3},{value:"Scrolling loaded",id:"scrolling-loaded",children:[],level:3},{value:"Infinite &amp; virtualized",id:"infinite--virtualized",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"List",id:"list",children:[],level:3},{value:"pagination",id:"pagination",children:[],level:3},{value:"List grid props",id:"list-grid-props",children:[],level:3},{value:"List.Item",id:"listitem",children:[],level:3},{value:"List.Item.Meta",id:"listitemmeta",children:[],level:3}],level:2}],m={toc:p};function u(t){var n=t.components,e=(0,l.Z)(t,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,e,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("p",null,"Simple List."),(0,i.kt)("h2",{id:"when-to-use"},"When To Use"),(0,i.kt)("p",null,"A list can be used to display content related to a single subject. The content can consist of multiple elements of varying type and size."),(0,i.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,i.kt)("h3",{id:"simple-list"},"Simple list"),(0,i.kt)("p",null,"Ant Design supports a default list size as well as a large and small size."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  'Racing car sprays burning fuel into crowd.',\n  'Japanese princess to wed commoner.',\n  'Australian walks 100km after outback crash.',\n  'Man charged over missing wedding girl.',\n  'Los Angeles battles huge wildfires.',\n];\n\nReactDOM.render(\n  <div>\n    <h3 style={{ marginBottom: 16 }}>Default Size</h3>\n    <List\n      header={<div>Header</div>}\n      footer={<div>Footer</div>}\n      bordered\n      dataSource={data}\n      renderItem={item => (\n        <List.Item>\n          <Typography.Text mark>[ITEM]</Typography.Text> {item}\n        </List.Item>\n      )}\n    />\n    <h3 style={{ margin: '16px 0' }}>Small Size</h3>\n    <List\n      size=\"small\"\n      header={<div>Header</div>}\n      footer={<div>Footer</div>}\n      bordered\n      dataSource={data}\n      renderItem={item => <List.Item>{item}</List.Item>}\n    />\n    <h3 style={{ margin: '16px 0' }}>Large Size</h3>\n    <List\n      size=\"large\"\n      header={<div>Header</div>}\n      footer={<div>Footer</div>}\n      bordered\n      dataSource={data}\n      renderItem={item => <List.Item>{item}</List.Item>}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,i.kt)("h3",{id:"basic-list"},"Basic list"),(0,i.kt)("p",null,"Basic list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    title: 'Ant Design Title 1',\n  },\n  {\n    title: 'Ant Design Title 2',\n  },\n  {\n    title: 'Ant Design Title 3',\n  },\n  {\n    title: 'Ant Design Title 4',\n  },\n];\n\nReactDOM.render(\n  <List\n    itemLayout=\"horizontal\"\n    dataSource={data}\n    renderItem={item => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n          title={<a href=\"https://ant.design\">{item.title}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    )}\n  />,\n  mountNode,\n);\n")),(0,i.kt)("h3",{id:"load-more"},"Load more"),(0,i.kt)("p",null,"Load more list with ",(0,i.kt)("inlineCode",{parentName:"p"},"loadMore")," property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const count = 3;\nconst fakeDataUrl = `https://randomuser.me/api/?results=${count}&inc=name,gender,email,nat&noinfo`;\n\nclass LoadMoreList extends React.Component {\n  state = {\n    initLoading: true,\n    loading: false,\n    data: [],\n    list: [],\n  };\n\n  componentDidMount() {\n    this.getData(res => {\n      this.setState({\n        initLoading: false,\n        data: res.results,\n        list: res.results,\n      });\n    });\n  }\n\n  getData = callback => {\n    axios({\n      url: fakeDataUrl,\n      type: 'json',\n      method: 'get',\n      headers: { 'content-type': 'application/json' }\n    }).then(res => {\n      callback(res.data);\n    });\n  };\n\n  onLoadMore = () => {\n    this.setState({\n      loading: true,\n      list: this.state.data.concat([...new Array(count)].map(() => ({ loading: true, name: {} }))),\n    });\n    this.getData(res => {\n      const data = this.state.data.concat(res.results);\n      this.setState(\n        {\n          data,\n          list: data,\n          loading: false,\n        },\n        () => {\n          // Resetting window's offsetTop so as to display react-virtualized demo underfloor.\n          // In real scene, you can using public method of react-virtualized:\n          // https://stackoverflow.com/questions/46700726/how-to-use-public-method-updateposition-of-react-virtualized\n          window.dispatchEvent(new Event('resize'));\n        },\n      );\n    });\n  };\n\n  render() {\n    const { initLoading, loading, list } = this.state;\n    const loadMore =\n      !initLoading && !loading ? (\n        <div\n          style={{\n            textAlign: 'center',\n            marginTop: 12,\n            height: 32,\n            lineHeight: '32px',\n          }}\n        >\n          <Button onClick={this.onLoadMore}>loading more</Button>\n        </div>\n      ) : null;\n\n    return (\n      <List\n        className=\"demo-loadmore-list\"\n        loading={initLoading}\n        itemLayout=\"horizontal\"\n        loadMore={loadMore}\n        dataSource={list}\n        renderItem={item => (\n          <List.Item\n            actions={[<a key=\"list-loadmore-edit\">edit</a>, <a key=\"list-loadmore-more\">more</a>]}\n          >\n            <Skeleton avatar title={false} loading={item.loading} active>\n              <List.Item.Meta\n                avatar={\n                  <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                }\n                title={<a href=\"https://ant.design\">{item.name.last}</a>}\n                description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n              />\n              <div>content</div>\n            </Skeleton>\n          </List.Item>\n        )}\n      />\n    );\n  }\n}\n\nReactDOM.render(<LoadMoreList />, mountNode);\n")),(0,i.kt)("h3",{id:"vertical"},"Vertical"),(0,i.kt)("p",null,"Set the ",(0,i.kt)("inlineCode",{parentName:"p"},"itemLayout")," property to ",(0,i.kt)("inlineCode",{parentName:"p"},"vertical")," to create a vertical list."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const listData = [];\nfor (let i = 0; i < 23; i++) {\n  listData.push({\n    href: \'http://ant.design\',\n    title: `ant design part ${i}`,\n    avatar: \'https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\',\n    description:\n      \'Ant Design, a design language for background applications, is refined by Ant UED Team.\',\n    content:\n      \'We supply a series of design principles, practical patterns and high quality design resources (Sketch and Axure), to help people create their product prototypes beautifully and efficiently.\',\n  });\n}\n\nconst IconText = ({ type, text }) => (\n  <span>\n    <Icon type={type} style={{ marginRight: 8 }} />\n    {text}\n  </span>\n);\n\nReactDOM.render(\n  <List\n    itemLayout="vertical"\n    size="large"\n    pagination={{\n      onChange: page => {\n        console.log(page);\n      },\n      pageSize: 3,\n    }}\n    dataSource={listData}\n    footer={\n      <div>\n        <b>ant design</b> footer part\n      </div>\n    }\n    renderItem={item => (\n      <List.Item\n        key={item.title}\n        actions={[\n          <IconText type="star-o" text="156" key="list-vertical-star-o" />,\n          <IconText type="like-o" text="156" key="list-vertical-like-o" />,\n          <IconText type="message" text="2" key="list-vertical-message" />,\n        ]}\n        extra={\n          <img\n            width={272}\n            alt="logo"\n            src="https://gw.alipayobjects.com/zos/rmsportal/mqaQswcyDLcXyDKnZfES.png"\n          />\n        }\n      >\n        <List.Item.Meta\n          avatar={<Avatar src={item.avatar} />}\n          title={<a href={item.href}>{item.title}</a>}\n          description={item.description}\n        />\n        {item.content}\n      </List.Item>\n    )}\n  />,\n  mountNode,\n);\n')),(0,i.kt)("h3",{id:"grid"},"Grid"),(0,i.kt)("p",null,"Create a grid layout by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"grid")," property of List."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    title: 'Title 1',\n  },\n  {\n    title: 'Title 2',\n  },\n  {\n    title: 'Title 3',\n  },\n  {\n    title: 'Title 4',\n  },\n];\n\nReactDOM.render(\n  <List\n    grid={{ gutter: 16, column: 4 }}\n    dataSource={data}\n    renderItem={item => (\n      <List.Item>\n        <Card title={item.title}>Card content</Card>\n      </List.Item>\n    )}\n  />,\n  mountNode,\n);\n")),(0,i.kt)("h3",{id:"responsive-grid-list"},"Responsive grid list"),(0,i.kt)("p",null,"Responsive grid list. The size property the is as same as ","[","Layout Grid]","(",(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/grid/#Col"},"https://ant.design/components/grid/#Col"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    title: 'Title 1',\n  },\n  {\n    title: 'Title 2',\n  },\n  {\n    title: 'Title 3',\n  },\n  {\n    title: 'Title 4',\n  },\n  {\n    title: 'Title 5',\n  },\n  {\n    title: 'Title 6',\n  },\n];\n\nReactDOM.render(\n  <List\n    grid={{\n      gutter: 16,\n      xs: 1,\n      sm: 2,\n      md: 4,\n      lg: 4,\n      xl: 6,\n      xxl: 3,\n    }}\n    dataSource={data}\n    renderItem={item => (\n      <List.Item>\n        <Card title={item.title}>Card content</Card>\n      </List.Item>\n    )}\n  />,\n  mountNode,\n);\n")),(0,i.kt)("h3",{id:"scrolling-loaded"},"Scrolling loaded"),(0,i.kt)("p",null,"The example of infinite load with ","[","react-infinite-scroller]","(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/CassetteRocks/react-infinite-scroller"},"https://github.com/CassetteRocks/react-infinite-scroller"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const fakeDataUrl = 'https://randomuser.me/api/?results=5&inc=name,gender,email,nat&noinfo';\n\nclass InfiniteListExample extends React.Component {\n  state = {\n    data: [],\n    loading: false,\n    hasMore: true,\n  };\n\n  componentDidMount() {\n    this.fetchData(res => {\n      this.setState({\n        data: res.results,\n      });\n    });\n  }\n\n  fetchData = callback => {\n    axios({\n      url: fakeDataUrl,\n      type: 'json',\n      method: 'get',\n      headers: { 'content-type': 'application/json' }\n    }).then(res => {\n      callback(res.data);\n    });\n  };\n\n  handleInfiniteOnLoad = () => {\n    let { data } = this.state;\n    this.setState({\n      loading: true,\n    });\n    if (data.length > 14) {\n      message.warning('Infinite List loaded all');\n      this.setState({\n        hasMore: false,\n        loading: false,\n      });\n      return;\n    }\n    this.fetchData(res => {\n      data = data.concat(res.results);\n      this.setState({\n        data,\n        loading: false,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"demo-infinite-container\">\n        <InfiniteScroll\n          initialLoad={false}\n          pageStart={0}\n          loadMore={this.handleInfiniteOnLoad}\n          hasMore={!this.state.loading && this.state.hasMore}\n          useWindow={false}\n        >\n          <List\n            dataSource={this.state.data}\n            renderItem={item => (\n              <List.Item key={item.id}>\n                <List.Item.Meta\n                  avatar={\n                    <Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\n                  }\n                  title={<a href=\"https://ant.design\">{item.name.last}</a>}\n                  description={item.email}\n                />\n                <div>Content</div>\n              </List.Item>\n            )}\n          >\n            {this.state.loading && this.state.hasMore && (\n              <div className=\"demo-loading-container\">\n                <Spin />\n              </div>\n            )}\n          </List>\n        </InfiniteScroll>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<InfiniteListExample />, mountNode);\n")),(0,i.kt)("h3",{id:"infinite--virtualized"},"Infinite & virtualized"),(0,i.kt)("p",null,"An example of infinite list & virtualized loading using ","[","react-virtualized]","(",(0,i.kt)("a",{parentName:"p",href:"https://github.com/bvaughn/react-virtualized"},"https://github.com/bvaughn/react-virtualized"),"). ","[","Learn more]","(",(0,i.kt)("a",{parentName:"p",href:"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/"},"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const fakeDataUrl = 'https://randomuser.me/api/?results=5&inc=name,gender,email,nat&noinfo';\n\nclass VirtualizedExample extends React.Component {\n  state = {\n    data: [],\n    loading: false,\n  };\n\n  loadedRowsMap = {};\n\n  componentDidMount() {\n    this.fetchData(res => {\n      this.setState({\n        data: res.results,\n      });\n    });\n  }\n\n  fetchData = callback => {\n    axios({\n      url: fakeDataUrl,\n      type: 'json',\n      method: 'get',\n      headers: { 'content-type': 'application/json' }\n    }).then(res => {\n      callback(res.data);\n    });\n  };\n\n  handleInfiniteOnLoad = ({ startIndex, stopIndex }) => {\n    let { data } = this.state;\n    this.setState({\n      loading: true,\n    });\n    for (let i = startIndex; i <= stopIndex; i++) {\n      // 1 means loading\n      this.loadedRowsMap[i] = 1;\n    }\n    if (data.length > 19) {\n      message.warning('Virtualized List loaded all');\n      this.setState({\n        loading: false,\n      });\n      return;\n    }\n    this.fetchData(res => {\n      data = data.concat(res.results);\n      this.setState({\n        data,\n        loading: false,\n      });\n    });\n  };\n\n  isRowLoaded = ({ index }) => !!this.loadedRowsMap[index];\n\n  renderItem = ({ index, key, style }) => {\n    const { data } = this.state;\n    const item = data[index];\n    return (\n      <List.Item key={key} style={style}>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n          title={<a href=\"https://ant.design\">{item.name.last}</a>}\n          description={item.email}\n        />\n        <div>Content</div>\n      </List.Item>\n    );\n  };\n\n  render() {\n    const { data } = this.state;\n    const vlist = ({ height, isScrolling, onChildScroll, scrollTop, onRowsRendered, width }) => (\n      <VList\n        autoHeight\n        height={height}\n        isScrolling={isScrolling}\n        onScroll={onChildScroll}\n        overscanRowCount={2}\n        rowCount={data.length}\n        rowHeight={73}\n        rowRenderer={this.renderItem}\n        onRowsRendered={onRowsRendered}\n        scrollTop={scrollTop}\n        width={width}\n      />\n    );\n    const autoSize = ({ height, isScrolling, onChildScroll, scrollTop, onRowsRendered }) => (\n      <AutoSizer disableHeight>\n        {({ width }) =>\n          vlist({\n            height,\n            isScrolling,\n            onChildScroll,\n            scrollTop,\n            onRowsRendered,\n            width,\n          })\n        }\n      </AutoSizer>\n    );\n    const infiniteLoader = ({ height, isScrolling, onChildScroll, scrollTop }) => (\n      <InfiniteLoader\n        isRowLoaded={this.isRowLoaded}\n        loadMoreRows={this.handleInfiniteOnLoad}\n        rowCount={data.length}\n      >\n        {({ onRowsRendered }) =>\n          autoSize({\n            height,\n            isScrolling,\n            onChildScroll,\n            scrollTop,\n            onRowsRendered,\n          })\n        }\n      </InfiniteLoader>\n    );\n    return (\n      <List>\n        {data.length > 0 && <WindowScroller>{infiniteLoader}</WindowScroller>}\n        {this.state.loading && <Spin className=\"demo-loading\" />}\n      </List>\n    );\n  }\n}\n\nReactDOM.render(<VirtualizedExample />, mountNode);\n")),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"list"},"List"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"bordered"),(0,i.kt)("td",{parentName:"tr",align:null},"Toggles rendering of the border around the list"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"footer"),(0,i.kt)("td",{parentName:"tr",align:null},"List footer renderer"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"grid"),(0,i.kt)("td",{parentName:"tr",align:null},"The grid type of list. You can set grid to something like {gutter: 16, column: 4}"),(0,i.kt)("td",{parentName:"tr",align:null},"object"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"header"),(0,i.kt)("td",{parentName:"tr",align:null},"List header renderer"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"itemLayout"),(0,i.kt)("td",{parentName:"tr",align:null},"The layout of list, default is ",(0,i.kt)("inlineCode",{parentName:"td"},"horizontal"),", If a vertical list is desired, set the itemLayout property to ",(0,i.kt)("inlineCode",{parentName:"td"},"vertical")),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rowKey"),(0,i.kt)("td",{parentName:"tr",align:null},"Item's unique key, could be a string or function that returns a string"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"Function(record):string"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"key"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"loading"),(0,i.kt)("td",{parentName:"tr",align:null},"Shows a loading indicator while the contents of the list are being fetched"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"https://ant.design/components/spin-cn/#API"},"object")," (",(0,i.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/8659"},"more"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"loadMore"),(0,i.kt)("td",{parentName:"tr",align:null},"Shows a load more content"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"locale"),(0,i.kt)("td",{parentName:"tr",align:null},"i18n text including empty text"),(0,i.kt)("td",{parentName:"tr",align:null},"object"),(0,i.kt)("td",{parentName:"tr",align:null},"emptyText: 'No Data' /",(0,i.kt)("br",null)),(0,i.kt)("td",{parentName:"tr",align:null},"3.4.2")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"pagination"),(0,i.kt)("td",{parentName:"tr",align:null},"Pagination ",(0,i.kt)("a",{parentName:"td",href:"https://ant.design/components/pagination/"},"config"),", hide it by setting it to false"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"object"),(0,i.kt)("td",{parentName:"tr",align:null},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"split"),(0,i.kt)("td",{parentName:"tr",align:null},"Toggles rendering of the split under the list item"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"true"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"dataSource"),(0,i.kt)("td",{parentName:"tr",align:null},"dataSource array for list"),(0,i.kt)("td",{parentName:"tr",align:null},"any","[","]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"3.20.1")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"renderItem"),(0,i.kt)("td",{parentName:"tr",align:null},"customize list item when using ",(0,i.kt)("inlineCode",{parentName:"td"},"dataSource")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"item => ReactNode")),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"3.20.1")))),(0,i.kt)("h3",{id:"pagination"},"pagination"),(0,i.kt)("p",null,"Properties for pagination."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"position"),(0,i.kt)("td",{parentName:"tr",align:null},"specify the position of ",(0,i.kt)("inlineCode",{parentName:"td"},"Pagination")),(0,i.kt)("td",{parentName:"tr",align:null},"'top'"),(0,i.kt)("td",{parentName:"tr",align:null},"'bottom'")))),(0,i.kt)("p",null,"More about pagination, please check ",(0,i.kt)("a",{parentName:"p",href:"/components/pagination/"},(0,i.kt)("inlineCode",{parentName:"a"},"Pagination")),"."),(0,i.kt)("h3",{id:"list-grid-props"},"List grid props"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"column"),(0,i.kt)("td",{parentName:"tr",align:null},"column of grid, ",(0,i.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/blob/a7f17b4cdebbca07b3b9ce5698de61e772d46237/components/list/index.tsx#L16"},"optional number")),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"gutter"),(0,i.kt)("td",{parentName:"tr",align:null},"spacing between grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"size"),(0,i.kt)("td",{parentName:"tr",align:null},"Size of list"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"default")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"middle")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"small"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xs"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<576px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"sm"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u2265576px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"md"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u2265768px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"lg"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u2265992px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xl"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u22651200px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"xxl"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u22651600px")," column of grid"),(0,i.kt)("td",{parentName:"tr",align:null},"number"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})))),(0,i.kt)("h3",{id:"listitem"},"List.Item"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"actions"),(0,i.kt)("td",{parentName:"tr",align:null},"The actions content of list item. If ",(0,i.kt)("inlineCode",{parentName:"td"},"itemLayout")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"vertical"),", shows the content on bottom, otherwise shows content on the far right."),(0,i.kt)("td",{parentName:"tr",align:null},"Array\\<ReactNode",">"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"extra"),(0,i.kt)("td",{parentName:"tr",align:null},"The extra content of list item. If ",(0,i.kt)("inlineCode",{parentName:"td"},"itemLayout")," is ",(0,i.kt)("inlineCode",{parentName:"td"},"vertical"),", shows the content on right, otherwise shows content on the far right."),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h3",{id:"listitemmeta"},"List.Item.Meta"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Property"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"avatar"),(0,i.kt)("td",{parentName:"tr",align:null},"The avatar of list item"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"description"),(0,i.kt)("td",{parentName:"tr",align:null},"The description of list item"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"title"),(0,i.kt)("td",{parentName:"tr",align:null},"The title of list item"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))))}u.isMDXComponent=!0},30876:(t,n,e)=>{e.d(n,{Zo:()=>p,kt:()=>g});var a=e(2784);function l(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function i(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function r(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?i(Object(e),!0).forEach((function(n){l(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function o(t,n){if(null==t)return{};var e,a,l=function(t,n){if(null==t)return{};var e,a,l={},i=Object.keys(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||(l[e]=t[e]);return l}(t,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)e=i[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(l[e]=t[e])}return l}var d=a.createContext({}),s=function(t){var n=a.useContext(d),e=n;return t&&(e="function"==typeof t?t(n):r(r({},n),t)),e},p=function(t){var n=s(t.components);return a.createElement(d.Provider,{value:n},t.children)},m={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(t,n){var e=t.components,l=t.mdxType,i=t.originalType,d=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),u=s(e),g=l,c=u["".concat(d,".").concat(g)]||u[g]||m[g]||i;return e?a.createElement(c,r(r({ref:n},p),{},{components:e})):a.createElement(c,r({ref:n},p))}));function g(t,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof t||l){var i=e.length,r=new Array(i);r[0]=u;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=t,o.mdxType="string"==typeof t?t:l,r[1]=o;for(var s=2;s<i;s++)r[s]=e[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,e)}u.displayName="MDXCreateElement"}}]);