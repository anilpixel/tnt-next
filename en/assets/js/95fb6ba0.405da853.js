"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9224],{57807:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>o,contentTitle:()=>s,metadata:()=>p,toc:()=>d,default:()=>c});var a=t(7896),l=t(31461),r=(t(2784),t(30876)),i=["components"],o={tags:["Components"],type:"Data Entry",title:"Upload"},s=void 0,p={unversionedId:"components/data-entry/upload",id:"components/data-entry/upload",isDocsHomePage:!1,title:"Upload",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/upload.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/upload",permalink:"/tnt-next/en/docs/components/data-entry/upload",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/upload.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"Upload"},sidebar:"componentsSidebar",previous:{title:"TreeSelect",permalink:"/tnt-next/en/docs/components/data-entry/tree-select"},next:{title:"Avatar",permalink:"/tnt-next/en/docs/components/data-display/avatar"}},d=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Upload by clicking",id:"upload-by-clicking",children:[],level:3},{value:"Avatar",id:"avatar",children:[],level:3},{value:"Pictures Wall",id:"pictures-wall",children:[],level:3},{value:"Complete control over file list",id:"complete-control-over-file-list",children:[],level:3},{value:"Drag and Drop",id:"drag-and-drop",children:[],level:3},{value:"Upload directory",id:"upload-directory",children:[],level:3},{value:"Upload manually",id:"upload-manually",children:[],level:3},{value:"Pictures with list style",id:"pictures-with-list-style",children:[],level:3},{value:"Customize preview file",id:"customize-preview-file",children:[],level:3},{value:"Transform file before request",id:"transform-file-before-request",children:[],level:3},{value:"Aliyun OSS",id:"aliyun-oss",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"onChange",id:"onchange",children:[],level:3}],level:2},{value:"FAQ",id:"faq",children:[{value:"How to implement upload server side?",id:"how-to-implement-upload-server-side",children:[],level:3},{value:"I want to display download links.",id:"i-want-to-display-download-links",children:[],level:3},{value:"How to use <code>customRequest</code>?",id:"how-to-use-customrequest",children:[],level:3},{value:"IE8/9 Note",id:"ie89-note",children:[],level:3}],level:2}],u={toc:d};function c(e){var n=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Upload file by selecting or dragging."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("p",null,"Uploading is the process of publishing information (web pages, text, pictures, video, etc.) to a remote server via a web page or upload tool."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When you need to upload one or more files."),(0,r.kt)("li",{parentName:"ul"},"When you need to show the process of uploading."),(0,r.kt)("li",{parentName:"ul"},"When you need to upload files by dragging and dropping.")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"upload-by-clicking"},"Upload by clicking"),(0,r.kt)("p",null,"Classic mode. File selection dialog pops up when upload button is clicked."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const props = {\n  name: 'file',\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  headers: {\n    authorization: 'authorization-text',\n  },\n  onChange(info) {\n    if (info.file.status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (info.file.status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully`);\n    } else if (info.file.status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nReactDOM.render(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Click to Upload\n    </Button>\n  </Upload>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"avatar"},"Avatar"),(0,r.kt)("p",null,"Click to upload user's avatar, and validate size and format of picture with ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeUpload"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function getBase64(img, callback) {\n  const reader = new FileReader();\n  reader.addEventListener('load', () => callback(reader.result));\n  reader.readAsDataURL(img);\n}\n\nfunction beforeUpload(file) {\n  const isJpgOrPng = file.type === 'image/jpeg' || file.type === 'image/png';\n  if (!isJpgOrPng) {\n    message.error('You can only upload JPG/PNG file!');\n  }\n  const isLt2M = file.size / 1024 / 1024 < 2;\n  if (!isLt2M) {\n    message.error('Image must smaller than 2MB!');\n  }\n  return isJpgOrPng && isLt2M;\n}\n\nclass Avatar extends React.Component {\n  state = {\n    loading: false,\n  };\n\n  handleChange = info => {\n    if (info.file.status === 'uploading') {\n      this.setState({ loading: true });\n      return;\n    }\n    if (info.file.status === 'done') {\n      // Get this url from response in real world.\n      getBase64(info.file.originFileObj, imageUrl =>\n        this.setState({\n          imageUrl,\n          loading: false,\n        }),\n      );\n    }\n  };\n\n  render() {\n    const uploadButton = (\n      <div>\n        <Icon type={this.state.loading ? 'loading' : 'plus'} />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    const { imageUrl } = this.state;\n    return (\n      <Upload\n        name=\"avatar\"\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n        beforeUpload={beforeUpload}\n        onChange={this.handleChange}\n      >\n        {imageUrl ? <img src={imageUrl} alt=\"avatar\" style={{ width: '100%' }} /> : uploadButton}\n      </Upload>\n    );\n  }\n}\n\nReactDOM.render(<Avatar />, mountNode);```\n\n### Default Files\n\nUse `defaultFileList` for uploaded files when page init.\n\n```jsx live\nconst props = {\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  onChange({ file, fileList }) {\n    if (file.status !== 'uploading') {\n      console.log(file, fileList);\n    }\n  },\n  defaultFileList: [\n    {\n      uid: '1',\n      name: 'xxx.png',\n      status: 'done',\n      response: 'Server Error 500', // custom error message to show\n      url: 'http://www.baidu.com/xxx.png',\n    },\n    {\n      uid: '2',\n      name: 'yyy.png',\n      status: 'done',\n      url: 'http://www.baidu.com/yyy.png',\n    },\n    {\n      uid: '3',\n      name: 'zzz.png',\n      status: 'error',\n      response: 'Server Error 500', // custom error message to show\n      url: 'http://www.baidu.com/zzz.png',\n    },\n  ],\n};\n\nReactDOM.render(\n  <Upload {...props}>\n    <Button>\n      <Icon type=\"upload\" /> Upload\n    </Button>\n  </Upload>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"pictures-wall"},"Pictures Wall"),(0,r.kt)("p",null,"After users upload picture, the thumbnail will be shown in list. The upload button will disappear when count meets limitation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nclass PicturesWall extends React.Component {\n  state = {\n    previewVisible: false,\n    previewImage: '',\n    fileList: [\n      {\n        uid: '-1',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-2',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-3',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-4',\n        name: 'image.png',\n        status: 'done',\n        url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n      },\n      {\n        uid: '-5',\n        name: 'image.png',\n        status: 'error',\n      },\n    ],\n  };\n\n  handleCancel = () => this.setState({ previewVisible: false });\n\n  handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    this.setState({\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n    });\n  };\n\n  handleChange = ({ fileList }) => this.setState({ fileList });\n\n  render() {\n    const { previewVisible, previewImage, fileList } = this.state;\n    const uploadButton = (\n      <div>\n        <Icon type=\"plus\" />\n        <div className=\"ant-upload-text\">Upload</div>\n      </div>\n    );\n    return (\n      <div className=\"clearfix\">\n        <Upload\n          action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\n          listType=\"picture-card\"\n          fileList={fileList}\n          onPreview={this.handlePreview}\n          onChange={this.handleChange}\n        >\n          {fileList.length >= 8 ? null : uploadButton}\n        </Upload>\n        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<PicturesWall />, mountNode);\n")),(0,r.kt)("h3",{id:"complete-control-over-file-list"},"Complete control over file list"),(0,r.kt)("p",null,"You can gain full control over filelist by configuring ",(0,r.kt)("inlineCode",{parentName:"p"},"fileList"),". You can accomplish all kinds of customed functions. The following shows three circumstances:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class MyUpload extends React.Component {\n  state = {\n    fileList: [\n      {\n        uid: '-1',\n        name: 'xxx.png',\n        status: 'done',\n        url: 'http://www.baidu.com/xxx.png',\n      },\n    ],\n  };\n\n  handleChange = info => {\n    let fileList = [...info.fileList];\n\n    // 1. Limit the number of uploaded files\n    // Only to show two recent uploaded files, and old ones will be replaced by the new\n    fileList = fileList.slice(-2);\n\n    // 2. Read from response and show file link\n    fileList = fileList.map(file => {\n      if (file.response) {\n        // Component will show file.url as link\n        file.url = file.response.url;\n      }\n      return file;\n    });\n\n    this.setState({ fileList });\n  };\n\n  render() {\n    const props = {\n      action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n      onChange: this.handleChange,\n      multiple: true,\n    };\n    return (\n      <Upload {...props} fileList={this.state.fileList}>\n        <Button>\n          <Icon type=\"upload\" /> Upload\n        </Button>\n      </Upload>\n    );\n  }\n}\n\nReactDOM.render(<MyUpload />, mountNode);\n")),(0,r.kt)("h3",{id:"drag-and-drop"},"Drag and Drop"),(0,r.kt)("p",null,"You can drag files to a specific area, to upload. Alternatively, you can also upload by selecting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Dragger } = Upload;\n\nconst props = {\n  name: 'file',\n  multiple: true,\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  onChange(info) {\n    const { status } = info.file;\n    if (status !== 'uploading') {\n      console.log(info.file, info.fileList);\n    }\n    if (status === 'done') {\n      message.success(`${info.file.name} file uploaded successfully.`);\n    } else if (status === 'error') {\n      message.error(`${info.file.name} file upload failed.`);\n    }\n  },\n};\n\nReactDOM.render(\n  <Dragger {...props}>\n    <p className=\"ant-upload-drag-icon\">\n      <Icon type=\"inbox\" />\n    </p>\n    <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n    <p className=\"ant-upload-hint\">\n      Support for a single or bulk upload. Strictly prohibit from uploading company data or other\n      band files\n    </p>\n  </Dragger>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"upload-directory"},"Upload directory"),(0,r.kt)("p",null,"You can select and upload a whole directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <Upload action="https://www.mocky.io/v2/5cc8019d300000980a055e76" directory>\n    <Button>\n      <Icon type="upload" /> Upload Directory\n    </Button>\n  </Upload>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"upload-manually"},"Upload manually"),(0,r.kt)("p",null,"Upload files manually after ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeUpload")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nclass Demo extends React.Component {\n  state = {\n    fileList: [],\n    uploading: false,\n  };\n\n  handleUpload = () => {\n    const { fileList } = this.state;\n    const formData = new FormData();\n    fileList.forEach(file => {\n      formData.append('files[]', file);\n    });\n\n    this.setState({\n      uploading: true,\n    });\n\n    // You can use any AJAX library you like\n    axios({\n      url: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n      method: 'post',\n      processData: false,\n      data: formData\n    }).then(() => {\n      this.setState({\n        fileList: [],\n        uploading: false,\n      });\n      message.success('upload successfully.');\n    }).catch(() => {\n      this.setState({\n        uploading: false,\n      });\n      message.error('upload failed.');\n    });;\n  };\n\n  render() {\n    const { uploading, fileList } = this.state;\n    const props = {\n      onRemove: file => {\n        this.setState(state => {\n          const index = state.fileList.indexOf(file);\n          const newFileList = state.fileList.slice();\n          newFileList.splice(index, 1);\n          return {\n            fileList: newFileList,\n          };\n        });\n      },\n      beforeUpload: file => {\n        this.setState(state => ({\n          fileList: [...state.fileList, file],\n        }));\n        return false;\n      },\n      fileList,\n    };\n\n    return (\n      <div>\n        <Upload {...props}>\n          <Button>\n            <Icon type=\"upload\" /> Select File\n          </Button>\n        </Upload>\n        <Button\n          type=\"primary\"\n          onClick={this.handleUpload}\n          disabled={fileList.length === 0}\n          loading={uploading}\n          style={{ marginTop: 16 }}\n        >\n          {uploading ? 'Uploading' : 'Start Upload'}\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"pictures-with-list-style"},"Pictures with list style"),(0,r.kt)("p",null,"If uploaded file is a picture, the thumbnail can be shown. ",(0,r.kt)("inlineCode",{parentName:"p"},"IE8/9")," do not support local thumbnail show. Please use ",(0,r.kt)("inlineCode",{parentName:"p"},"thumbUrl")," instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const fileList = [\n  {\n    uid: '-1',\n    name: 'xxx.png',\n    status: 'done',\n    url: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n    thumbUrl: 'https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png',\n  },\n  {\n    uid: '-2',\n    name: 'yyy.png',\n    status: 'error',\n  },\n];\n\nconst props = {\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n};\n\nconst props2 = {\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  listType: 'picture',\n  defaultFileList: [...fileList],\n  className: 'upload-list-inline',\n};\n\nReactDOM.render(\n  <div>\n    <Upload {...props}>\n      <Button>\n        <Icon type=\"upload\" /> Upload\n      </Button>\n    </Upload>\n    <br />\n    <br />\n    <Upload {...props2}>\n      <Button>\n        <Icon type=\"upload\" /> Upload\n      </Button>\n    </Upload>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"customize-preview-file"},"Customize preview file"),(0,r.kt)("p",null,"Customize local preview. Can handle with non-image format files such as video."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const props = {\n  action: '//jsonplaceholder.typicode.com/posts/',\n  listType: 'picture',\n  previewFile(file) {\n    console.log('Your upload file:', file);\n    // Your process logic. Here we just mock to the same file\n    return fetch('https://next.json-generator.com/api/json/get/4ytyBoLK8', {\n      method: 'POST',\n      body: file,\n    })\n      .then(res => res.json())\n      .then(({ thumbnail }) => thumbnail);\n  },\n};\n\nReactDOM.render(\n  <div>\n    <Upload {...props}>\n      <Button>\n        <Icon type=\"upload\" /> Upload\n      </Button>\n    </Upload>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"transform-file-before-request"},"Transform file before request"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"transformFile")," for transform file before request such as add a watermark."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const props = {\n  action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n  transformFile(file) {\n    return new Promise(resolve => {\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = () => {\n        const canvas = document.createElement('canvas');\n        const img = document.createElement('img');\n        img.src = reader.result;\n        img.onload = () => {\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0);\n          ctx.fillStyle = 'red';\n          ctx.textBaseline = 'middle';\n          ctx.fillText('Ant Design', 20, 20);\n          canvas.toBlob(resolve);\n        };\n      };\n    });\n  },\n};\n\nReactDOM.render(\n  <div>\n    <Upload {...props}>\n      <Button>\n        <Icon type=\"upload\" /> Upload\n      </Button>\n    </Upload>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"aliyun-oss"},"Aliyun OSS"),(0,r.kt)("p",null,"Use Aliyun OSS upload example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class AliyunOSSUpload extends React.Component {\n  state = {\n    OSSData: {},\n  };\n\n  async componentDidMount() {\n    await this.init();\n  }\n\n  init = async () => {\n    try {\n      const OSSData = await this.mockGetOSSData();\n\n      this.setState({\n        OSSData,\n      });\n    } catch (error) {\n      message.error(error);\n    }\n  };\n\n  // Mock get OSS api\n  // https://help.aliyun.com/document_detail/31988.html\n  mockGetOSSData = () => {\n    return {\n      dir: 'user-dir/',\n      expire: '1577811661',\n      host: '//www.mocky.io/v2/5cc8019d300000980a055e76',\n      accessId: 'c2hhb2RhaG9uZw==',\n      policy: 'eGl4aWhhaGFrdWt1ZGFkYQ==',\n      signature: 'ZGFob25nc2hhbw==',\n    };\n  };\n\n  onChange = ({ fileList }) => {\n    const { onChange } = this.props;\n    console.log('Aliyun OSS:', fileList);\n    if (onChange) {\n      onChange([...fileList]);\n    }\n  };\n\n  onRemove = file => {\n    const { value, onChange } = this.props;\n\n    const files = value.filter(v => v.url !== file.url);\n\n    if (onChange) {\n      onChange(files);\n    }\n  };\n\n  transformFile = file => {\n    const { OSSData } = this.state;\n\n    const suffix = file.name.slice(file.name.lastIndexOf('.'));\n    const filename = Date.now() + suffix;\n    file.url = OSSData.dir + filename;\n\n    return file;\n  };\n\n  getExtraData = file => {\n    const { OSSData } = this.state;\n\n    return {\n      key: file.url,\n      OSSAccessKeyId: OSSData.accessId,\n      policy: OSSData.policy,\n      Signature: OSSData.signature,\n    };\n  };\n\n  beforeUpload = async () => {\n    const { OSSData } = this.state;\n    const expire = OSSData.expire * 1000;\n\n    if (expire < Date.now()) {\n      await this.init();\n    }\n    return true;\n  };\n\n  render() {\n    const { value } = this.props;\n    const props = {\n      name: 'file',\n      fileList: value,\n      action: this.state.OSSData.host,\n      onChange: this.onChange,\n      onRemove: this.onRemove,\n      transformFile: this.transformFile,\n      data: this.getExtraData,\n      beforeUpload: this.beforeUpload,\n    };\n    return (\n      <Upload {...props}>\n        <Button>\n          <Icon type=\"upload\" /> Click to Upload\n        </Button>\n      </Upload>\n    );\n  }\n}\n\nclass FormPage extends React.Component {\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} labelCol={{ span: 4 }}>\n        <Form.Item label=\"Photos\">{getFieldDecorator('photos')(<AliyunOSSUpload />)}</Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedFormPage = Form.create()(FormPage);\n\nReactDOM.render(<WrappedFormPage />, mountNode);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"accept"),(0,r.kt)("td",{parentName:"tr",align:null},"File types that can be accepted. See ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept"},"input accept Attribute")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"action"),(0,r.kt)("td",{parentName:"tr",align:null},"Uploading URL"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"(file) => ",(0,r.kt)("inlineCode",{parentName:"td"},"Promise")),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"method"),(0,r.kt)("td",{parentName:"tr",align:null},"http method of upload request"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'post'"),(0,r.kt)("td",{parentName:"tr",align:null},"3.25.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"directory"),(0,r.kt)("td",{parentName:"tr",align:null},"support upload whole directory (",(0,r.kt)("a",{parentName:"td",href:"https://caniuse.com/#feat=input-file-directory"},"caniuse"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"beforeUpload"),(0,r.kt)("td",{parentName:"tr",align:null},"Hook function which will be executed before uploading. Uploading will be stopped with ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," or a rejected Promise returned. ",(0,r.kt)("strong",{parentName:"td"},"Warning\uff1athis function is not supported in IE9"),"\u3002"),(0,r.kt)("td",{parentName:"tr",align:null},"(file, fileList) => `boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Promise`"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"customRequest"),(0,r.kt)("td",{parentName:"tr",align:null},"override for the default xhr behavior allowing for additional customization and ability to implement your own XMLHttpRequest"),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"Uploading extra params or function which can return uploading extra params."),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"function(file)"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultFileList"),(0,r.kt)("td",{parentName:"tr",align:null},"Default list of files that have been uploaded."),(0,r.kt)("td",{parentName:"tr",align:null},"object","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"disable upload button"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fileList"),(0,r.kt)("td",{parentName:"tr",align:null},"List of files that have been uploaded (controlled). Here is a common issue ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/2423"},"#2423")," when using it"),(0,r.kt)("td",{parentName:"tr",align:null},"object","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"headers"),(0,r.kt)("td",{parentName:"tr",align:null},"Set request headers, valid above IE10."),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"listType"),(0,r.kt)("td",{parentName:"tr",align:null},"Built-in stylesheets, support for three types: ",(0,r.kt)("inlineCode",{parentName:"td"},"text"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"picture")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"picture-card")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'text'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"multiple"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to support selected multiple file. ",(0,r.kt)("inlineCode",{parentName:"td"},"IE10+")," supported. You can select multiple files with CTRL holding down while multiple is set to be true"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of uploading file"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'file'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"previewFile"),(0,r.kt)("td",{parentName:"tr",align:null},"Customize preview file logic"),(0,r.kt)("td",{parentName:"tr",align:null},"(file: File"),(0,r.kt)("td",{parentName:"tr",align:null},"Blob) => Promise\\<dataURL: string>"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showUploadList"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show default upload list, could be an object to specify ",(0,r.kt)("inlineCode",{parentName:"td"},"showPreviewIcon"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"showRemoveIcon")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"showDownloadIcon")," individually"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean or { showPreviewIcon?: boolean, showDownloadIcon?: boolean, showRemoveIcon?: boolean }"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"supportServerRender"),(0,r.kt)("td",{parentName:"tr",align:null},"Need to be turned on while the server side is rendering"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"withCredentials"),(0,r.kt)("td",{parentName:"tr",align:null},"ajax upload with cookie sent"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openFileDialogOnClick"),(0,r.kt)("td",{parentName:"tr",align:null},"click open file dialog"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, can be executed when uploading state is changing, see ",(0,r.kt)("a",{parentName:"td",href:"#onChange"},"onChange")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPreview"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, will be executed when file link or preview icon is clicked"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(file)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onRemove"),(0,r.kt)("td",{parentName:"tr",align:null},"A callback function, will be executed when removing file button is clicked, remove event will be prevented when return value is ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," or a Promise which resolve(false) or reject"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(file): `boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Promise`"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDownload"),(0,r.kt)("td",{parentName:"tr",align:null},"Click the method to download the file, pass the method to perform the method logic, do not pass the default jump to the new TAB."),(0,r.kt)("td",{parentName:"tr",align:null},"Function(file): void"),(0,r.kt)("td",{parentName:"tr",align:null},"Jump to new TAB"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transformFile \xa0"),(0,r.kt)("td",{parentName:"tr",align:null},"Customize transform file before request"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(file): `string"),(0,r.kt)("td",{parentName:"tr",align:null},"Blob"),(0,r.kt)("td",{parentName:"tr",align:null},"File")))),(0,r.kt)("h3",{id:"onchange"},"onChange"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The function will be called when uploading is in progress, completed or failed.")),(0,r.kt)("p",null,"When uploading state change, it returns:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n  file: { /* ... */ },\n  fileList: [ /* ... */ ],\n  event: { /* ... */ },\n}\n")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"file")," File object for the current operation."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-js"},"{\n   uid: 'uid',      // unique identifier, negative is recommend, to prevent interference with internal generated id\n   name: 'xx.png',   // file name\n   status: 'done', // options\uff1auploading, done, error, removed\n   response: '{\"status\": \"success\"}', // response from server\n   linkProps: '{\"download\": \"image\"}', // additional html props of file link\n   xhr: 'XMLHttpRequest{ ... }', // XMLHttpRequest Header\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"fileList")," current list of files")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"event")," response from server, including uploading progress, supported by advanced browsers."))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-implement-upload-server-side"},"How to implement upload server side?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You can consult ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/blueimp/jQuery-File-Upload/wiki#server-side"},"jQuery-File-Upload")," about how to implement server side upload interface."),(0,r.kt)("li",{parentName:"ul"},"There is a mock example of ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/react-component/upload/blob/master/server.js"},"express")," in rc-upload.")),(0,r.kt)("h3",{id:"i-want-to-display-download-links"},"I want to display download links."),(0,r.kt)("p",null,"Please set property ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," of each item in ",(0,r.kt)("inlineCode",{parentName:"p"},"fileList")," to control content of link."),(0,r.kt)("h3",{id:"how-to-use-customrequest"},"How to use ",(0,r.kt)("inlineCode",{parentName:"h3"},"customRequest"),"?"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-component/upload#customrequest"},"https://github.com/react-component/upload#customrequest"),"."),(0,r.kt)("h3",{id:"ie89-note"},"IE8/9 Note"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-component/upload#ie89-note"},"https://github.com/react-component/upload#ie89-note"),"."))}c.isMDXComponent=!0},30876:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(2784);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(t),m=l,g=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return t?a.createElement(g,i(i({ref:n},d),{},{components:t})):a.createElement(g,i({ref:n},d))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var p=2;p<r;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);