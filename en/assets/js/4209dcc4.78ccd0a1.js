"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1435],{22532:(t,n,e)=>{e.r(n),e.d(n,{frontMatter:()=>i,contentTitle:()=>d,metadata:()=>s,toc:()=>m,default:()=>u});var a=e(7896),l=e(31461),o=(e(2784),e(30876)),r=["components"],i={type:"Feedback",tags:["Components"],title:"Modal"},d=void 0,s={unversionedId:"components/feedback/modal",id:"components/feedback/modal",isDocsHomePage:!1,title:"Modal",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/feedback/modal.md",sourceDirName:"components/feedback",slug:"/components/feedback/modal",permalink:"/tnt-next/en/docs/components/feedback/modal",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/feedback/modal.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{type:"Feedback",tags:["Components"],title:"Modal"},sidebar:"componentsSidebar",previous:{title:"Message",permalink:"/tnt-next/en/docs/components/feedback/message"},next:{title:"Notification",permalink:"/tnt-next/en/docs/components/feedback/notification"}},m=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Asynchronously close",id:"asynchronously-close",children:[],level:3},{value:"Customized Footer",id:"customized-footer",children:[],level:3},{value:"Confirmation modal dialog",id:"confirmation-modal-dialog",children:[],level:3},{value:"Confirmation modal dialog",id:"confirmation-modal-dialog-1",children:[],level:3},{value:"Information modal dialog",id:"information-modal-dialog",children:[],level:3},{value:"Internationalization",id:"internationalization",children:[],level:3},{value:"Manual to update destroy",id:"manual-to-update-destroy",children:[],level:3},{value:"To customize the position of modal",id:"to-customize-the-position-of-modal",children:[],level:3},{value:"destroy confirmation modal dialog",id:"destroy-confirmation-modal-dialog",children:[],level:3},{value:"Customize footer buttons props",id:"customize-footer-buttons-props",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Note",id:"note",children:[],level:4},{value:"Modal.method()",id:"modalmethod",children:[],level:3}],level:2}],p={toc:m};function u(t){var n=t.components,e=(0,l.Z)(t,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Modal dialogs."),(0,o.kt)("h2",{id:"when-to-use"},"When To Use"),(0,o.kt)("p",null,"When requiring users to interact with the application, but without jumping to a new page and interrupting the user's workflow, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal")," to create a new floating layer over the current page to get user feedback or display information. Additionally, if you need show a simple confirmation dialog, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"antd.Modal.confirm()"),", and so on."),(0,o.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,o.kt)("h3",{id:"basic"},"Basic"),(0,o.kt)("p",null,"Basic modal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type="primary" onClick={this.showModal}>\n          Open Modal\n        </Button>\n        <Modal\n          title="Basic Modal"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,o.kt)("h3",{id:"asynchronously-close"},"Asynchronously close"),(0,o.kt)("p",null,"Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class App extends React.Component {\n  state = {\n    ModalText: 'Content of the modal',\n    visible: false,\n    confirmLoading: false,\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = () => {\n    this.setState({\n      ModalText: 'The modal will be closed after two seconds',\n      confirmLoading: true,\n    });\n    setTimeout(() => {\n      this.setState({\n        visible: false,\n        confirmLoading: false,\n      });\n    }, 2000);\n  };\n\n  handleCancel = () => {\n    console.log('Clicked cancel button');\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    const { visible, confirmLoading, ModalText } = this.state;\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Open Modal with async logic\n        </Button>\n        <Modal\n          title=\"Title\"\n          visible={visible}\n          onOk={this.handleOk}\n          confirmLoading={confirmLoading}\n          onCancel={this.handleCancel}\n        >\n          <p>{ModalText}</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,o.kt)("h3",{id:"customized-footer"},"Customized Footer"),(0,o.kt)("p",null,"A more complex example which define a customized footer button bar. The dialog will change to loading state after clicking the submit button, and when the loading is done, the modal dialog will be closed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = {\n    loading: false,\n    visible: false,\n  };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = () => {\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({ loading: false, visible: false });\n    }, 3000);\n  };\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n\n  render() {\n    const { visible, loading } = this.state;\n    return (\n      <div>\n        <Button type="primary" onClick={this.showModal}>\n          Open Modal with customized footer\n        </Button>\n        <Modal\n          visible={visible}\n          title="Title"\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          footer={[\n            <Button key="back" onClick={this.handleCancel}>\n              Return\n            </Button>,\n            <Button key="submit" type="primary" loading={loading} onClick={this.handleOk}>\n              Submit\n            </Button>,\n          ]}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,o.kt)("h3",{id:"confirmation-modal-dialog"},"Confirmation modal dialog"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"confirm()")," to show a confirmation modal dialog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { confirm } = Modal;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you Want to delete these items?',\n    content: 'Some descriptions',\n    onOk() {\n      console.log('OK');\n    },\n    onCancel() {\n      console.log('Cancel');\n    },\n  });\n}\n\nfunction showDeleteConfirm() {\n  confirm({\n    title: 'Are you sure delete this task?',\n    content: 'Some descriptions',\n    okText: 'Yes',\n    okType: 'danger',\n    cancelText: 'No',\n    onOk() {\n      console.log('OK');\n    },\n    onCancel() {\n      console.log('Cancel');\n    },\n  });\n}\n\nfunction showPropsConfirm() {\n  confirm({\n    title: 'Are you sure delete this task?',\n    content: 'Some descriptions',\n    okText: 'Yes',\n    okType: 'danger',\n    okButtonProps: {\n      disabled: true,\n    },\n    cancelText: 'No',\n    onOk() {\n      console.log('OK');\n    },\n    onCancel() {\n      console.log('Cancel');\n    },\n  });\n}\n\nReactDOM.render(\n  <div>\n    <Button onClick={showConfirm}>Confirm</Button>\n    <Button onClick={showDeleteConfirm} type=\"dashed\">\n      Delete\n    </Button>\n    <Button onClick={showPropsConfirm} type=\"dashed\">\n      With extra props\n    </Button>\n  </div>,\n  mountNode,\n);\n")),(0,o.kt)("h3",{id:"confirmation-modal-dialog-1"},"Confirmation modal dialog"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"confirm()")," to show a confirmation modal dialog. Let onCancel/onOk function return a promise object to delay closing the dialog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { confirm } = Modal;\n\nfunction showConfirm() {\n  confirm({\n    title: 'Do you want to delete these items?',\n    content: 'When clicked the OK button, this dialog will be closed after 1 second',\n    onOk() {\n      return new Promise((resolve, reject) => {\n        setTimeout(Math.random() > 0.5 ? resolve : reject, 1000);\n      }).catch(() => console.log('Oops errors!'));\n    },\n    onCancel() {},\n  });\n}\n\nReactDOM.render(<Button onClick={showConfirm}>Confirm</Button>, mountNode);\n")),(0,o.kt)("h3",{id:"information-modal-dialog"},"Information modal dialog"),(0,o.kt)("p",null,"In the various types of information modal dialog, only one button to close dialog is provided."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function info() {\n  Modal.info({\n    title: 'This is a notification message',\n    content: (\n      <div>\n        <p>some messages...some messages...</p>\n        <p>some messages...some messages...</p>\n      </div>\n    ),\n    onOk() {},\n  });\n}\n\nfunction success() {\n  Modal.success({\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction error() {\n  Modal.error({\n    title: 'This is an error message',\n    content: 'some messages...some messages...',\n  });\n}\n\nfunction warning() {\n  Modal.warning({\n    title: 'This is a warning message',\n    content: 'some messages...some messages...',\n  });\n}\n\nReactDOM.render(\n  <div>\n    <Button onClick={info}>Info</Button>\n    <Button onClick={success}>Success</Button>\n    <Button onClick={error}>Error</Button>\n    <Button onClick={warning}>Warning</Button>\n  </div>,\n  mountNode,\n);\n")),(0,o.kt)("h3",{id:"internationalization"},"Internationalization"),(0,o.kt)("p",null,"To customize the text of the buttons, you need to set ",(0,o.kt)("inlineCode",{parentName:"p"},"okText")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cancelText")," props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class LocalizedModal extends React.Component {\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  hideModal = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type=\"primary\" onClick={this.showModal}>\n          Modal\n        </Button>\n        <Modal\n          title=\"Modal\"\n          visible={this.state.visible}\n          onOk={this.hideModal}\n          onCancel={this.hideModal}\n          okText=\"\u786e\u8ba4\"\n          cancelText=\"\u53d6\u6d88\"\n        >\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n          <p>Bla bla ...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nfunction confirm() {\n  Modal.confirm({\n    title: 'Confirm',\n    content: 'Bla bla ...',\n    okText: '\u786e\u8ba4',\n    cancelText: '\u53d6\u6d88',\n  });\n}\n\nReactDOM.render(\n  <div>\n    <LocalizedModal />\n    <br />\n    <Button onClick={confirm}>Confirm</Button>\n  </div>,\n  mountNode,\n);\n")),(0,o.kt)("h3",{id:"manual-to-update-destroy"},"Manual to update destroy"),(0,o.kt)("p",null,"Manually updating and destroying a modal from ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal.method"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function countDown() {\n  let secondsToGo = 5;\n  const modal = Modal.success({\n    title: 'This is a notification message',\n    content: `This modal will be destroyed after ${secondsToGo} second.`,\n  });\n  const timer = setInterval(() => {\n    secondsToGo -= 1;\n    modal.update({\n      content: `This modal will be destroyed after ${secondsToGo} second.`,\n    });\n  }, 1000);\n  setTimeout(() => {\n    clearInterval(timer);\n    modal.destroy();\n  }, secondsToGo * 1000);\n}\n\nReactDOM.render(<Button onClick={countDown}>Open modal to close in 5s</Button>, mountNode);\n")),(0,o.kt)("h3",{id:"to-customize-the-position-of-modal"},"To customize the position of modal"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"centered"),",",(0,o.kt)("inlineCode",{parentName:"p"},"style.top")," or other styles to set position of modal dialog."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = {\n    modal1Visible: false,\n    modal2Visible: false,\n  };\n\n  setModal1Visible(modal1Visible) {\n    this.setState({ modal1Visible });\n  }\n\n  setModal2Visible(modal2Visible) {\n    this.setState({ modal2Visible });\n  }\n\n  render() {\n    return (\n      <div>\n        <Button type="primary" onClick={() => this.setModal1Visible(true)}>\n          Display a modal dialog at 20px to Top\n        </Button>\n        <Modal\n          title="20px to Top"\n          style={{ top: 20 }}\n          visible={this.state.modal1Visible}\n          onOk={() => this.setModal1Visible(false)}\n          onCancel={() => this.setModal1Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n        <br />\n        <br />\n        <Button type="primary" onClick={() => this.setModal2Visible(true)}>\n          Vertically centered modal dialog\n        </Button>\n        <Modal\n          title="Vertically centered modal dialog"\n          centered\n          visible={this.state.modal2Visible}\n          onOk={() => this.setModal2Visible(false)}\n          onCancel={() => this.setModal2Visible(false)}\n        >\n          <p>some contents...</p>\n          <p>some contents...</p>\n          <p>some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,o.kt)("h3",{id:"destroy-confirmation-modal-dialog"},"destroy confirmation modal dialog"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Modal.destroyAll()")," will destroy all confirmation modal dialogs. Usually, you can use it in router change event to destroy confirm modal dialog automatically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function destroyAll() {\n  Modal.destroyAll();\n}\n\nconst { confirm } = Modal;\n\nfunction showConfirm() {\n  for (let i = 0; i < 3; i += 1) {\n    setTimeout(() => {\n      confirm({\n        content: <Button onClick={destroyAll}>Click to destroy all</Button>,\n        onOk() {\n          console.log('OK');\n        },\n        onCancel() {\n          console.log('Cancel');\n        },\n      });\n    }, i * 500);\n  }\n}\n\nReactDOM.render(\n  <div>\n    <Button onClick={showConfirm}>Confirm</Button>\n  </div>,\n  mountNode,\n);\n")),(0,o.kt)("h3",{id:"customize-footer-buttons-props"},"Customize footer buttons props"),(0,o.kt)("p",null,"Passing ",(0,o.kt)("inlineCode",{parentName:"p"},"okButtonProps")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"cancelButtonProps")," will customize the OK button and cancel button props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = { visible: false };\n\n  showModal = () => {\n    this.setState({\n      visible: true,\n    });\n  };\n\n  handleOk = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  handleCancel = e => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type="primary" onClick={this.showModal}>\n          Open Modal with customized button props\n        </Button>\n        <Modal\n          title="Basic Modal"\n          visible={this.state.visible}\n          onOk={this.handleOk}\n          onCancel={this.handleCancel}\n          okButtonProps={{ disabled: true }}\n          cancelButtonProps={{ disabled: true }}\n        >\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n          <p>Some contents...</p>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Version"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"afterClose"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when modal is closed completely."),(0,o.kt)("td",{parentName:"tr",align:null},"function"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"bodyStyle"),(0,o.kt)("td",{parentName:"tr",align:null},"Body style for modal body element. Such as height, padding etc."),(0,o.kt)("td",{parentName:"tr",align:null},"object"),(0,o.kt)("td",{parentName:"tr",align:null},"{}"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cancelText"),(0,o.kt)("td",{parentName:"tr",align:null},"Text of the Cancel button"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Cancel"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"centered"),(0,o.kt)("td",{parentName:"tr",align:null},"Centered Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"closable"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether a close (x) button is visible on top right of the modal dialog or not"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"closeIcon"),(0,o.kt)("td",{parentName:"tr",align:null},"custom close icon"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.22.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"confirmLoading"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to apply loading visual effect for OK button or not"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"destroyOnClose"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to unmount child components on onClose"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null},"3.1.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"footer"),(0,o.kt)("td",{parentName:"tr",align:null},"Footer content, set as ",(0,o.kt)("inlineCode",{parentName:"td"},"footer={null}")," when you don't need default buttons"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},"OK and Cancel buttons")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"forceRender"),(0,o.kt)("td",{parentName:"tr",align:null},"Force render Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null},"3.12.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"getContainer"),(0,o.kt)("td",{parentName:"tr",align:null},"Return the mount node for Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"HTMLElement"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"() => HTMLElement")),(0,o.kt)("td",{parentName:"tr",align:null},"Selectors")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"mask"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether show mask or not."),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"maskClosable"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to close the modal dialog when the mask (area outside the modal) is clicked"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"maskStyle"),(0,o.kt)("td",{parentName:"tr",align:null},"Style for modal's mask element."),(0,o.kt)("td",{parentName:"tr",align:null},"object"),(0,o.kt)("td",{parentName:"tr",align:null},"{}"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okText"),(0,o.kt)("td",{parentName:"tr",align:null},"Text of the OK button"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"OK"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okType"),(0,o.kt)("td",{parentName:"tr",align:null},"Button ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," of the OK button"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"primary")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"The ok button props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/components/button"},"ButtonProps")),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cancelButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"The cancel button props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/components/button"},"ButtonProps")),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"style"),(0,o.kt)("td",{parentName:"tr",align:null},"Style of floating layer, typically used at least for adjusting the position."),(0,o.kt)("td",{parentName:"tr",align:null},"object"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"title"),(0,o.kt)("td",{parentName:"tr",align:null},"The modal dialog's title"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},"-")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"visible"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether the modal dialog is visible or not"),(0,o.kt)("td",{parentName:"tr",align:null},"boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"false"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"width"),(0,o.kt)("td",{parentName:"tr",align:null},"Width of the modal dialog"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"520")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"wrapClassName"),(0,o.kt)("td",{parentName:"tr",align:null},"The class name of the container of the modal dialog"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zIndex"),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("inlineCode",{parentName:"td"},"z-index")," of the Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"Number"),(0,o.kt)("td",{parentName:"tr",align:null},"1000"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onCancel"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when a user clicks mask, close button on top right or Cancel button"),(0,o.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onOk"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when a user clicks the OK button"),(0,o.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("h4",{id:"note"},"Note"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"The state of Modal will be preserved at it's component lifecycle by default, if you wish to open it with a brand new state everytime, set ",(0,o.kt)("inlineCode",{parentName:"p"},"destroyOnClose")," on it.")),(0,o.kt)("h3",{id:"modalmethod"},"Modal.method()"),(0,o.kt)("p",null,"There are five ways to display the information based on the content's nature:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.info")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.success")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.error")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.warning")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.confirm"))),(0,o.kt)("p",null,"The items listed above are all functions, expecting a settings object as parameter. The properties of the object are follows:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Default"),(0,o.kt)("th",{parentName:"tr",align:null},"Version"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"autoFocusButton"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify which button to autofocus"),(0,o.kt)("td",{parentName:"tr",align:null},"null"),(0,o.kt)("td",{parentName:"tr",align:null},"string: ",(0,o.kt)("inlineCode",{parentName:"td"},"ok")," ",(0,o.kt)("inlineCode",{parentName:"td"},"cancel")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"ok"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cancelText"),(0,o.kt)("td",{parentName:"tr",align:null},"Text of the Cancel button with Modal.confirm"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Cancel")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"centered"),(0,o.kt)("td",{parentName:"tr",align:null},"Centered Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"className"),(0,o.kt)("td",{parentName:"tr",align:null},"className of container"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.1.1")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"content"),(0,o.kt)("td",{parentName:"tr",align:null},"Content"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},"-")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"icon"),(0,o.kt)("td",{parentName:"tr",align:null},"custom icon (",(0,o.kt)("inlineCode",{parentName:"td"},"Added in 3.12.0"),")"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},'<Icon type="question-circle" />'))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"iconType"),(0,o.kt)("td",{parentName:"tr",align:null},"Icon ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," of the Icon component (deprecated after ",(0,o.kt)("inlineCode",{parentName:"td"},"3.12.0"),")"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"question-circle")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"keyboard"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether support press esc to close"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null},"3.4.2")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"mask"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether show mask or not."),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null},"3.13.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"maskClosable"),(0,o.kt)("td",{parentName:"tr",align:null},"Whether to close the modal dialog when the mask (area outside the modal) is clicked"),(0,o.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"false")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okText"),(0,o.kt)("td",{parentName:"tr",align:null},"Text of the OK button"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"OK")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okType"),(0,o.kt)("td",{parentName:"tr",align:null},"Button ",(0,o.kt)("inlineCode",{parentName:"td"},"type")," of the OK button"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"primary")),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"okButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"The ok button props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/components/button"},"ButtonProps")),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"cancelButtonProps"),(0,o.kt)("td",{parentName:"tr",align:null},"The cancel button props"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"/components/button"},"ButtonProps")),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"title"),(0,o.kt)("td",{parentName:"tr",align:null},"Title"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,o.kt)("td",{parentName:"tr",align:null},"-")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"width"),(0,o.kt)("td",{parentName:"tr",align:null},"Width of the modal dialog"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"number"),(0,o.kt)("td",{parentName:"tr",align:null},"416")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"zIndex"),(0,o.kt)("td",{parentName:"tr",align:null},"The ",(0,o.kt)("inlineCode",{parentName:"td"},"z-index")," of the Modal"),(0,o.kt)("td",{parentName:"tr",align:null},"Number"),(0,o.kt)("td",{parentName:"tr",align:null},"1000"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onCancel"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when the user clicks the Cancel button. The parameter of this function is a function whose execution should include closing the dialog. You can also just return a promise and when the promise is resolved, the modal dialog will also be closed"),(0,o.kt)("td",{parentName:"tr",align:null},"function"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"onOk"),(0,o.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when the user clicks the OK button. The parameter of this function is a function whose execution should include closing the dialog. You can also just return a promise and when the promise is resolved, the modal dialog will also be closed"),(0,o.kt)("td",{parentName:"tr",align:null},"function"),(0,o.kt)("td",{parentName:"tr",align:null},"-"),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("p",null,"All the ",(0,o.kt)("inlineCode",{parentName:"p"},"Modal.method"),"s will return a reference, and then we can update and close the modal dialog by the reference."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const modal = Modal.info();\n\nmodal.update({\n  title: 'Updated title',\n  content: 'Updated content',\n});\n\nmodal.destroy();\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Modal.destroyAll"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Modal.destroyAll()")," could destroy all confirmation modal dialogs(Modal.info/Modal.success/Modal.error/Modal.warning/Modal.confirm). Usually, you can use it in router change event to destroy confirm modal dialog automatically without use modal reference to close( it's too complex to use for all modal dialogs)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { browserHistory } from 'react-router';\n\n// router change\nbrowserHistory.listen(() => {\n  Modal.destroyAll();\n});\n")))}u.isMDXComponent=!0},30876:(t,n,e)=>{e.d(n,{Zo:()=>m,kt:()=>c});var a=e(2784);function l(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function r(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){l(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function i(t,n){if(null==t)return{};var e,a,l=function(t,n){if(null==t)return{};var e,a,l={},o=Object.keys(t);for(a=0;a<o.length;a++)e=o[a],n.indexOf(e)>=0||(l[e]=t[e]);return l}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)e=o[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(l[e]=t[e])}return l}var d=a.createContext({}),s=function(t){var n=a.useContext(d),e=n;return t&&(e="function"==typeof t?t(n):r(r({},n),t)),e},m=function(t){var n=s(t.components);return a.createElement(d.Provider,{value:n},t.children)},p={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(t,n){var e=t.components,l=t.mdxType,o=t.originalType,d=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=s(e),c=l,k=u["".concat(d,".").concat(c)]||u[c]||p[c]||o;return e?a.createElement(k,r(r({ref:n},m),{},{components:e})):a.createElement(k,r({ref:n},m))}));function c(t,n){var e=arguments,l=n&&n.mdxType;if("string"==typeof t||l){var o=e.length,r=new Array(o);r[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=t,i.mdxType="string"==typeof t?t:l,r[1]=i;for(var s=2;s<o;s++)r[s]=e[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,e)}u.displayName="MDXCreateElement"}}]);