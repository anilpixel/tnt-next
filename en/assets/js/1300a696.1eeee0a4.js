"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2087],{27202:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>o,contentTitle:()=>s,metadata:()=>g,toc:()=>p,default:()=>c});var a=t(7896),l=t(31461),r=(t(2784),t(30876)),i=["components"],o={tags:["Components"],type:"Data Display",title:"Tag"},s=void 0,g={unversionedId:"components/data-display/tag",id:"components/data-display/tag",isDocsHomePage:!1,title:"Tag",description:"-------",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/tag.md",sourceDirName:"components/data-display",slug:"/components/data-display/tag",permalink:"/tnt-next/en/docs/components/data-display/tag",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/tag.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Display",title:"Tag"},sidebar:"componentsSidebar",previous:{title:"Tabs",permalink:"/tnt-next/en/docs/components/data-display/tabs"},next:{title:"Timeline",permalink:"/tnt-next/en/docs/components/data-display/timeline"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Colorful Tag",id:"colorful-tag",children:[],level:3},{value:"Add &amp; Remove Dynamically",id:"add--remove-dynamically",children:[],level:3},{value:"Checkable",id:"checkable",children:[],level:3},{value:"Hot Tags",id:"hot-tags",children:[],level:3},{value:"Controlled",id:"controlled",children:[],level:3},{value:"Animate",id:"animate",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Tag",id:"tag",children:[],level:3},{value:"Tag.CheckableTag",id:"tagcheckabletag",children:[],level:3}],level:2}],d={toc:p};function c(e){var n=e.components,t=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Tag for categorizing or markup."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It can be used to tag by dimension or property.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"When categorizing."))),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic"},"Basic"),(0,r.kt)("p",null,"Usage of basic Tag, and it could be closable by set ",(0,r.kt)("inlineCode",{parentName:"p"},"closable")," property. Closable Tag supports ",(0,r.kt)("inlineCode",{parentName:"p"},"onClose")," events."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function log(e) {\n  console.log(e);\n}\n\nfunction preventDefault(e) {\n  e.preventDefault();\n  console.log('Clicked! But prevent default.');\n}\n\nReactDOM.render(\n  <div>\n    <Tag>Tag 1</Tag>\n    <Tag>\n      <a href=\"https://github.com/ant-design/ant-design/issues/1862\">Link</a>\n    </Tag>\n    <Tag closable onClose={log}>\n      Tag 2\n    </Tag>\n    <Tag closable onClose={preventDefault}>\n      Prevent Default\n    </Tag>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"colorful-tag"},"Colorful Tag"),(0,r.kt)("p",null,"We preset a series of colorful tag styles for use in different situations. You can also set it to a hex color string for custom color."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <h4 style={{ marginBottom: 16 }}>Presets:</h4>\n    <div>\n      <Tag color="magenta">magenta</Tag>\n      <Tag color="red">red</Tag>\n      <Tag color="volcano">volcano</Tag>\n      <Tag color="orange">orange</Tag>\n      <Tag color="gold">gold</Tag>\n      <Tag color="lime">lime</Tag>\n      <Tag color="green">green</Tag>\n      <Tag color="cyan">cyan</Tag>\n      <Tag color="blue">blue</Tag>\n      <Tag color="geekblue">geekblue</Tag>\n      <Tag color="purple">purple</Tag>\n    </div>\n    <h4 style={{ margin: \'16px 0\' }}>Custom:</h4>\n    <div>\n      <Tag color="#f50">#f50</Tag>\n      <Tag color="#2db7f5">#2db7f5</Tag>\n      <Tag color="#87d068">#87d068</Tag>\n      <Tag color="#108ee9">#108ee9</Tag>\n    </div>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"add--remove-dynamically"},"Add & Remove Dynamically"),(0,r.kt)("p",null,"Generating a set of Tags by array, you can add and remove dynamically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"class EditableTagGroup extends React.Component {\n  state = {\n    tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n    console.log(tags);\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  render() {\n    const { tags, inputVisible, inputValue } = this.state;\n    return (\n      <div>\n        {tags.map((tag, index) => {\n          const isLongTag = tag.length > 20;\n          const tagElem = (\n            <Tag key={tag} closable={index !== 0} onClose={() => this.handleClose(tag)}>\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </Tag>\n          );\n          return isLongTag ? (\n            <Tooltip title={tag} key={tag}>\n              {tagElem}\n            </Tooltip>\n          ) : (\n            tagElem\n          );\n        })}\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTagGroup />, mountNode);\n")),(0,r.kt)("h3",{id:"checkable"},"Checkable"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"CheckableTag")," works like Checkbox, click it to toggle checked state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { CheckableTag } = Tag;\n\nclass MyTag extends React.Component {\n  state = { checked: true };\n\n  handleChange = checked => {\n    this.setState({ checked });\n  };\n\n  render() {\n    return (\n      <CheckableTag {...this.props} checked={this.state.checked} onChange={this.handleChange} />\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <MyTag>Tag1</MyTag>\n    <MyTag>Tag2</MyTag>\n    <MyTag>Tag3</MyTag>\n  </div>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"hot-tags"},"Hot Tags"),(0,r.kt)("p",null,"Select your favourite topics."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { CheckableTag } = Tag;\n\nconst tagsFromServer = ['Movies', 'Books', 'Music', 'Sports'];\n\nclass HotTags extends React.Component {\n  state = {\n    selectedTags: [],\n  };\n\n  handleChange(tag, checked) {\n    const { selectedTags } = this.state;\n    const nextSelectedTags = checked ? [...selectedTags, tag] : selectedTags.filter(t => t !== tag);\n    console.log('You are interested in: ', nextSelectedTags);\n    this.setState({ selectedTags: nextSelectedTags });\n  }\n\n  render() {\n    const { selectedTags } = this.state;\n    return (\n      <div>\n        <span style={{ marginRight: 8 }}>Categories:</span>\n        {tagsFromServer.map(tag => (\n          <CheckableTag\n            key={tag}\n            checked={selectedTags.indexOf(tag) > -1}\n            onChange={checked => this.handleChange(tag, checked)}\n          >\n            {tag}\n          </CheckableTag>\n        ))}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<HotTags />, mountNode);\n")),(0,r.kt)("h3",{id:"controlled"},"Controlled"),(0,r.kt)("p",null,"By using the ",(0,r.kt)("inlineCode",{parentName:"p"},"visible")," prop, you can control the close state of Tag."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class Demo extends React.Component {\n  state = {\n    visible: true,\n  };\n\n  render() {\n    return (\n      <div>\n        <Tag\n          closable\n          visible={this.state.visible}\n          onClose={() => this.setState({ visible: false })}\n        >\n          Movies\n        </Tag>\n        <br />\n        <Button size="small" onClick={() => this.setState({ visible: !this.state.visible })}>\n          Toggle\n        </Button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h3",{id:"animate"},"Animate"),(0,r.kt)("p",null,"Animating the Tag by using ","[","rc-tween-one]","(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/react-component/tween-one"},"https://github.com/react-component/tween-one"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nclass EditableTagGroup extends React.Component {\n  state = {\n    tags: ['Tag 1', 'Tag 2', 'Tag 3'],\n    inputVisible: false,\n    inputValue: '',\n  };\n\n  handleClose = removedTag => {\n    const tags = this.state.tags.filter(tag => tag !== removedTag);\n    console.log(tags);\n    this.setState({ tags });\n  };\n\n  showInput = () => {\n    this.setState({ inputVisible: true }, () => this.input.focus());\n  };\n\n  handleInputChange = e => {\n    this.setState({ inputValue: e.target.value });\n  };\n\n  handleInputConfirm = () => {\n    const { inputValue } = this.state;\n    let { tags } = this.state;\n    if (inputValue && tags.indexOf(inputValue) === -1) {\n      tags = [...tags, inputValue];\n    }\n    console.log(tags);\n    this.setState({\n      tags,\n      inputVisible: false,\n      inputValue: '',\n    });\n  };\n\n  saveInputRef = input => (this.input = input);\n\n  forMap = tag => {\n    const tagElem = (\n      <Tag\n        closable\n        onClose={e => {\n          e.preventDefault();\n          this.handleClose(tag);\n        }}\n      >\n        {tag}\n      </Tag>\n    );\n    return (\n      <span key={tag} style={{ display: 'inline-block' }}>\n        {tagElem}\n      </span>\n    );\n  };\n\n  render() {\n    const { tags, inputVisible, inputValue } = this.state;\n    const tagChild = tags.map(this.forMap);\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <TweenOneGroup\n            enter={{\n              scale: 0.8,\n              opacity: 0,\n              type: 'from',\n              duration: 100,\n              onComplete: e => {\n                e.target.style = '';\n              },\n            }}\n            leave={{ opacity: 0, width: 0, scale: 0, duration: 200 }}\n            appear={false}\n          >\n            {tagChild}\n          </TweenOneGroup>\n        </div>\n        {inputVisible && (\n          <Input\n            ref={this.saveInputRef}\n            type=\"text\"\n            size=\"small\"\n            style={{ width: 78 }}\n            value={inputValue}\n            onChange={this.handleInputChange}\n            onBlur={this.handleInputConfirm}\n            onPressEnter={this.handleInputConfirm}\n          />\n        )}\n        {!inputVisible && (\n          <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n            <Icon type=\"plus\" /> New Tag\n          </Tag>\n        )}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTagGroup />, mountNode);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"tag"},"Tag"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"afterClose"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when close animation is completed, please use ",(0,r.kt)("inlineCode",{parentName:"td"},"onClose"),", we will remove this in the next version"),(0,r.kt)("td",{parentName:"tr",align:null},"() => void"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"closable"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the Tag can be closed"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"color"),(0,r.kt)("td",{parentName:"tr",align:null},"Color of the Tag"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onClose"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when tag is closed"),(0,r.kt)("td",{parentName:"tr",align:null},"(e) => void"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"visible"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the Tag is closed or not"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"3.7.0")))),(0,r.kt)("h3",{id:"tagcheckabletag"},"Tag.CheckableTag"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"checked"),(0,r.kt)("td",{parentName:"tr",align:null},"Checked status of Tag"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when Tag is checked/unchecked"),(0,r.kt)("td",{parentName:"tr",align:null},"(checked) => void"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))))}c.isMDXComponent=!0},30876:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var a=t(2784);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var s=a.createContext({}),g=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=g(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=g(t),u=l,m=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return t?a.createElement(m,i(i({ref:n},p),{},{components:t})):a.createElement(m,i({ref:n},p))}));function u(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,i=new Array(r);i[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var g=2;g<r;g++)i[g]=t[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);