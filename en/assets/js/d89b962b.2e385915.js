"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3834],{70717:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>u,contentTitle:()=>o,metadata:()=>p,toc:()=>d,default:()=>s});var a=n(7896),r=n(31461),l=(n(2784),n(30876)),i=["components"],u={tags:["Components"],type:"Data Entry",title:"InputNumber"},o=void 0,p={unversionedId:"components/data-entry/input-number",id:"components/data-entry/input-number",isDocsHomePage:!1,title:"InputNumber",description:"------",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/input-number.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/input-number",permalink:"/tnt-next/en/docs/components/data-entry/input-number",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/input-number.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"InputNumber"},sidebar:"componentsSidebar",previous:{title:"Form",permalink:"/tnt-next/en/docs/components/data-entry/form"},next:{title:"Input",permalink:"/tnt-next/en/docs/components/data-entry/input"}},d=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Sizes",id:"sizes",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Decimals",id:"decimals",children:[],level:3},{value:"Formatter",id:"formatter",children:[],level:3}],level:2},{value:"API",id:"api",children:[],level:2},{value:"Methods",id:"methods",children:[],level:2}],m={toc:d};function s(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Enter a number within certain range with the mouse or keyboard."),(0,l.kt)("h2",{id:"when-to-use"},"When To Use"),(0,l.kt)("p",null,"When a numeric value needs to be provided."),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"basic"},"Basic"),(0,l.kt)("p",null,"Numeric-only input box."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(<InputNumber min={1} max={10} defaultValue={3} onChange={onChange} />, mountNode);\n")),(0,l.kt)("h3",{id:"sizes"},"Sizes"),(0,l.kt)("p",null,"There are three sizes available to a numeric input box. By default, the size is ",(0,l.kt)("inlineCode",{parentName:"p"},"32px"),". The two additional sizes are ",(0,l.kt)("inlineCode",{parentName:"p"},"large")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"small")," which means ",(0,l.kt)("inlineCode",{parentName:"p"},"40px")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"24px"),", respectively."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function onChange(value) {\n  console.log(\'changed\', value);\n}\n\nReactDOM.render(\n  <div>\n    <InputNumber size="large" min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber min={1} max={100000} defaultValue={3} onChange={onChange} />\n    <InputNumber size="small" min={1} max={100000} defaultValue={3} onChange={onChange} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"Click the button to toggle between available and disabled states."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = {\n    disabled: true,\n  };\n\n  toggle = () => {\n    this.setState({\n      disabled: !this.state.disabled,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <InputNumber min={1} max={10} disabled={this.state.disabled} defaultValue={3} />\n        <div style={{ marginTop: 20 }}>\n          <Button onClick={this.toggle} type="primary">\n            Toggle disabled\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,l.kt)("h3",{id:"decimals"},"Decimals"),(0,l.kt)("p",null,"A numeric-only input box whose values can be increased or decreased using a decimal step. The number of decimals (also known as precision) is determined by the step prop."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(<InputNumber min={0} max={10} step={0.1} onChange={onChange} />, mountNode);\n")),(0,l.kt)("h3",{id:"formatter"},"Formatter"),(0,l.kt)("p",null,"Display value within it's situation with ",(0,l.kt)("inlineCode",{parentName:"p"},"formatter"),", and we usually use ",(0,l.kt)("inlineCode",{parentName:"p"},"parser")," at the same time."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function onChange(value) {\n  console.log('changed', value);\n}\n\nReactDOM.render(\n  <div>\n    <InputNumber\n      defaultValue={1000}\n      formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n      parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n      onChange={onChange}\n    />\n    <InputNumber\n      defaultValue={100}\n      min={0}\n      max={100}\n      formatter={value => `${value}%`}\n      parser={value => value.replace('%', '')}\n      onChange={onChange}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,l.kt)("td",{parentName:"tr",align:null},"get focus when component mounted"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"initial value"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabled"),(0,l.kt)("td",{parentName:"tr",align:null},"disable the input"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"formatter"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the format of the value presented"),(0,l.kt)("td",{parentName:"tr",align:null},"function(value: number"),(0,l.kt)("td",{parentName:"tr",align:null},"string): string"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max"),(0,l.kt)("td",{parentName:"tr",align:null},"max value"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"Infinity"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min"),(0,l.kt)("td",{parentName:"tr",align:null},"min value"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-Infinity"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"parser"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the value extracted from formatter"),(0,l.kt)("td",{parentName:"tr",align:null},"function( string): number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"precision"),(0,l.kt)("td",{parentName:"tr",align:null},"precision of input value"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"decimalSeparator"),(0,l.kt)("td",{parentName:"tr",align:null},"decimal separator"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"size"),(0,l.kt)("td",{parentName:"tr",align:null},"height of input box"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"step"),(0,l.kt)("td",{parentName:"tr",align:null},"The number to which the current value is increased or decreased. It can be an integer or decimal."),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"current value"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"The callback triggered when the value is changed."),(0,l.kt)("td",{parentName:"tr",align:null},"function(value: number"),(0,l.kt)("td",{parentName:"tr",align:null},"string)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onPressEnter"),(0,l.kt)("td",{parentName:"tr",align:null},"The callback function that is triggered when Enter key is pressed."),(0,l.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"blur()"),(0,l.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"focus()"),(0,l.kt)("td",{parentName:"tr",align:null},"get focus"),(0,l.kt)("td",{parentName:"tr",align:null})))))}s.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,d=u(e,["components","mdxType","originalType","parentName"]),s=p(n),c=r,g=s["".concat(o,".").concat(c)]||s[c]||m[c]||l;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:r,i[1]=u;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);