"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1966],{94886:(n,e,t)=>{t.r(e),t.d(e,{frontMatter:()=>i,contentTitle:()=>s,metadata:()=>d,toc:()=>p,default:()=>c});var a=t(7896),r=t(31461),l=(t(2784),t(30876)),o=["components"],i={tags:["Components"],type:"Data Display",title:"Tabs",cols:1},s=void 0,d={unversionedId:"components/data-display/tabs",id:"components/data-display/tabs",isDocsHomePage:!1,title:"Tabs",description:"----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/tabs.md",sourceDirName:"components/data-display",slug:"/components/data-display/tabs",permalink:"/tnt-next/en/docs/components/data-display/tabs",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/tabs.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Display",title:"Tabs",cols:1},sidebar:"componentsSidebar",previous:{title:"Table",permalink:"/tnt-next/en/docs/components/data-display/table"},next:{title:"Tag",permalink:"/tnt-next/en/docs/components/data-display/tag"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:3},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Icon",id:"icon",children:[],level:3},{value:"Slide",id:"slide",children:[],level:3},{value:"Extra content",id:"extra-content",children:[],level:3},{value:"Size",id:"size",children:[],level:3},{value:"Position",id:"position",children:[],level:3},{value:"Card type tab",id:"card-type-tab",children:[],level:3},{value:"Add &amp; close tab",id:"add--close-tab",children:[],level:3},{value:"Container of card type Tab",id:"container-of-card-type-tab",children:[],level:3},{value:"Customized trigger of new tab",id:"customized-trigger-of-new-tab",children:[],level:3},{value:"Customized bar of tab",id:"customized-bar-of-tab",children:[],level:3},{value:"Draggable Tabs",id:"draggable-tabs",children:[],level:3},{value:"Nest",id:"nest",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Tabs",id:"tabs",children:[],level:3},{value:"Tabs.TabPane",id:"tabstabpane",children:[],level:3}],level:2}],b={toc:p};function c(n){var e=n.components,t=(0,r.Z)(n,o);return(0,l.kt)("wrapper",(0,a.Z)({},b,t,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Tabs make it easy to switch between different views."),(0,l.kt)("h3",{id:"when-to-use"},"When To Use"),(0,l.kt)("p",null,"Ant Design has 3 types of Tabs for different situations."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Card Tabs: for managing too many closeable views."),(0,l.kt)("li",{parentName:"ul"},"Normal Tabs: for functional aspects of a page."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/components/radio/#components-radio-demo-radiobutton"},"RadioButton"),": for secondary tabs.")),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"basic"},"Basic"),(0,l.kt)("p",null,"Default activate first tab."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tabs defaultActiveKey="1" onChange={callback}>\n    <TabPane tab="Tab 1" key="1">\n      Content of Tab Pane 1\n    </TabPane>\n    <TabPane tab="Tab 2" key="2">\n      Content of Tab Pane 2\n    </TabPane>\n    <TabPane tab="Tab 3" key="3">\n      Content of Tab Pane 3\n    </TabPane>\n  </Tabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"Disabled a tab."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nReactDOM.render(\n  <Tabs defaultActiveKey="1">\n    <TabPane tab="Tab 1" key="1">\n      Tab 1\n    </TabPane>\n    <TabPane tab="Tab 2" disabled key="2">\n      Tab 2\n    </TabPane>\n    <TabPane tab="Tab 3" key="3">\n      Tab 3\n    </TabPane>\n  </Tabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"icon"},"Icon"),(0,l.kt)("p",null,"The Tab with Icon."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nReactDOM.render(\n  <Tabs defaultActiveKey="2">\n    <TabPane\n      tab={\n        <span>\n          <Icon type="apple" />\n          Tab 1\n        </span>\n      }\n      key="1"\n    >\n      Tab 1\n    </TabPane>\n    <TabPane\n      tab={\n        <span>\n          <Icon type="android" />\n          Tab 2\n        </span>\n      }\n      key="2"\n    >\n      Tab 2\n    </TabPane>\n  </Tabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"slide"},"Slide"),(0,l.kt)("p",null,"In order to fit in more tabs, they can slide left and right (or up and down)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nclass SlidingTabsDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: \'top\',\n    };\n  }\n\n  handleModeChange = e => {\n    const mode = e.target.value;\n    this.setState({ mode });\n  };\n\n  render() {\n    const { mode } = this.state;\n    return (\n      <div>\n        <Radio.Group onChange={this.handleModeChange} value={mode} style={{ marginBottom: 8 }}>\n          <Radio.Button value="top">Horizontal</Radio.Button>\n          <Radio.Button value="left">Vertical</Radio.Button>\n        </Radio.Group>\n        <Tabs defaultActiveKey="1" tabPosition={mode} style={{ height: 220 }}>\n          {[...Array(30).keys()].map(i => (\n            <TabPane tab={`Tab-${i}`} key={i}>\n              Content of tab {i}\n            </TabPane>\n          ))}\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SlidingTabsDemo />, mountNode);\n')),(0,l.kt)("h3",{id:"extra-content"},"Extra content"),(0,l.kt)("p",null,"You can add extra actions to the right of Tabs."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nconst operations = <Button>Extra Action</Button>;\n\nReactDOM.render(\n  <Tabs tabBarExtraContent={operations}>\n    <TabPane tab="Tab 1" key="1">\n      Content of tab 1\n    </TabPane>\n    <TabPane tab="Tab 2" key="2">\n      Content of tab 2\n    </TabPane>\n    <TabPane tab="Tab 3" key="3">\n      Content of tab 3\n    </TabPane>\n  </Tabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"size"},"Size"),(0,l.kt)("p",null,"Large size tabs are usually used in page header, and small size could be used in Modal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nclass Demo extends React.Component {\n  state = { size: \'small\' };\n\n  onChange = e => {\n    this.setState({ size: e.target.value });\n  };\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.onChange} style={{ marginBottom: 16 }}>\n          <Radio.Button value="small">Small</Radio.Button>\n          <Radio.Button value="default">Default</Radio.Button>\n          <Radio.Button value="large">Large</Radio.Button>\n        </Radio.Group>\n        <Tabs defaultActiveKey="1" size={size}>\n          <TabPane tab="Tab 1" key="1">\n            Content of tab 1\n          </TabPane>\n          <TabPane tab="Tab 2" key="2">\n            Content of tab 2\n          </TabPane>\n          <TabPane tab="Tab 3" key="3">\n            Content of tab 3\n          </TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,l.kt)("h3",{id:"position"},"Position"),(0,l.kt)("p",null,"Tab's position: left, right, top or bottom."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\nconst { Option } = Select;\n\nclass Demo extends React.Component {\n  state = {\n    tabPosition: \'top\',\n  };\n\n  changeTabPosition = tabPosition => {\n    this.setState({ tabPosition });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          Tab position\uff1a\n          <Select\n            value={this.state.tabPosition}\n            onChange={this.changeTabPosition}\n            dropdownMatchSelectWidth={false}\n          >\n            <Option value="top">top</Option>\n            <Option value="bottom">bottom</Option>\n            <Option value="left">left</Option>\n            <Option value="right">right</Option>\n          </Select>\n        </div>\n        <Tabs tabPosition={this.state.tabPosition}>\n          <TabPane tab="Tab 1" key="1">\n            Content of Tab 1\n          </TabPane>\n          <TabPane tab="Tab 2" key="2">\n            Content of Tab 2\n          </TabPane>\n          <TabPane tab="Tab 3" key="3">\n            Content of Tab 3\n          </TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,l.kt)("h3",{id:"card-type-tab"},"Card type tab"),(0,l.kt)("p",null,"Another type of Tabs, which doesn't support vertical mode."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nReactDOM.render(\n  <Tabs onChange={callback} type="card">\n    <TabPane tab="Tab 1" key="1">\n      Content of Tab Pane 1\n    </TabPane>\n    <TabPane tab="Tab 2" key="2">\n      Content of Tab Pane 2\n    </TabPane>\n    <TabPane tab="Tab 3" key="3">\n      Content of Tab Pane 3\n    </TabPane>\n  </Tabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"add--close-tab"},"Add & close tab"),(0,l.kt)("p",null,"Only card type Tabs support adding & closable. +Use ",(0,l.kt)("inlineCode",{parentName:"p"},"closable={false}")," to disable close."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TabPane } = Tabs;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab 1', key: '1' },\n      { title: 'Tab 2', content: 'Content of Tab 2', key: '2' },\n      {\n        title: 'Tab 3',\n        content: 'Content of Tab 3',\n        key: '3',\n        closable: false,\n      },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = activeKey => {\n    this.setState({ activeKey });\n  };\n\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  };\n\n  add = () => {\n    const { panes } = this.state;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'Content of new Tab', key: activeKey });\n    this.setState({ panes, activeKey });\n  };\n\n  remove = targetKey => {\n    let { activeKey } = this.state;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (panes.length && activeKey === targetKey) {\n      if (lastIndex >= 0) {\n        activeKey = panes[lastIndex].key;\n      } else {\n        activeKey = panes[0].key;\n      }\n    }\n    this.setState({ panes, activeKey });\n  };\n\n  render() {\n    return (\n      <Tabs\n        onChange={this.onChange}\n        activeKey={this.state.activeKey}\n        type=\"editable-card\"\n        onEdit={this.onEdit}\n      >\n        {this.state.panes.map(pane => (\n          <TabPane tab={pane.title} key={pane.key} closable={pane.closable}>\n            {pane.content}\n          </TabPane>\n        ))}\n      </Tabs>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,l.kt)("h3",{id:"container-of-card-type-tab"},"Container of card type Tab"),(0,l.kt)("p",null,"Should be used at the top of container, needs to override styles."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\n\nReactDOM.render(\n  <div className="card-container">\n    <Tabs type="card">\n      <TabPane tab="Tab Title 1" key="1">\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n        <p>Content of Tab Pane 1</p>\n      </TabPane>\n      <TabPane tab="Tab Title 2" key="2">\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n        <p>Content of Tab Pane 2</p>\n      </TabPane>\n      <TabPane tab="Tab Title 3" key="3">\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n        <p>Content of Tab Pane 3</p>\n      </TabPane>\n    </Tabs>\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"customized-trigger-of-new-tab"},"Customized trigger of new tab"),(0,l.kt)("p",null,"Hide default plus icon, and bind event for customized trigger."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { TabPane } = Tabs;\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.newTabIndex = 0;\n    const panes = [\n      { title: 'Tab 1', content: 'Content of Tab Pane 1', key: '1' },\n      { title: 'Tab 2', content: 'Content of Tab Pane 2', key: '2' },\n    ];\n    this.state = {\n      activeKey: panes[0].key,\n      panes,\n    };\n  }\n\n  onChange = activeKey => {\n    this.setState({ activeKey });\n  };\n\n  onEdit = (targetKey, action) => {\n    this[action](targetKey);\n  };\n\n  add = () => {\n    const { panes } = this.state;\n    const activeKey = `newTab${this.newTabIndex++}`;\n    panes.push({ title: 'New Tab', content: 'New Tab Pane', key: activeKey });\n    this.setState({ panes, activeKey });\n  };\n\n  remove = targetKey => {\n    let { activeKey } = this.state;\n    let lastIndex;\n    this.state.panes.forEach((pane, i) => {\n      if (pane.key === targetKey) {\n        lastIndex = i - 1;\n      }\n    });\n    const panes = this.state.panes.filter(pane => pane.key !== targetKey);\n    if (panes.length && activeKey === targetKey) {\n      if (lastIndex >= 0) {\n        activeKey = panes[lastIndex].key;\n      } else {\n        activeKey = panes[0].key;\n      }\n    }\n    this.setState({ panes, activeKey });\n  };\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button onClick={this.add}>ADD</Button>\n        </div>\n        <Tabs\n          hideAdd\n          onChange={this.onChange}\n          activeKey={this.state.activeKey}\n          type=\"editable-card\"\n          onEdit={this.onEdit}\n        >\n          {this.state.panes.map(pane => (\n            <TabPane tab={pane.title} key={pane.key}>\n              {pane.content}\n            </TabPane>\n          ))}\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,l.kt)("h3",{id:"customized-bar-of-tab"},"Customized bar of tab"),(0,l.kt)("p",null,"Use react-sticky."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'\nconst { TabPane } = Tabs;\n\nconst renderTabBar = (props, DefaultTabBar) => (\n  <Sticky bottomOffset={80}>\n    {({ style }) => (\n      <DefaultTabBar {...props} style={{ ...style, zIndex: 1, background: \'#fff\' }} />\n    )}\n  </Sticky>\n);\n\nReactDOM.render(\n  <StickyContainer>\n    <Tabs defaultActiveKey="1" renderTabBar={renderTabBar}>\n      <TabPane tab="Tab 1" key="1" style={{ height: 200 }}>\n        Content of Tab Pane 1\n      </TabPane>\n      <TabPane tab="Tab 2" key="2">\n        Content of Tab Pane 2\n      </TabPane>\n      <TabPane tab="Tab 3" key="3">\n        Content of Tab Pane 3\n      </TabPane>\n    </Tabs>\n  </StickyContainer>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"draggable-tabs"},"Draggable Tabs"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"react-dnd")," to make tabs draggable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'\nimport { DndProvider, DragSource, DropTarget } from \'react-dnd\';\nconst { TabPane } = Tabs;\n\n// Drag & Drop node\nclass TabNode extends React.Component {\n  render() {\n    const { connectDragSource, connectDropTarget, children } = this.props;\n\n    return connectDragSource(connectDropTarget(children));\n  }\n}\n\nconst cardTarget = {\n  drop(props, monitor) {\n    const dragKey = monitor.getItem().index;\n    const hoverKey = props.index;\n\n    if (dragKey === hoverKey) {\n      return;\n    }\n\n    props.moveTabNode(dragKey, hoverKey);\n    monitor.getItem().index = hoverKey;\n  },\n};\n\nconst cardSource = {\n  beginDrag(props) {\n    return {\n      id: props.id,\n      index: props.index,\n    };\n  },\n};\n\nconst WrapTabNode = DropTarget(\'DND_NODE\', cardTarget, connect => ({\n  connectDropTarget: connect.dropTarget(),\n}))(\n  DragSource(\'DND_NODE\', cardSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    isDragging: monitor.isDragging(),\n  }))(TabNode),\n);\n\nclass DraggableTabs extends React.Component {\n  state = {\n    order: [],\n  };\n\n  moveTabNode = (dragKey, hoverKey) => {\n    const newOrder = this.state.order.slice();\n    const { children } = this.props;\n\n    React.Children.forEach(children, c => {\n      if (newOrder.indexOf(c.key) === -1) {\n        newOrder.push(c.key);\n      }\n    });\n\n    const dragIndex = newOrder.indexOf(dragKey);\n    const hoverIndex = newOrder.indexOf(hoverKey);\n\n    newOrder.splice(dragIndex, 1);\n    newOrder.splice(hoverIndex, 0, dragKey);\n\n    this.setState({\n      order: newOrder,\n    });\n  };\n\n  renderTabBar = (props, DefaultTabBar) => (\n    <DefaultTabBar {...props}>\n      {node => (\n        <WrapTabNode key={node.key} index={node.key} moveTabNode={this.moveTabNode}>\n          {node}\n        </WrapTabNode>\n      )}\n    </DefaultTabBar>\n  );\n\n  render() {\n    const { order } = this.state;\n    const { children } = this.props;\n\n    const tabs = [];\n    React.Children.forEach(children, c => {\n      tabs.push(c);\n    });\n\n    const orderTabs = tabs.slice().sort((a, b) => {\n      const orderA = order.indexOf(a.key);\n      const orderB = order.indexOf(b.key);\n\n      if (orderA !== -1 && orderB !== -1) {\n        return orderA - orderB;\n      }\n      if (orderA !== -1) {\n        return -1;\n      }\n      if (orderB !== -1) {\n        return 1;\n      }\n\n      const ia = tabs.indexOf(a);\n      const ib = tabs.indexOf(b);\n\n      return ia - ib;\n    });\n\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <Tabs renderTabBar={this.renderTabBar} {...this.props}>\n          {orderTabs}\n        </Tabs>\n      </DndProvider>\n    );\n  }\n}\n\nReactDOM.render(\n  <DraggableTabs>\n    <TabPane tab="tab 1" key="1">\n      Content of Tab Pane 1\n    </TabPane>\n    <TabPane tab="tab 2" key="2">\n      Content of Tab Pane 2\n    </TabPane>\n    <TabPane tab="tab 3" key="3">\n      Content of Tab Pane 3\n    </TabPane>\n  </DraggableTabs>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"nest"},"Nest"),(0,l.kt)("p",null,"Default activate first tab."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { TabPane } = Tabs;\nconst { Option } = Select;\n\nconst positionList = [\'left\', \'right\', \'top\', \'bottom\'];\n\nconst list = new Array(20).fill().map((_, index) => index);\n\nclass Demo extends React.Component {\n  state = {\n    parentPos: undefined,\n    childPos: undefined,\n    parentType: undefined,\n    childType: undefined,\n  };\n\n  render() {\n    const { parentPos, childPos, parentType, childType } = this.state;\n\n    return (\n      <div>\n        <Select\n          style={{ width: 200 }}\n          onChange={val => {\n            this.setState({ parentPos: val });\n          }}\n        >\n          {positionList.map(pos => (\n            <Option key={pos} value={pos}>\n              Parent - {pos}\n            </Option>\n          ))}\n        </Select>\n\n        <Select\n          style={{ width: 200 }}\n          onChange={val => {\n            this.setState({ childPos: val });\n          }}\n        >\n          {positionList.map(pos => (\n            <Option key={pos} value={pos}>\n              Child - {pos}\n            </Option>\n          ))}\n        </Select>\n\n        <Select\n          style={{ width: 200 }}\n          onChange={val => {\n            this.setState({ parentType: val });\n          }}\n        >\n          <Option value="line">Parent - line</Option>\n          <Option value="card">Parent - card</Option>\n        </Select>\n\n        <Select\n          style={{ width: 200 }}\n          onChange={val => {\n            this.setState({ childType: val });\n          }}\n        >\n          <Option value="line">Child - line</Option>\n          <Option value="card">Child - card</Option>\n        </Select>\n\n        <Tabs defaultActiveKey="1" tabPosition={parentPos} type={parentType}>\n          <TabPane tab="Tab 1" key="1">\n            <Tabs\n              defaultActiveKey="1"\n              tabPosition={childPos}\n              type={childType}\n              style={{ height: 300 }}\n            >\n              {list.map(key => (\n                <TabPane tab={`Tab ${key}`} key={key}>\n                  TTTT {key}\n                </TabPane>\n              ))}\n            </Tabs>\n          </TabPane>\n          <TabPane tab="Tab 2" key="2">\n            Content of Tab Pane 2\n          </TabPane>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"tabs"},"Tabs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Current TabPane's key"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"animated"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to change tabs with animation. Only works while ",(0,l.kt)("inlineCode",{parentName:"td"},'tabPosition="top"\\|"bottom"')),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"{inkBar:boolean, tabPane:boolean}"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true"),", ",(0,l.kt)("inlineCode",{parentName:"td"},"false")," when ",(0,l.kt)("inlineCode",{parentName:"td"},'type="card"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderTabBar"),(0,l.kt)("td",{parentName:"tr",align:null},"replace the TabBar"),(0,l.kt)("td",{parentName:"tr",align:null},"(props: DefaultTabBarProps, DefaultTabBar: React.ComponentClass) => React.ReactElement"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultActiveKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Initial active TabPane's key, if ",(0,l.kt)("inlineCode",{parentName:"td"},"activeKey")," is not set."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hideAdd"),(0,l.kt)("td",{parentName:"tr",align:null},"Hide plus icon or not. Only works while ",(0,l.kt)("inlineCode",{parentName:"td"},'type="editable-card"')),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"size"),(0,l.kt)("td",{parentName:"tr",align:null},"preset tab bar size"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"large")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"small"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabBarExtraContent"),(0,l.kt)("td",{parentName:"tr",align:null},"Extra content in tab bar"),(0,l.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabBarGutter"),(0,l.kt)("td",{parentName:"tr",align:null},"The gap between tabs"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.2.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabBarStyle"),(0,l.kt)("td",{parentName:"tr",align:null},"Tab bar style object"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabPosition"),(0,l.kt)("td",{parentName:"tr",align:null},"Position of tabs"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"top")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"right")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"bottom"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"Basic style of tabs"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"line")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"card")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"editable-card"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback executed when active tab is changed"),(0,l.kt)("td",{parentName:"tr",align:null},"Function(activeKey) {}"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onEdit"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback executed when tab is added or removed. Only works while ",(0,l.kt)("inlineCode",{parentName:"td"},'type="editable-card"')),(0,l.kt)("td",{parentName:"tr",align:null},"(targetKey, action): void"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onNextClick"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback executed when next button is clicked"),(0,l.kt)("td",{parentName:"tr",align:null},"Function"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onPrevClick"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback executed when prev button is clicked"),(0,l.kt)("td",{parentName:"tr",align:null},"Function"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onTabClick"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback executed when tab is clicked"),(0,l.kt)("td",{parentName:"tr",align:null},"Function(key: string, event: MouseEvent)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"More option at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-component/tabs#tabs"},"rc-tabs option")),(0,l.kt)("h3",{id:"tabstabpane"},"Tabs.TabPane"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"forceRender"),(0,l.kt)("td",{parentName:"tr",align:null},"Forced render of content in tabs, not lazy render after clicking on tabs"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"key"),(0,l.kt)("td",{parentName:"tr",align:null},"TabPane's key"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tab"),(0,l.kt)("td",{parentName:"tr",align:null},"Show text in TabPane's head"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)("p",null,"More option at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-component/tabs#tabpane"},"rc-tabs option")))}c.isMDXComponent=!0},30876:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>u});var a=t(2784);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},l=Object.keys(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(a=0;a<l.length;a++)t=l[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var s=a.createContext({}),d=function(n){var e=a.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},p=function(n){var e=d(n.components);return a.createElement(s.Provider,{value:e},n.children)},b={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,l=n.originalType,s=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),c=d(t),u=r,m=c["".concat(s,".").concat(u)]||c[u]||b[u]||l;return t?a.createElement(m,o(o({ref:e},p),{},{components:t})):a.createElement(m,o({ref:e},p))}));function u(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var l=t.length,o=new Array(l);o[0]=c;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=n,i.mdxType="string"==typeof n?n:r,o[1]=i;for(var d=2;d<l;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"}}]);