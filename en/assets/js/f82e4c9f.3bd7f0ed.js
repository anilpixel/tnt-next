"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6988],{72365:(t,e,n)=>{n.r(e),n.d(e,{frontMatter:()=>d,contentTitle:()=>o,metadata:()=>p,toc:()=>c,default:()=>m});var a=n(7896),r=n(31461),l=(n(2784),n(30876)),i=["components"],d={tags:["Components"],type:"Data Display",title:"Card",cols:1},o=void 0,p={unversionedId:"components/data-display/card",id:"components/data-display/card",isDocsHomePage:!1,title:"Card",description:"----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/card.md",sourceDirName:"components/data-display",slug:"/components/data-display/card",permalink:"/tnt-next/en/docs/components/data-display/card",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/card.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Display",title:"Card",cols:1},sidebar:"componentsSidebar",previous:{title:"Calendar",permalink:"/tnt-next/en/docs/components/data-display/calendar"},next:{title:"Carousel",permalink:"/tnt-next/en/docs/components/data-display/carousel"}},c=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic card",id:"basic-card",children:[],level:3},{value:"No border",id:"no-border",children:[],level:3},{value:"Simple card",id:"simple-card",children:[],level:3},{value:"Customized content",id:"customized-content",children:[],level:3},{value:"Card in column",id:"card-in-column",children:[],level:3},{value:"Loading card",id:"loading-card",children:[],level:3},{value:"Grid card",id:"grid-card",children:[],level:3},{value:"Inner card",id:"inner-card",children:[],level:3},{value:"With tabs",id:"with-tabs",children:[],level:3},{value:"Support more content configuration",id:"support-more-content-configuration",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Card",id:"card",children:[],level:3},{value:"Card.Grid",id:"cardgrid",children:[],level:3},{value:"Card.Meta",id:"cardmeta",children:[],level:3}],level:2}],s={toc:c};function m(t){var e=t.components,n=(0,r.Z)(t,i);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Simple rectangular container."),(0,l.kt)("h2",{id:"when-to-use"},"When To Use"),(0,l.kt)("p",null,"A card can be used to display content related to a single subject. The content can consist of multiple elements of varying types and sizes."),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"basic-card"},"Basic card"),(0,l.kt)("p",null,"A basic card containing a title, content and an extra corner content. Supports two sizes: ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"small"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Card title="Default size card" extra={<a href="#">More</a>} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n    <Card size="small" title="Small size card" extra={<a href="#">More</a>} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"no-border"},"No border"),(0,l.kt)("p",null,"A borderless card on a gray background."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"ReactDOM.render(\n  <div style={{ background: '#ECECEC', padding: '30px' }}>\n    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n      <p>Card content</p>\n      <p>Card content</p>\n      <p>Card content</p>\n    </Card>\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"simple-card"},"Simple card"),(0,l.kt)("p",null,"A simple card only containing a content area."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"ReactDOM.render(\n  <Card style={{ width: 300 }}>\n    <p>Card content</p>\n    <p>Card content</p>\n    <p>Card content</p>\n  </Card>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"customized-content"},"Customized content"),(0,l.kt)("p",null,"You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"Card.Meta")," to support more flexible content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Meta } = Card;\n\nReactDOM.render(\n  <Card\n    hoverable\n    style={{ width: 240 }}\n    cover={<img alt="example" src="https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png" />}\n  >\n    <Meta title="Europe Street beat" description="www.instagram.com" />\n  </Card>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"card-in-column"},"Card in column"),(0,l.kt)("p",null,"Cards usually cooperate with grid column layout in overview page."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div style={{ background: \'#ECECEC\', padding: \'30px\' }}>\n    <Row gutter={16}>\n      <Col span={8}>\n        <Card title="Card title" bordered={false}>\n          Card content\n        </Card>\n      </Col>\n      <Col span={8}>\n        <Card title="Card title" bordered={false}>\n          Card content\n        </Card>\n      </Col>\n      <Col span={8}>\n        <Card title="Card title" bordered={false}>\n          Card content\n        </Card>\n      </Col>\n    </Row>\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"loading-card"},"Loading card"),(0,l.kt)("p",null,"Shows a loading indicator while the contents of the card is being fetched."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Meta } = Card;\n\nclass App extends React.Component {\n  state = {\n    loading: true,\n  };\n\n  onChange = checked => {\n    this.setState({ loading: !checked });\n  };\n\n  render() {\n    const { loading } = this.state;\n\n    return (\n      <div>\n        <Switch checked={!loading} onChange={this.onChange} />\n\n        <Card style={{ width: 300, marginTop: 16 }} loading={loading}>\n          <Meta\n            avatar={\n              <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />\n            }\n            title="Card title"\n            description="This is the description"\n          />\n        </Card>\n\n        <Card\n          style={{ width: 300, marginTop: 16 }}\n          actions={[\n            <Icon type="setting" key="setting" />,\n            <Icon type="edit" key="edit" />,\n            <Icon type="ellipsis" key="ellipsis" />,\n          ]}\n        >\n          <Skeleton loading={loading} avatar active>\n            <Meta\n              avatar={\n                <Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />\n              }\n              title="Card title"\n              description="This is the description"\n            />\n          </Skeleton>\n        </Card>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,l.kt)("h3",{id:"grid-card"},"Grid card"),(0,l.kt)("p",null,"Grid style card content."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n};\n\nReactDOM.render(\n  <Card title=\"Card Title\">\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n    <Card.Grid hoverable={false} style={gridStyle}>\n      Content\n    </Card.Grid>\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n    <Card.Grid style={gridStyle}>Content</Card.Grid>\n  </Card>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"inner-card"},"Inner card"),(0,l.kt)("p",null,"It can be placed inside the ordinary card to display the information of the multilevel structure."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <Card title="Card title">\n    <p\n      style={{\n        fontSize: 14,\n        color: \'rgba(0, 0, 0, 0.85)\',\n        marginBottom: 16,\n        fontWeight: 500,\n      }}\n    >\n      Group title\n    </p>\n    <Card type="inner" title="Inner Card title" extra={<a href="#">More</a>}>\n      Inner Card content\n    </Card>\n    <Card\n      style={{ marginTop: 16 }}\n      type="inner"\n      title="Inner Card title"\n      extra={<a href="#">More</a>}\n    >\n      Inner Card content\n    </Card>\n  </Card>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"with-tabs"},"With tabs"),(0,l.kt)("p",null,"More content can be hosted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const tabList = [\n  {\n    key: 'tab1',\n    tab: 'tab1',\n  },\n  {\n    key: 'tab2',\n    tab: 'tab2',\n  },\n];\n\nconst contentList = {\n  tab1: <p>content1</p>,\n  tab2: <p>content2</p>,\n};\n\nconst tabListNoTitle = [\n  {\n    key: 'article',\n    tab: 'article',\n  },\n  {\n    key: 'app',\n    tab: 'app',\n  },\n  {\n    key: 'project',\n    tab: 'project',\n  },\n];\n\nconst contentListNoTitle = {\n  article: <p>article content</p>,\n  app: <p>app content</p>,\n  project: <p>project content</p>,\n};\n\nclass TabsCard extends React.Component {\n  state = {\n    key: 'tab1',\n    noTitleKey: 'app',\n  };\n\n  onTabChange = (key, type) => {\n    console.log(key, type);\n    this.setState({ [type]: key });\n  };\n\n  render() {\n    return (\n      <div>\n        <Card\n          style={{ width: '100%' }}\n          title=\"Card title\"\n          extra={<a href=\"#\">More</a>}\n          tabList={tabList}\n          activeTabKey={this.state.key}\n          onTabChange={key => {\n            this.onTabChange(key, 'key');\n          }}\n        >\n          {contentList[this.state.key]}\n        </Card>\n        <br />\n        <br />\n        <Card\n          style={{ width: '100%' }}\n          tabList={tabListNoTitle}\n          activeTabKey={this.state.noTitleKey}\n          tabBarExtraContent={<a href=\"#\">More</a>}\n          onTabChange={key => {\n            this.onTabChange(key, 'noTitleKey');\n          }}\n        >\n          {contentListNoTitle[this.state.noTitleKey]}\n        </Card>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<TabsCard />, mountNode);\n")),(0,l.kt)("h3",{id:"support-more-content-configuration"},"Support more content configuration"),(0,l.kt)("p",null,"A Card that supports ",(0,l.kt)("inlineCode",{parentName:"p"},"cover"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"avatar"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"description"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Meta } = Card;\n\nReactDOM.render(\n  <Card\n    style={{ width: 300 }}\n    cover={\n      <img\n        alt="example"\n        src="https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png"\n      />\n    }\n    actions={[\n      <Icon type="setting" key="setting" />,\n      <Icon type="edit" key="edit" />,\n      <Icon type="ellipsis" key="ellipsis" />,\n    ]}\n  >\n    <Meta\n      avatar={<Avatar src="https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png" />}\n      title="Card title"\n      description="This is the description"\n    />\n  </Card>,\n  mountNode,\n);\n')),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-html"},'<Card title="Card title">Card content</Card>\n')),(0,l.kt)("h3",{id:"card"},"Card"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"actions"),(0,l.kt)("td",{parentName:"tr",align:null},"The action list, shows at the bottom of the Card."),(0,l.kt)("td",{parentName:"tr",align:null},"Array\\<ReactNode",">"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"activeTabKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Current TabPane's key"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.3.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"headStyle"),(0,l.kt)("td",{parentName:"tr",align:null},"Inline style to apply to the card head"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bodyStyle"),(0,l.kt)("td",{parentName:"tr",align:null},"Inline style to apply to the card content"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"bordered"),(0,l.kt)("td",{parentName:"tr",align:null},"Toggles rendering of the border around the card"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"cover"),(0,l.kt)("td",{parentName:"tr",align:null},"Card cover"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultActiveTabKey"),(0,l.kt)("td",{parentName:"tr",align:null},"Initial active TabPane's key, if ",(0,l.kt)("inlineCode",{parentName:"td"},"activeTabKey")," is not set."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.3.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extra"),(0,l.kt)("td",{parentName:"tr",align:null},"Content to render in the top-right corner of the card"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hoverable"),(0,l.kt)("td",{parentName:"tr",align:null},"Lift up when hovering card"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"loading"),(0,l.kt)("td",{parentName:"tr",align:null},"Shows a loading indicator while the contents of the card are being fetched"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabList"),(0,l.kt)("td",{parentName:"tr",align:null},"List of TabPane's head."),(0,l.kt)("td",{parentName:"tr",align:null},"Array<{key: string, tab: ReactNode}>"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"tabBarExtraContent"),(0,l.kt)("td",{parentName:"tr",align:null},"Extra content in tab bar"),(0,l.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.23.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"size"),(0,l.kt)("td",{parentName:"tr",align:null},"Size of card"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"small")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"default"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"title"),(0,l.kt)("td",{parentName:"tr",align:null},"Card title"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"Card style type, can be set to ",(0,l.kt)("inlineCode",{parentName:"td"},"inner")," or not set"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onTabChange"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback when tab is switched"),(0,l.kt)("td",{parentName:"tr",align:null},"(key) => void"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"cardgrid"},"Card.Grid"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"className"),(0,l.kt)("td",{parentName:"tr",align:null},"className of container"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hoverable"),(0,l.kt)("td",{parentName:"tr",align:null},"Lift up when hovering card grid"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"3.23.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"style"),(0,l.kt)("td",{parentName:"tr",align:null},"style object of container"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"cardmeta"},"Card.Meta"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"avatar"),(0,l.kt)("td",{parentName:"tr",align:null},"avatar or icon"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"className"),(0,l.kt)("td",{parentName:"tr",align:null},"className of container"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"description"),(0,l.kt)("td",{parentName:"tr",align:null},"description content"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"style"),(0,l.kt)("td",{parentName:"tr",align:null},"style object of container"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"title"),(0,l.kt)("td",{parentName:"tr",align:null},"title content"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))))}m.isMDXComponent=!0},30876:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>u});var a=n(2784);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},c=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,c=d(t,["components","mdxType","originalType","parentName"]),m=p(n),u=r,g=m["".concat(o,".").concat(u)]||m[u]||s[u]||l;return n?a.createElement(g,i(i({ref:e},c),{},{components:n})):a.createElement(g,i({ref:e},c))}));function u(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=m;var d={};for(var o in e)hasOwnProperty.call(e,o)&&(d[o]=e[o]);d.originalType=t,d.mdxType="string"==typeof t?t:r,i[1]=d;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);