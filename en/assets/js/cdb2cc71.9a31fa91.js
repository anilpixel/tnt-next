"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4028],{44780:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>o,contentTitle:()=>d,metadata:()=>m,toc:()=>p,default:()=>k});var a=n(7896),r=n(31461),l=(n(2784),n(30876)),i=["components"],o={tags:["Components"],type:"Data Entry",title:"DatePicker"},d=void 0,m={unversionedId:"components/data-entry/date-picker",id:"components/data-entry/date-picker",isDocsHomePage:!1,title:"DatePicker",description:"-----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/date-picker.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/date-picker",permalink:"/tnt-next/en/docs/components/data-entry/date-picker",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/date-picker.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"DatePicker"},sidebar:"componentsSidebar",previous:{title:"Checkbox",permalink:"/tnt-next/en/docs/components/data-entry/checkbox"},next:{title:"Form",permalink:"/tnt-next/en/docs/components/data-entry/form"}},p=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Date Format",id:"date-format",children:[],level:3},{value:"Three Sizes",id:"three-sizes",children:[],level:3},{value:"Choose Time",id:"choose-time",children:[],level:3},{value:"Disabled",id:"disabled",children:[],level:3},{value:"Disabled Date &amp; Time",id:"disabled-date--time",children:[],level:3},{value:"Customized Range Picker",id:"customized-range-picker",children:[],level:3},{value:"Preset Ranges",id:"preset-ranges",children:[],level:3},{value:"Extra Footer",id:"extra-footer",children:[],level:3},{value:"Controlled Panels",id:"controlled-panels",children:[],level:3},{value:"Customized Date Rendering",id:"customized-date-rendering",children:[],level:3},{value:"Suffix",id:"suffix",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Localization",id:"localization",children:[],level:3},{value:"Common API",id:"common-api",children:[],level:3},{value:"Common Methods",id:"common-methods",children:[],level:3},{value:"DatePicker",id:"datepicker",children:[],level:3},{value:"MonthPicker",id:"monthpicker",children:[],level:3},{value:"WeekPicker",id:"weekpicker",children:[],level:3},{value:"RangePicker",id:"rangepicker",children:[],level:3}],level:2},{value:"FAQ",id:"faq",children:[],level:2}],u={toc:p};function k(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"To select or input a date."),(0,l.kt)("h2",{id:"when-to-use"},"When To Use"),(0,l.kt)("p",null,"By clicking the input box, you can select a date from a popup calendar."),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"basic"},"Basic"),(0,l.kt)("p",null,"Basic use case. Users can select or input a date in panel."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { MonthPicker, RangePicker, WeekPicker } = DatePicker;\n\nfunction onChange(date, dateString) {\n  console.log(date, dateString);\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker onChange={onChange} />\n    <br />\n    <MonthPicker onChange={onChange} placeholder="Select month" />\n    <br />\n    <RangePicker onChange={onChange} />\n    <br />\n    <WeekPicker onChange={onChange} placeholder="Select week" />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"date-format"},"Date Format"),(0,l.kt)("p",null,"We can set the date format by ",(0,l.kt)("inlineCode",{parentName:"p"},"format"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY/MM/DD';\nconst monthFormat = 'YYYY/MM';\n\nconst dateFormatList = ['DD/MM/YYYY', 'DD/MM/YY'];\n\nReactDOM.render(\n  <div>\n    <DatePicker defaultValue={moment('2015/01/01', dateFormat)} format={dateFormat} />\n    <br />\n    <DatePicker defaultValue={moment('01/01/2015', dateFormatList[0])} format={dateFormatList} />\n    <br />\n    <MonthPicker defaultValue={moment('2015/01', monthFormat)} format={monthFormat} />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015/01/01', dateFormat), moment('2015/01/01', dateFormat)]}\n      format={dateFormat}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"three-sizes"},"Three Sizes"),(0,l.kt)("p",null,"The input box comes in three sizes. ",(0,l.kt)("inlineCode",{parentName:"p"},"default")," will be used if ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," is omitted."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { MonthPicker, RangePicker, WeekPicker } = DatePicker;\n\nclass PickerSizesDemo extends React.Component {\n  state = {\n    size: \'default\',\n  };\n\n  handleSizeChange = e => {\n    this.setState({ size: e.target.value });\n  };\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value="large">Large</Radio.Button>\n          <Radio.Button value="default">Default</Radio.Button>\n          <Radio.Button value="small">Small</Radio.Button>\n        </Radio.Group>\n        <br />\n        <br />\n        <DatePicker size={size} />\n        <br />\n        <MonthPicker size={size} placeholder="Select Month" />\n        <br />\n        <RangePicker size={size} />\n        <br />\n        <WeekPicker size={size} placeholder="Select Week" />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<PickerSizesDemo />, mountNode);\n')),(0,l.kt)("h3",{id:"choose-time"},"Choose Time"),(0,l.kt)("p",null,"This property provide an additional time selection. When ",(0,l.kt)("inlineCode",{parentName:"p"},"showTime")," is an Object, its properties will be passed on to built-in ",(0,l.kt)("inlineCode",{parentName:"p"},"TimePicker"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { RangePicker } = DatePicker;\n\nfunction onChange(value, dateString) {\n  console.log('Selected Time: ', value);\n  console.log('Formatted Selected Time: ', dateString);\n}\n\nfunction onOk(value) {\n  console.log('onOk: ', value);\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker showTime placeholder=\"Select Time\" onChange={onChange} onOk={onOk} />\n    <br />\n    <RangePicker\n      showTime={{ format: 'HH:mm' }}\n      format=\"YYYY-MM-DD HH:mm\"\n      placeholder={['Start Time', 'End Time']}\n      onChange={onChange}\n      onOk={onOk}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"disabled"},"Disabled"),(0,l.kt)("p",null,"A disabled state of the ",(0,l.kt)("inlineCode",{parentName:"p"},"DatePicker"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { MonthPicker, RangePicker } = DatePicker;\n\nconst dateFormat = 'YYYY-MM-DD';\nReactDOM.render(\n  <div>\n    <DatePicker defaultValue={moment('2015-06-06', dateFormat)} disabled />\n    <br />\n    <MonthPicker defaultValue={moment('2015-06', 'YYYY-MM')} disabled />\n    <br />\n    <RangePicker\n      defaultValue={[moment('2015-06-06', dateFormat), moment('2015-06-06', dateFormat)]}\n      disabled\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"disabled-date--time"},"Disabled Date & Time"),(0,l.kt)("p",null,"Disabled part of dates and time by ",(0,l.kt)("inlineCode",{parentName:"p"},"disabledDate")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"disabledTime")," respectively, and ",(0,l.kt)("inlineCode",{parentName:"p"},"disabledTime")," only works with ",(0,l.kt)("inlineCode",{parentName:"p"},"showTime"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { MonthPicker, RangePicker } = DatePicker;\n\nfunction range(start, end) {\n  const result = [];\n  for (let i = start; i < end; i++) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction disabledDate(current) {\n  // Can not select days before today and today\n  return current && current < moment().endOf('day');\n}\n\nfunction disabledDateTime() {\n  return {\n    disabledHours: () => range(0, 24).splice(4, 20),\n    disabledMinutes: () => range(30, 60),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nfunction disabledRangeTime(_, type) {\n  if (type === 'start') {\n    return {\n      disabledHours: () => range(0, 60).splice(4, 20),\n      disabledMinutes: () => range(30, 60),\n      disabledSeconds: () => [55, 56],\n    };\n  }\n  return {\n    disabledHours: () => range(0, 60).splice(20, 4),\n    disabledMinutes: () => range(0, 31),\n    disabledSeconds: () => [55, 56],\n  };\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker\n      format=\"YYYY-MM-DD HH:mm:ss\"\n      disabledDate={disabledDate}\n      disabledTime={disabledDateTime}\n      showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\n    />\n    <br />\n    <MonthPicker disabledDate={disabledDate} placeholder=\"Select month\" />\n    <br />\n    <RangePicker\n      disabledDate={disabledDate}\n      disabledTime={disabledRangeTime}\n      showTime={{\n        hideDisabledOptions: true,\n        defaultValue: [moment('00:00:00', 'HH:mm:ss'), moment('11:59:59', 'HH:mm:ss')],\n      }}\n      format=\"YYYY-MM-DD HH:mm:ss\"\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"customized-range-picker"},"Customized Range Picker"),(0,l.kt)("p",null,"When ",(0,l.kt)("inlineCode",{parentName:"p"},"RangePicker")," does not satisfied your requirements, try to implement similar functionality with two ",(0,l.kt)("inlineCode",{parentName:"p"},"DatePicker"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class DateRange extends React.Component {\n  state = {\n    startValue: null,\n    endValue: null,\n    endOpen: false,\n  };\n\n  disabledStartDate = startValue => {\n    const { endValue } = this.state;\n    if (!startValue || !endValue) {\n      return false;\n    }\n    return startValue.valueOf() > endValue.valueOf();\n  };\n\n  disabledEndDate = endValue => {\n    const { startValue } = this.state;\n    if (!endValue || !startValue) {\n      return false;\n    }\n    return endValue.valueOf() <= startValue.valueOf();\n  };\n\n  onChange = (field, value) => {\n    this.setState({\n      [field]: value,\n    });\n  };\n\n  onStartChange = value => {\n    this.onChange(\'startValue\', value);\n  };\n\n  onEndChange = value => {\n    this.onChange(\'endValue\', value);\n  };\n\n  handleStartOpenChange = open => {\n    if (!open) {\n      this.setState({ endOpen: true });\n    }\n  };\n\n  handleEndOpenChange = open => {\n    this.setState({ endOpen: open });\n  };\n\n  render() {\n    const { startValue, endValue, endOpen } = this.state;\n    return (\n      <div>\n        <DatePicker\n          disabledDate={this.disabledStartDate}\n          showTime\n          format="YYYY-MM-DD HH:mm:ss"\n          value={startValue}\n          placeholder="Start"\n          onChange={this.onStartChange}\n          onOpenChange={this.handleStartOpenChange}\n        />\n        <DatePicker\n          disabledDate={this.disabledEndDate}\n          showTime\n          format="YYYY-MM-DD HH:mm:ss"\n          value={endValue}\n          placeholder="End"\n          onChange={this.onEndChange}\n          open={endOpen}\n          onOpenChange={this.handleEndOpenChange}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<DateRange />, mountNode);\n')),(0,l.kt)("h3",{id:"preset-ranges"},"Preset Ranges"),(0,l.kt)("p",null,"We can set preset ranges to RangePicker to improve user experience."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { RangePicker } = DatePicker;\n\nfunction onChange(dates, dateStrings) {\n  console.log('From: ', dates[0], ', to: ', dates[1]);\n  console.log('From: ', dateStrings[0], ', to: ', dateStrings[1]);\n}\n\nReactDOM.render(\n  <div>\n    <RangePicker\n      ranges={{\n        Today: [moment(), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n      }}\n      onChange={onChange}\n    />\n    <br />\n    <RangePicker\n      ranges={{\n        Today: [moment(), moment()],\n        'This Month': [moment().startOf('month'), moment().endOf('month')],\n      }}\n      showTime\n      format=\"YYYY/MM/DD HH:mm:ss\"\n      onChange={onChange}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"extra-footer"},"Extra Footer"),(0,l.kt)("p",null,"Render extra footer in panel for customized requirements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { RangePicker, MonthPicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <DatePicker renderExtraFooter={() => 'extra footer'} />\n    <DatePicker renderExtraFooter={() => 'extra footer'} showTime />\n    <RangePicker renderExtraFooter={() => 'extra footer'} />\n    <RangePicker renderExtraFooter={() => 'extra footer'} showTime />\n    <MonthPicker renderExtraFooter={() => 'extra footer'} placeholder=\"Select month\" />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"controlled-panels"},"Controlled Panels"),(0,l.kt)("p",null,"Determing which panel to show with ",(0,l.kt)("inlineCode",{parentName:"p"},"mode")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"onPanelChange"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { RangePicker } = DatePicker;\n\nclass ControlledDatePicker extends React.Component {\n  state = { mode: 'time' };\n\n  handleOpenChange = open => {\n    if (open) {\n      this.setState({ mode: 'time' });\n    }\n  };\n\n  handlePanelChange = (value, mode) => {\n    this.setState({ mode });\n  };\n\n  render() {\n    return (\n      <DatePicker\n        mode={this.state.mode}\n        showTime\n        onOpenChange={this.handleOpenChange}\n        onPanelChange={this.handlePanelChange}\n      />\n    );\n  }\n}\n\nclass ControlledRangePicker extends React.Component {\n  state = {\n    mode: ['month', 'month'],\n    value: [],\n  };\n\n  handlePanelChange = (value, mode) => {\n    this.setState({\n      value,\n      mode: [mode[0] === 'date' ? 'month' : mode[0], mode[1] === 'date' ? 'month' : mode[1]],\n    });\n  };\n\n  handleChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { value, mode } = this.state;\n    return (\n      <RangePicker\n        placeholder={['Start month', 'End month']}\n        format=\"YYYY-MM\"\n        value={value}\n        mode={mode}\n        onChange={this.handleChange}\n        onPanelChange={this.handlePanelChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(\n  <div>\n    <ControlledDatePicker />\n    <br />\n    <ControlledRangePicker />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"customized-date-rendering"},"Customized Date Rendering"),(0,l.kt)("p",null,"We can customize the rendering of date cells in the calendar by providing a ",(0,l.kt)("inlineCode",{parentName:"p"},"dateRender")," function to ",(0,l.kt)("inlineCode",{parentName:"p"},"DatePicker"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { RangePicker } = DatePicker;\n\nReactDOM.render(\n  <div>\n    <DatePicker\n      dateRender={current => {\n        const style = {};\n        if (current.date() === 1) {\n          style.border = '1px solid #1890ff';\n          style.borderRadius = '50%';\n        }\n        return (\n          <div className=\"ant-calendar-date\" style={style}>\n            {current.date()}\n          </div>\n        );\n      }}\n    />\n    <RangePicker\n      dateRender={current => {\n        const style = {};\n        if (current.date() === 1) {\n          style.border = '1px solid #1890ff';\n          style.borderRadius = '50%';\n        }\n        return (\n          <div className=\"ant-calendar-date\" style={style}>\n            {current.date()}\n          </div>\n        );\n      }}\n    />\n  </div>,\n  mountNode,\n);\n")),(0,l.kt)("h3",{id:"suffix"},"Suffix"),(0,l.kt)("p",null,"Basic use case. Users can select or input a date in panel."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const smileIcon = <Icon type="smile" />;\nconst { MonthPicker, RangePicker, WeekPicker } = DatePicker;\n\nfunction onChange(date, dateString) {\n  console.log(date, dateString);\n}\n\nReactDOM.render(\n  <div>\n    <DatePicker suffixIcon={smileIcon} onChange={onChange} />\n    <br />\n    <MonthPicker suffixIcon={smileIcon} onChange={onChange} placeholder="Select month" />\n    <br />\n    <RangePicker suffixIcon={smileIcon} onChange={onChange} />\n    <br />\n    <WeekPicker suffixIcon={smileIcon} onChange={onChange} placeholder="Select week" />\n    <br />\n    <DatePicker suffixIcon="ab" onChange={onChange} />\n    <br />\n    <MonthPicker suffixIcon="ab" onChange={onChange} placeholder="Select month" />\n    <br />\n    <RangePicker suffixIcon="ab" onChange={onChange} />\n    <br />\n    <WeekPicker suffixIcon="ab" onChange={onChange} placeholder="Select week" />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("p",null,"There are four kinds of picker:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"DatePicker"),(0,l.kt)("li",{parentName:"ul"},"MonthPicker"),(0,l.kt)("li",{parentName:"ul"},"RangePicker"),(0,l.kt)("li",{parentName:"ul"},"WeekPicker")),(0,l.kt)("h3",{id:"localization"},"Localization"),(0,l.kt)("p",null,"The default locale is en-US, if you need to use other languages, recommend to use internationalized components provided by us at the entrance. Look at: ",(0,l.kt)("a",{parentName:"p",href:"http://ant.design/components/config-provider/"},"ConfigProvider"),"."),(0,l.kt)("p",null,"If there are special needs (only modifying single component language), Please use the property: local. Example: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json"},"default"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import locale from 'antd/es/date-picker/locale/zh_CN';\n\n<DatePicker locale={locale} />;\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Note:")," Part of locale of DatePicker, MonthPicker, RangePicker, WeekPicker is read from value. So, please set the locale of moment correctly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// The default locale is en-US, if you want to use other locale, just set locale in entry file globally.\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\n<DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} />;\n")),(0,l.kt)("h3",{id:"common-api"},"Common API"),(0,l.kt)("p",null,"The following APIs are shared by DatePicker, MonthPicker, RangePicker, WeekPicker."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to show clear button"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,l.kt)("td",{parentName:"tr",align:null},"get focus when component mounted"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"className"),(0,l.kt)("td",{parentName:"tr",align:null},"picker className"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"''"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dateRender"),(0,l.kt)("td",{parentName:"tr",align:null},"custom rendering function for date cells"),(0,l.kt)("td",{parentName:"tr",align:null},"function(currentDate: moment, today: moment) => React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabled"),(0,l.kt)("td",{parentName:"tr",align:null},"determine whether the DatePicker is disabled"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabledDate"),(0,l.kt)("td",{parentName:"tr",align:null},"specify the date that cannot be selected"),(0,l.kt)("td",{parentName:"tr",align:null},"(currentDate: moment) => boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"dropdownClassName"),(0,l.kt)("td",{parentName:"tr",align:null},"to customize the className of the popup calendar"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.3.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getCalendarContainer"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the container of the floating layer, while the default is to create a ",(0,l.kt)("inlineCode",{parentName:"td"},"div")," element in ",(0,l.kt)("inlineCode",{parentName:"td"},"body")),(0,l.kt)("td",{parentName:"tr",align:null},"function(trigger)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"locale"),(0,l.kt)("td",{parentName:"tr",align:null},"localization configuration"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json"},"default")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mode"),(0,l.kt)("td",{parentName:"tr",align:null},"picker panel mode\uff08",(0,l.kt)("a",{parentName:"td",href:"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?"},"Cannot select year or month anymore?")),(0,l.kt)("td",{parentName:"tr",align:null},"`time"),(0,l.kt)("td",{parentName:"tr",align:null},"date"),(0,l.kt)("td",{parentName:"tr",align:null},"month")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"open"),(0,l.kt)("td",{parentName:"tr",align:null},"open state of picker"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"placeholder"),(0,l.kt)("td",{parentName:"tr",align:null},"placeholder of date input"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"RangePicker","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"popupStyle"),(0,l.kt)("td",{parentName:"tr",align:null},"to customize the style of the popup calendar"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"{}"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"size"),(0,l.kt)("td",{parentName:"tr",align:null},"determine the size of the input box, the height of ",(0,l.kt)("inlineCode",{parentName:"td"},"large")," and ",(0,l.kt)("inlineCode",{parentName:"td"},"small"),", are 40px and 24px respectively, while default size is 32px"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"suffixIcon"),(0,l.kt)("td",{parentName:"tr",align:null},"The custom suffix icon"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"style"),(0,l.kt)("td",{parentName:"tr",align:null},"to customize the style of the input box"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"{}"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onOpenChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed whether the popup calendar is popped up or closed"),(0,l.kt)("td",{parentName:"tr",align:null},"function(status)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onPanelChange"),(0,l.kt)("td",{parentName:"tr",align:null},"callback when picker panel mode is changed"),(0,l.kt)("td",{parentName:"tr",align:null},"function(value, mode)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.5.0")))),(0,l.kt)("h3",{id:"common-methods"},"Common Methods"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"blur()"),(0,l.kt)("td",{parentName:"tr",align:null},"remove focus"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"focus()"),(0,l.kt)("td",{parentName:"tr",align:null},"get focus"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"datepicker"},"DatePicker"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default date, if start time or end time is null or undefined, the date range will be an open interval"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultPickerValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default picker date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabledTime"),(0,l.kt)("td",{parentName:"tr",align:null},"to specify the time that cannot be selected"),(0,l.kt)("td",{parentName:"tr",align:null},"function(date)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the date format, refer to ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment.js"),". When an array is provided, all values are used for parsing and first value is used for formatting."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},'"YYYY-MM-DD"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderExtraFooter"),(0,l.kt)("td",{parentName:"tr",align:null},"render extra footer in panel"),(0,l.kt)("td",{parentName:"tr",align:null},"(mode) => React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showTime"),(0,l.kt)("td",{parentName:"tr",align:null},"to provide an additional time selection"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/components/time-picker/#API"},"TimePicker Options"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showTime.defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default time of selected date, ",(0,l.kt)("a",{parentName:"td",href:"#components-date-picker-demo-disabled-date"},"demo")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"moment()"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showToday"),(0,l.kt)("td",{parentName:"tr",align:null},'whether to show "Today" button'),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"to set date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed when the selected time is changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(date: moment, dateString: string)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onOk"),(0,l.kt)("td",{parentName:"tr",align:null},"callback when click ok button"),(0,l.kt)("td",{parentName:"tr",align:null},"function()"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onPanelChange"),(0,l.kt)("td",{parentName:"tr",align:null},"Callback function for panel changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(value, mode)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.19.8")))),(0,l.kt)("h3",{id:"monthpicker"},"MonthPicker"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultPickerValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default picker date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the date format, refer to ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment.js")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"YYYY-MM"'),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"monthCellContentRender"),(0,l.kt)("td",{parentName:"tr",align:null},"Custom month cell content render method"),(0,l.kt)("td",{parentName:"tr",align:null},"function(date, locale): ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderExtraFooter"),(0,l.kt)("td",{parentName:"tr",align:null},"render extra footer in panel"),(0,l.kt)("td",{parentName:"tr",align:null},"() => React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"to set date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed when the selected time is changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(date: moment, dateString: string)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"weekpicker"},"WeekPicker"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultPickerValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default picker date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the date format, refer to ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment.js")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},'"YYYY-wo"'),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"to set date"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment")),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed when the selected time is changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(date: moment, dateString: string)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderExtraFooter"),(0,l.kt)("td",{parentName:"tr",align:null},"render extra footer in panel"),(0,l.kt)("td",{parentName:"tr",align:null},"(mode) => React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.12.0")))),(0,l.kt)("h3",{id:"rangepicker"},"RangePicker"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default date"),(0,l.kt)("td",{parentName:"tr",align:null},"[",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),", ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"defaultPickerValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default picker date"),(0,l.kt)("td",{parentName:"tr",align:null},"[",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),", ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.10.8")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"disabledTime"),(0,l.kt)("td",{parentName:"tr",align:null},"to specify the time that cannot be selected"),(0,l.kt)("td",{parentName:"tr",align:null},"function(dates: ","[","moment, moment], partial: `'start'"),(0,l.kt)("td",{parentName:"tr",align:null},"'end'`)"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the date format, refer to ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment.js"),". When an array is provided, all values are used for parsing and first value is used for formatting."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},'"YYYY-MM-DD HH:mm:ss"')),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ranges"),(0,l.kt)("td",{parentName:"tr",align:null},"preseted ranges for quick selection"),(0,l.kt)("td",{parentName:"tr",align:null},"{ ","[","range: string]: ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"[","] }"),(0,l.kt)("td",{parentName:"tr",align:null},"{ ","[","range: string]: () => ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"[","] }"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"renderExtraFooter"),(0,l.kt)("td",{parentName:"tr",align:null},"render extra footer in panel"),(0,l.kt)("td",{parentName:"tr",align:null},"() => React.ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"separator"),(0,l.kt)("td",{parentName:"tr",align:null},"set separator between inputs"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"'~'"),(0,l.kt)("td",{parentName:"tr",align:null},"3.14.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showTime"),(0,l.kt)("td",{parentName:"tr",align:null},"to provide an additional time selection"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/components/time-picker/#API"},"TimePicker Options"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showTime.defaultValue"),(0,l.kt)("td",{parentName:"tr",align:null},"to set default time of selected date, ",(0,l.kt)("a",{parentName:"td",href:"#components-date-picker-demo-disabled-date"},"demo")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"[","moment(), moment()]"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"value"),(0,l.kt)("td",{parentName:"tr",align:null},"to set date"),(0,l.kt)("td",{parentName:"tr",align:null},"[",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),", ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"]"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onCalendarChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed when the start time or the end time of the range is changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(dates: ","[","moment, moment])"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.0.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onChange"),(0,l.kt)("td",{parentName:"tr",align:null},"a callback function, can be executed when the selected time is changing"),(0,l.kt)("td",{parentName:"tr",align:null},"function(dates: ","[","moment, moment], dateStrings: ","[","string, string])"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onOk"),(0,l.kt)("td",{parentName:"tr",align:null},"callback when click ok button"),(0,l.kt)("td",{parentName:"tr",align:null},"function(dates: ",(0,l.kt)("a",{parentName:"td",href:"http://momentjs.com/"},"moment"),"[","])"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"faq"},"FAQ"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"/docs/react/faq#When-set-mode-to-DatePicker/RangePicker,-cannot-select-year-or-month-anymore?"},"When set mode to DatePicker/RangePicker, cannot select year or month anymore?"))))}k.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>s});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=m(n),s=r,c=k["".concat(d,".").concat(s)]||k[s]||u[s]||l;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"}}]);