"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[645],{78138:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>o,contentTitle:()=>s,metadata:()=>p,toc:()=>d,default:()=>u});var r=n(7896),a=n(31461),l=(n(2784),n(30876)),i=["components"],o={tags:["Components"],type:"Feedback",title:"Progress"},s=void 0,p={unversionedId:"components/feedback/progress",id:"components/feedback/progress",isDocsHomePage:!1,title:"Progress",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/feedback/progress.md",sourceDirName:"components/feedback",slug:"/components/feedback/progress",permalink:"/tnt-next/en/docs/components/feedback/progress",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/feedback/progress.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Feedback",title:"Progress"},sidebar:"componentsSidebar",previous:{title:"Popconfirm",permalink:"/tnt-next/en/docs/components/feedback/popconfirm"},next:{title:"Result",permalink:"/tnt-next/en/docs/components/feedback/result"}},d=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Progress bar",id:"progress-bar",children:[],level:3},{value:"Circular progress bar",id:"circular-progress-bar",children:[],level:3},{value:"Mini size progress bar",id:"mini-size-progress-bar",children:[],level:3},{value:"Mini size circular progress bar",id:"mini-size-circular-progress-bar",children:[],level:3},{value:"Dynamic circular progress bar",id:"dynamic-circular-progress-bar",children:[],level:3},{value:"Dynamic",id:"dynamic",children:[],level:3},{value:"Custom text format",id:"custom-text-format",children:[],level:3},{value:"Dashboard",id:"dashboard",children:[],level:3},{value:"Progress bar with success segment",id:"progress-bar-with-success-segment",children:[],level:3},{value:"Square linecaps",id:"square-linecaps",children:[],level:3},{value:"Custom line gradient",id:"custom-line-gradient",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"<code>type=&quot;line&quot;</code>",id:"typeline",children:[],level:3},{value:"<code>type=&quot;circle&quot;</code>",id:"typecircle",children:[],level:3},{value:"<code>type=&quot;dashboard&quot;</code>",id:"typedashboard",children:[],level:3}],level:2}],c={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Display the current progress of an operation flow."),(0,l.kt)("h2",{id:"when-to-use"},"When To Use"),(0,l.kt)("p",null,"If it will take a long time to complete an operation, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"Progress")," to show the current progress and status."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When an operation will interrupt the current interface, or it needs to run in the background for more than 2 seconds."),(0,l.kt)("li",{parentName:"ul"},"When you need to display the completion percentage of an operation.")),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"progress-bar"},"Progress bar"),(0,l.kt)("p",null,"A standard progress bar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Progress percent={30} />\n    <Progress percent={50} status="active" />\n    <Progress percent={70} status="exception" />\n    <Progress percent={100} />\n    <Progress percent={50} showInfo={false} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"circular-progress-bar"},"Circular progress bar"),(0,l.kt)("p",null,"A circular progress bar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Progress type="circle" percent={75} />\n    <Progress type="circle" percent={70} status="exception" />\n    <Progress type="circle" percent={100} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"mini-size-progress-bar"},"Mini size progress bar"),(0,l.kt)("p",null,"Appropriate for a narrow area."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div style={{ width: 170 }}>\n    <Progress percent={30} size="small" />\n    <Progress percent={50} size="small" status="active" />\n    <Progress percent={70} size="small" status="exception" />\n    <Progress percent={100} size="small" />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"mini-size-circular-progress-bar"},"Mini size circular progress bar"),(0,l.kt)("p",null,"A smaller circular progress bar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Progress type="circle" percent={30} width={80} />\n    <Progress type="circle" percent={70} width={80} status="exception" />\n    <Progress type="circle" percent={100} width={80} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"dynamic-circular-progress-bar"},"Dynamic circular progress bar"),(0,l.kt)("p",null,"A dynamic progress bar is better."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  };\n\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  };\n\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  };\n\n  render() {\n    return (\n      <div>\n        <Progress type="circle" percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon="minus" />\n          <Button onClick={this.increase} icon="plus" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,l.kt)("h3",{id:"dynamic"},"Dynamic"),(0,l.kt)("p",null,"A dynamic progress bar is better."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const ButtonGroup = Button.Group;\n\nclass App extends React.Component {\n  state = {\n    percent: 0,\n  };\n\n  increase = () => {\n    let percent = this.state.percent + 10;\n    if (percent > 100) {\n      percent = 100;\n    }\n    this.setState({ percent });\n  };\n\n  decline = () => {\n    let percent = this.state.percent - 10;\n    if (percent < 0) {\n      percent = 0;\n    }\n    this.setState({ percent });\n  };\n\n  render() {\n    return (\n      <div>\n        <Progress percent={this.state.percent} />\n        <ButtonGroup>\n          <Button onClick={this.decline} icon="minus" />\n          <Button onClick={this.increase} icon="plus" />\n        </ButtonGroup>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,l.kt)("h3",{id:"custom-text-format"},"Custom text format"),(0,l.kt)("p",null,"You can set a custom text by setting the ",(0,l.kt)("inlineCode",{parentName:"p"},"format")," prop."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Progress type="circle" percent={75} format={percent => `${percent} Days`} />\n    <Progress type="circle" percent={100} format={() => \'Done\'} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"dashboard"},"Dashboard"),(0,l.kt)("p",null,"By setting ",(0,l.kt)("inlineCode",{parentName:"p"},"type=dashboard"),", you can get a dashboard style of progress easily."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(<Progress type="dashboard" percent={75} />, mountNode);\n')),(0,l.kt)("h3",{id:"progress-bar-with-success-segment"},"Progress bar with success segment"),(0,l.kt)("p",null,"A standard progress bar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Tooltip title="3 done / 3 in progress / 4 to do">\n      <Progress percent={60} successPercent={30} />\n    </Tooltip>\n\n    <Tooltip title="3 done / 3 in progress / 4 to do">\n      <Progress percent={60} successPercent={30} type="circle" />\n    </Tooltip>\n\n    <Tooltip title="3 done / 3 in progress / 4 to do">\n      <Progress percent={60} successPercent={30} type="dashboard" />\n    </Tooltip>\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"square-linecaps"},"Square linecaps"),(0,l.kt)("p",null,"By setting ",(0,l.kt)("inlineCode",{parentName:"p"},'strokeLinecap="square"'),", you can change the linecaps from round to square."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <div>\n    <Progress strokeLinecap="square" percent={75} />\n    <Progress strokeLinecap="square" type="circle" percent={75} />\n    <Progress strokeLinecap="square" type="dashboard" percent={75} />\n  </div>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"custom-line-gradient"},"Custom line gradient"),(0,l.kt)("p",null,"A package of ",(0,l.kt)("inlineCode",{parentName:"p"},"linear-gradient"),". It is recommended to only pass two colors."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const Demo = () => (\n  <div>\n    <Progress\n      strokeColor={{\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      }}\n      percent={99.9}\n    />\n    <Progress\n      strokeColor={{\n        from: '#108ee9',\n        to: '#87d068',\n      }}\n      percent={99.9}\n      status=\"active\"\n    />\n    <Progress\n      type=\"circle\"\n      strokeColor={{\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      }}\n      percent={90}\n    />\n    <Progress\n      type=\"circle\"\n      strokeColor={{\n        '0%': '#108ee9',\n        '100%': '#87d068',\n      }}\n      percent={100}\n    />\n  </div>\n);\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("p",null,"Properties that shared by all types."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the type, options: ",(0,l.kt)("inlineCode",{parentName:"td"},"line")," ",(0,l.kt)("inlineCode",{parentName:"td"},"circle")," ",(0,l.kt)("inlineCode",{parentName:"td"},"dashboard")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"line")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"format"),(0,l.kt)("td",{parentName:"tr",align:null},"template function of the content"),(0,l.kt)("td",{parentName:"tr",align:null},"function(percent, successPercent)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"percent => percent + '%'")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"percent"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the completion percentage"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"showInfo"),(0,l.kt)("td",{parentName:"tr",align:null},"whether to display the progress value and the status icon"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"status"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the status of the Progress, options: ",(0,l.kt)("inlineCode",{parentName:"td"},"success")," ",(0,l.kt)("inlineCode",{parentName:"td"},"exception")," ",(0,l.kt)("inlineCode",{parentName:"td"},"normal")," ",(0,l.kt)("inlineCode",{parentName:"td"},"active"),"(line only)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeLinecap"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the style of the progress linecap"),(0,l.kt)("td",{parentName:"tr",align:null},"Enum{ 'round', 'square' }"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"round")),(0,l.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeColor"),(0,l.kt)("td",{parentName:"tr",align:null},"color of progress bar"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.7.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"successPercent"),(0,l.kt)("td",{parentName:"tr",align:null},"segmented success percent"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"3.2.0")))),(0,l.kt)("h3",{id:"typeline"},(0,l.kt)("inlineCode",{parentName:"h3"},'type="line"')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeWidth"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the width of the progress bar, unit: ",(0,l.kt)("inlineCode",{parentName:"td"},"px")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"10"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeColor"),(0,l.kt)("td",{parentName:"tr",align:null},"color of progress bar, render ",(0,l.kt)("inlineCode",{parentName:"td"},"linear-gradient")," when passing an object"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"{ from: string; to: string; direction: string }"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)("h3",{id:"typecircle"},(0,l.kt)("inlineCode",{parentName:"h3"},'type="circle"')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"width"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the canvas width of the circular progress, unit: ",(0,l.kt)("inlineCode",{parentName:"td"},"px")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"132"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeWidth"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the width of the circular progress, unit: percentage of the canvas width"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeColor"),(0,l.kt)("td",{parentName:"tr",align:null},"color of circular progress, render ",(0,l.kt)("inlineCode",{parentName:"td"},"linear-gradient")," when passing an object"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"-")))),(0,l.kt)("h3",{id:"typedashboard"},(0,l.kt)("inlineCode",{parentName:"h3"},'type="dashboard"')),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"width"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the canvas width of the dashboard progress, unit: ",(0,l.kt)("inlineCode",{parentName:"td"},"px")),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"132"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"strokeWidth"),(0,l.kt)("td",{parentName:"tr",align:null},"to set the width of the dashboard progress, unit: percentage of the canvas width"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"6"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gapDegree"),(0,l.kt)("td",{parentName:"tr",align:null},"the gap degree of half circle, 0 ~ 360"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"0"),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"gapPosition"),(0,l.kt)("td",{parentName:"tr",align:null},"the gap position, options: ",(0,l.kt)("inlineCode",{parentName:"td"},"top")," ",(0,l.kt)("inlineCode",{parentName:"td"},"bottom")," ",(0,l.kt)("inlineCode",{parentName:"td"},"left")," ",(0,l.kt)("inlineCode",{parentName:"td"},"right")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"top")),(0,l.kt)("td",{parentName:"tr",align:null},"3.13.1")))))}u.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(2784);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||l;return n?r.createElement(g,i(i({ref:t},d),{},{components:n})):r.createElement(g,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);