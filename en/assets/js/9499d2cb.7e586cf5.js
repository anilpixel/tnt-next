"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9364],{18029:(e,n,t)=>{t.r(n),t.d(n,{frontMatter:()=>c,contentTitle:()=>p,metadata:()=>m,toc:()=>s,default:()=>f});var o,a=t(7896),r=t(31461),i=(t(2784),t(30876)),l=["components"],c={tags:["Components"],type:"Feedback",title:"Popconfirm"},p=void 0,m={unversionedId:"components/feedback/popconfirm",id:"components/feedback/popconfirm",isDocsHomePage:!1,title:"Popconfirm",description:"-----",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/feedback/popconfirm.md",sourceDirName:"components/feedback",slug:"/components/feedback/popconfirm",permalink:"/tnt-next/en/docs/components/feedback/popconfirm",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/feedback/popconfirm.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Feedback",title:"Popconfirm"},sidebar:"componentsSidebar",previous:{title:"Notification",permalink:"/tnt-next/en/docs/components/feedback/notification"},next:{title:"Progress",permalink:"/tnt-next/en/docs/components/feedback/progress"}},s=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic",id:"basic",children:[],level:3},{value:"Locale text",id:"locale-text",children:[],level:3},{value:"Placement",id:"placement",children:[],level:3},{value:"Conditional trigger",id:"conditional-trigger",children:[],level:3},{value:"Customize icon",id:"customize-icon",children:[],level:3}],level:2},{value:"API",id:"api",children:[],level:2},{value:"Note",id:"note",children:[],level:2}],d=(o="Icon",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)}),u={toc:s};function f(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("hr",null),(0,i.kt)("p",null,"A simple and compact confirmation dialog of an action."),(0,i.kt)("h2",{id:"when-to-use"},"When To Use"),(0,i.kt)("p",null,"A simple and compact dialog used for asking for user confirmation."),(0,i.kt)("p",null,"The difference with the ",(0,i.kt)("inlineCode",{parentName:"p"},"confirm")," modal dialog is that it's more lightweight than the static popped full-screen confirm modal."),(0,i.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,i.kt)("h3",{id:"basic"},"Basic"),(0,i.kt)("p",null,"The basic example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function confirm(e) {\n  console.log(e);\n  message.success(\'Click on Yes\');\n}\n\nfunction cancel(e) {\n  console.log(e);\n  message.error(\'Click on No\');\n}\n\nReactDOM.render(\n  <Popconfirm\n    title="Are you sure delete this task?"\n    onConfirm={confirm}\n    onCancel={cancel}\n    okText="Yes"\n    cancelText="No"\n  >\n    <a href="#">Delete</a>\n  </Popconfirm>,\n  mountNode,\n);\n')),(0,i.kt)("h3",{id:"locale-text"},"Locale text"),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"okText")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"cancelText")," props to customize the button's labels."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <Popconfirm title="Are you sure\uff1f" okText="Yes" cancelText="No">\n    <a href="#">Delete</a>\n  </Popconfirm>,\n  mountNode,\n);\n')),(0,i.kt)("h3",{id:"placement"},"Placement"),(0,i.kt)("p",null,"There are 12 ",(0,i.kt)("inlineCode",{parentName:"p"},"placement")," options available. Use ",(0,i.kt)("inlineCode",{parentName:"p"},"arrowPointAtCenter")," if you want the arrow to point at the center of target."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const text = \'Are you sure to delete this task?\';\n\nfunction confirm() {\n  message.info(\'Clicked on Yes.\');\n}\n\nReactDOM.render(\n  <div className="demo">\n    <div style={{ marginLeft: 70, whiteSpace: \'nowrap\' }}>\n      <Popconfirm placement="topLeft" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>TL</Button>\n      </Popconfirm>\n      <Popconfirm placement="top" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>Top</Button>\n      </Popconfirm>\n      <Popconfirm\n        placement="topRight"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>TR</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ width: 70, float: \'left\' }}>\n      <Popconfirm placement="leftTop" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>LT</Button>\n      </Popconfirm>\n      <Popconfirm placement="left" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>Left</Button>\n      </Popconfirm>\n      <Popconfirm\n        placement="leftBottom"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>LB</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ width: 70, marginLeft: 304 }}>\n      <Popconfirm\n        placement="rightTop"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>RT</Button>\n      </Popconfirm>\n      <Popconfirm placement="right" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>Right</Button>\n      </Popconfirm>\n      <Popconfirm\n        placement="rightBottom"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>RB</Button>\n      </Popconfirm>\n    </div>\n    <div style={{ marginLeft: 70, clear: \'both\', whiteSpace: \'nowrap\' }}>\n      <Popconfirm\n        placement="bottomLeft"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>BL</Button>\n      </Popconfirm>\n      <Popconfirm placement="bottom" title={text} onConfirm={confirm} okText="Yes" cancelText="No">\n        <Button>Bottom</Button>\n      </Popconfirm>\n      <Popconfirm\n        placement="bottomRight"\n        title={text}\n        onConfirm={confirm}\n        okText="Yes"\n        cancelText="No"\n      >\n        <Button>BR</Button>\n      </Popconfirm>\n    </div>\n  </div>,\n  mountNode,\n);\n')),(0,i.kt)("h3",{id:"conditional-trigger"},"Conditional trigger"),(0,i.kt)("p",null,"Make it pop up under some conditions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class App extends React.Component {\n  state = {\n    visible: false,\n    condition: true, // Whether meet the condition, if not show popconfirm.\n  };\n\n  changeCondition = value => {\n    this.setState({ condition: value });\n  };\n\n  confirm = () => {\n    this.setState({ visible: false });\n    message.success(\'Next step.\');\n  };\n\n  cancel = () => {\n    this.setState({ visible: false });\n    message.error(\'Click on cancel.\');\n  };\n\n  handleVisibleChange = visible => {\n    if (!visible) {\n      this.setState({ visible });\n      return;\n    }\n    // Determining condition before show the popconfirm.\n    console.log(this.state.condition);\n    if (this.state.condition) {\n      this.confirm(); // next step\n    } else {\n      this.setState({ visible }); // show the popconfirm\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Popconfirm\n          title="Are you sure delete this task?"\n          visible={this.state.visible}\n          onVisibleChange={this.handleVisibleChange}\n          onConfirm={this.confirm}\n          onCancel={this.cancel}\n          okText="Yes"\n          cancelText="No"\n        >\n          <a href="#">Delete a task</a>\n        </Popconfirm>\n        <br />\n        <br />\n        Whether directly execute\uff1a\n        <Switch defaultChecked onChange={this.changeCondition} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n')),(0,i.kt)("h3",{id:"customize-icon"},"Customize icon"),(0,i.kt)("p",null,"Set ",(0,i.kt)("inlineCode",{parentName:"p"},"icon")," props to customize the icon."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'ReactDOM.render(\n  <Popconfirm\n    title="Are you sure\uff1f"\n    icon={<Icon type="question-circle-o" style={{ color: \'red\' }} />}\n  >\n    <a href="#">Delete</a>\n  </Popconfirm>,\n  mountNode,\n);\n')),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Param"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"cancelText"),(0,i.kt)("td",{parentName:"tr",align:null},"text of the Cancel button"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"Cancel")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"okText"),(0,i.kt)("td",{parentName:"tr",align:null},"text of the Confirm button"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"OK")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"okType"),(0,i.kt)("td",{parentName:"tr",align:null},"Button ",(0,i.kt)("inlineCode",{parentName:"td"},"type")," of the Confirm button"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"primary")),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"title"),(0,i.kt)("td",{parentName:"tr",align:null},"title of the confirmation box"),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"onCancel"),(0,i.kt)("td",{parentName:"tr",align:null},"callback of cancel"),(0,i.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"onConfirm"),(0,i.kt)("td",{parentName:"tr",align:null},"callback of confirmation"),(0,i.kt)("td",{parentName:"tr",align:null},"function(e)"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"icon"),(0,i.kt)("td",{parentName:"tr",align:null},"customize icon of confirmation"),(0,i.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,i.kt)("td",{parentName:"tr",align:null},"\\",(0,i.kt)(d,{type:"exclamation-circle",mdxType:"Icon"})),(0,i.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"disabled"),(0,i.kt)("td",{parentName:"tr",align:null},"is show popconfirm when click its childrenNode"),(0,i.kt)("td",{parentName:"tr",align:null},"boolean"),(0,i.kt)("td",{parentName:"tr",align:null},"false"),(0,i.kt)("td",{parentName:"tr",align:null},"3.19.8")))),(0,i.kt)("p",null,"Consult ",(0,i.kt)("a",{parentName:"p",href:"https://ant.design/components/tooltip/#API"},"Tooltip's documentation")," to find more APIs."),(0,i.kt)("h2",{id:"note"},"Note"),(0,i.kt)("p",null,"Please ensure that the child node of ",(0,i.kt)("inlineCode",{parentName:"p"},"Popconfirm")," accepts ",(0,i.kt)("inlineCode",{parentName:"p"},"onMouseEnter"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onMouseLeave"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onFocus"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"onClick")," events."))}f.isMDXComponent=!0},30876:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>u});var o=t(2784);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=o.createContext({}),p=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return o.createElement(c.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,f=d["".concat(c,".").concat(u)]||d[u]||s[u]||r;return t?o.createElement(f,i(i({ref:n},m),{},{components:t})):o.createElement(f,i({ref:n},m))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=t[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);