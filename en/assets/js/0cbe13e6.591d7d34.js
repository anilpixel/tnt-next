"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9875],{16958:(n,e,t)=>{t.r(e),t.d(e,{frontMatter:()=>o,contentTitle:()=>i,metadata:()=>s,toc:()=>m,default:()=>u});var a=t(7896),l=t(31461),r=(t(2784),t(30876)),d=["components"],o={tags:["Components"],cols:1,type:"Data Display",title:"Table"},i=void 0,s={unversionedId:"components/data-display/table",id:"components/data-display/table",isDocsHomePage:!1,title:"Table",description:"--",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-display/table.md",sourceDirName:"components/data-display",slug:"/components/data-display/table",permalink:"/tnt-next/en/docs/components/data-display/table",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-display/table.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],cols:1,type:"Data Display",title:"Table"},sidebar:"componentsSidebar",previous:{title:"Statistic",permalink:"/tnt-next/en/docs/components/data-display/statistic"},next:{title:"Tabs",permalink:"/tnt-next/en/docs/components/data-display/tabs"}},m=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"How To Use",id:"how-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic Usage",id:"basic-usage",children:[],level:3},{value:"JSX style API",id:"jsx-style-api",children:[],level:3},{value:"selection",id:"selection",children:[],level:3},{value:"Selection and operation",id:"selection-and-operation",children:[],level:3},{value:"Custom selection",id:"custom-selection",children:[],level:3},{value:"Filter and sorter",id:"filter-and-sorter",children:[],level:3},{value:"Reset filters and sorters",id:"reset-filters-and-sorters",children:[],level:3},{value:"Customized filter panel",id:"customized-filter-panel",children:[],level:3},{value:"Ajax",id:"ajax",children:[],level:3},{value:"size",id:"size",children:[],level:3},{value:"border, title and footer",id:"border-title-and-footer",children:[],level:3},{value:"Expandable Row",id:"expandable-row",children:[],level:3},{value:"colSpan and rowSpan",id:"colspan-and-rowspan",children:[],level:3},{value:"Tree data",id:"tree-data",children:[],level:3},{value:"Fixed Header",id:"fixed-header",children:[],level:3},{value:"Fixed Columns",id:"fixed-columns",children:[],level:3},{value:"Fixed Columns and Header",id:"fixed-columns-and-header",children:[],level:3},{value:"Grouping table head",id:"grouping-table-head",children:[],level:3},{value:"Editable Cells",id:"editable-cells",children:[],level:3},{value:"Editable Rows",id:"editable-rows",children:[],level:3},{value:"Nested tables",id:"nested-tables",children:[],level:3},{value:"Drag sorting",id:"drag-sorting",children:[],level:3},{value:"Resizable column",id:"resizable-column",children:[],level:3},{value:"ellipsis column",id:"ellipsis-column",children:[],level:3},{value:"Dynamic Settings",id:"dynamic-settings",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Table",id:"table",children:[{value:"onRow usage",id:"onrow-usage",children:[],level:4}],level:3},{value:"Column",id:"column",children:[],level:3},{value:"ColumnGroup",id:"columngroup",children:[],level:3},{value:"pagination",id:"pagination",children:[],level:3},{value:"rowSelection",id:"rowselection",children:[],level:3},{value:"scroll",id:"scroll",children:[],level:3},{value:"selection",id:"selection-1",children:[],level:3}],level:2},{value:"Using in TypeScript",id:"using-in-typescript",children:[],level:2},{value:"Note",id:"note",children:[],level:2}],p={toc:m};function u(n){var e=n.components,t=(0,l.Z)(n,d);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"--"),(0,r.kt)("p",null,"A table displays rows of data."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"To display a collection of structured data."),(0,r.kt)("li",{parentName:"ul"},"To sort, search, paginate, filter data.")),(0,r.kt)("h2",{id:"how-to-use"},"How To Use"),(0,r.kt)("p",null,"Specify ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," of Table as an array of data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"const dataSource = [\n  {\n    key: '1',\n    name: 'Mike',\n    age: 32,\n    address: '10 Downing Street',\n  },\n  {\n    key: '2',\n    name: 'John',\n    age: 42,\n    address: '10 Downing Street',\n  },\n];\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\n<Table dataSource={dataSource} columns={columns} />;\n")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Simple table with actions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n  {\n    title: 'Tags',\n    key: 'tags',\n    dataIndex: 'tags',\n    render: (tags) => (\n      <span>\n        {tags.map((tag) => {\n          let color = tag.length > 5 ? 'geekblue' : 'green';\n          if (tag === 'loser') {\n            color = 'volcano';\n          }\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </span>\n    ),\n  },\n  {\n    title: 'Action',\n    key: 'action',\n    render: (text, record) => (\n      <span>\n        <a>Invite {record.name}</a>\n        <Divider type=\"vertical\" />\n        <a>Delete</a>\n      </span>\n    ),\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    tags: ['loser'],\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    tags: ['cool', 'teacher'],\n  },\n];\n\nReactDOM.render(<Table columns={columns} dataSource={data} />, mountNode);\n")),(0,r.kt)("h3",{id:"jsx-style-api"},"JSX style API"),(0,r.kt)("p",null,"Using JSX style API (introduced in 2.5.0)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Column, ColumnGroup } = Table;\n\nconst data = [\n  {\n    key: \'1\',\n    firstName: \'John\',\n    lastName: \'Brown\',\n    age: 32,\n    address: \'New York No. 1 Lake Park\',\n    tags: [\'nice\', \'developer\'],\n  },\n  {\n    key: \'2\',\n    firstName: \'Jim\',\n    lastName: \'Green\',\n    age: 42,\n    address: \'London No. 1 Lake Park\',\n    tags: [\'loser\'],\n  },\n  {\n    key: \'3\',\n    firstName: \'Joe\',\n    lastName: \'Black\',\n    age: 32,\n    address: \'Sidney No. 1 Lake Park\',\n    tags: [\'cool\', \'teacher\'],\n  },\n];\n\nReactDOM.render(\n  <Table dataSource={data}>\n    <ColumnGroup title="Name">\n      <Column title="First Name" dataIndex="firstName" key="firstName" />\n      <Column title="Last Name" dataIndex="lastName" key="lastName" />\n    </ColumnGroup>\n    <Column title="Age" dataIndex="age" key="age" />\n    <Column title="Address" dataIndex="address" key="address" />\n    <Column\n      title="Tags"\n      dataIndex="tags"\n      key="tags"\n      render={(tags) => (\n        <span>\n          {tags.map((tag) => (\n            <Tag color="blue" key={tag}>\n              {tag}\n            </Tag>\n          ))}\n        </span>\n      )}\n    />\n    <Column\n      title="Action"\n      key="action"\n      render={(text, record) => (\n        <span>\n          <a>Invite {record.lastName}</a>\n          <Divider type="vertical" />\n          <a>Delete</a>\n        </span>\n      )}\n    />\n  </Table>,\n  mountNode\n);\n')),(0,r.kt)("h3",{id:"selection"},"selection"),(0,r.kt)("p",null,"Rows can be selectable by making first column as a selectable column."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'Disabled User',\n    age: 99,\n    address: 'Sidney No. 1 Lake Park',\n  },\n];\n\n// rowSelection object indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(\n      `selectedRowKeys: ${selectedRowKeys}`,\n      'selectedRows: ',\n      selectedRows\n    );\n  },\n  getCheckboxProps: (record) => ({\n    disabled: record.name === 'Disabled User', // Column configuration not to be checked\n    name: record.name,\n  }),\n};\n\nReactDOM.render(\n  <Table rowSelection={rowSelection} columns={columns} dataSource={data} />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"selection-and-operation"},"Selection and operation"),(0,r.kt)("p",null,"To perform operations and clear selections after selecting some rows, use ",(0,r.kt)("inlineCode",{parentName:"p"},"rowSelection.selectedRowKeys")," to control selected rows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [], // Check here to configure the default column\n    loading: false,\n  };\n\n  start = () => {\n    this.setState({ loading: true });\n    // ajax request after empty completing\n    setTimeout(() => {\n      this.setState({\n        selectedRowKeys: [],\n        loading: false,\n      });\n    }, 1000);\n  };\n\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  };\n\n  render() {\n    const { loading, selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n    };\n    const hasSelected = selectedRowKeys.length > 0;\n    return (\n      <div>\n        <div style={{ marginBottom: 16 }}>\n          <Button\n            type=\"primary\"\n            onClick={this.start}\n            disabled={!hasSelected}\n            loading={loading}\n          >\n            Reload\n          </Button>\n          <span style={{ marginLeft: 8 }}>\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\n          </span>\n        </div>\n        <Table\n          rowSelection={rowSelection}\n          columns={columns}\n          dataSource={data}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"custom-selection"},"Custom selection"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"rowSelection.selections")," custom selections, default no select dropdown, show default selections via setting to ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass App extends React.Component {\n  state = {\n    selectedRowKeys: [], // Check here to configure the default column\n  };\n\n  onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  };\n\n  render() {\n    const { selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      hideDefaultSelections: true,\n      selections: [\n        {\n          key: 'all-data',\n          text: 'Select All Data',\n          onSelect: () => {\n            this.setState({\n              selectedRowKeys: [...Array(46).keys()], // 0...45\n            });\n          },\n        },\n        {\n          key: 'odd',\n          text: 'Select Odd Row',\n          onSelect: (changableRowKeys) => {\n            let newSelectedRowKeys = [];\n            newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n              if (index % 2 !== 0) {\n                return false;\n              }\n              return true;\n            });\n            this.setState({ selectedRowKeys: newSelectedRowKeys });\n          },\n        },\n        {\n          key: 'even',\n          text: 'Select Even Row',\n          onSelect: (changableRowKeys) => {\n            let newSelectedRowKeys = [];\n            newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n              if (index % 2 !== 0) {\n                return true;\n              }\n              return false;\n            });\n            this.setState({ selectedRowKeys: newSelectedRowKeys });\n          },\n        },\n      ],\n    };\n    return (\n      <Table rowSelection={rowSelection} columns={columns} dataSource={data} />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"filter-and-sorter"},"Filter and sorter"),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"filters")," to generate filter menu in columns, ",(0,r.kt)("inlineCode",{parentName:"p"},"onFilter")," to determine filtered result, and ",(0,r.kt)("inlineCode",{parentName:"p"},"filterMultiple")," to indicate whether it's multiple or single selection."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    filters: [\n      {\n        text: 'Joe',\n        value: 'Joe',\n      },\n      {\n        text: 'Jim',\n        value: 'Jim',\n      },\n      {\n        text: 'Submenu',\n        value: 'Submenu',\n        children: [\n          {\n            text: 'Green',\n            value: 'Green',\n          },\n          {\n            text: 'Black',\n            value: 'Black',\n          },\n        ],\n      },\n    ],\n    // specify the condition of filtering result\n    // here is that finding the name started with `value`\n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n    sorter: (a, b) => a.name.length - b.name.length,\n    sortDirections: ['descend'],\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    defaultSortOrder: 'descend',\n    sorter: (a, b) => a.age - b.age,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    filters: [\n      {\n        text: 'London',\n        value: 'London',\n      },\n      {\n        text: 'New York',\n        value: 'New York',\n      },\n    ],\n    filterMultiple: false,\n    onFilter: (value, record) => record.address.indexOf(value) === 0,\n    sorter: (a, b) => a.address.length - b.address.length,\n    sortDirections: ['descend', 'ascend'],\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park',\n  },\n];\n\nfunction onChange(pagination, filters, sorter, extra) {\n  console.log('params', pagination, filters, sorter, extra);\n}\n\nReactDOM.render(\n  <Table columns={columns} dataSource={data} onChange={onChange} />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"reset-filters-and-sorters"},"Reset filters and sorters"),(0,r.kt)("p",null,"Control filters and sorters by ",(0,r.kt)("inlineCode",{parentName:"p"},"filteredValue")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sortOrder"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park',\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    filteredInfo: null,\n    sortedInfo: null,\n  };\n\n  handleChange = (pagination, filters, sorter) => {\n    console.log('Various parameters', pagination, filters, sorter);\n    this.setState({\n      filteredInfo: filters,\n      sortedInfo: sorter,\n    });\n  };\n\n  clearFilters = () => {\n    this.setState({ filteredInfo: null });\n  };\n\n  clearAll = () => {\n    this.setState({\n      filteredInfo: null,\n      sortedInfo: null,\n    });\n  };\n\n  setAgeSort = () => {\n    this.setState({\n      sortedInfo: {\n        order: 'descend',\n        columnKey: 'age',\n      },\n    });\n  };\n\n  render() {\n    let { sortedInfo, filteredInfo } = this.state;\n    sortedInfo = sortedInfo || {};\n    filteredInfo = filteredInfo || {};\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        filters: [{ text: 'Joe', value: 'Joe' }, { text: 'Jim', value: 'Jim' }],\n        filteredValue: filteredInfo.name || null,\n        onFilter: (value, record) => record.name.includes(value),\n        sorter: (a, b) => a.name.length - b.name.length,\n        sortOrder: sortedInfo.columnKey === 'name' && sortedInfo.order,\n        ellipsis: true,\n      },\n      {\n        title: 'Age',\n        dataIndex: 'age',\n        key: 'age',\n        sorter: (a, b) => a.age - b.age,\n        sortOrder: sortedInfo.columnKey === 'age' && sortedInfo.order,\n        ellipsis: true,\n      },\n      {\n        title: 'Address',\n        dataIndex: 'address',\n        key: 'address',\n        filters: [{ text: 'London', value: 'London' }, { text: 'New York', value: 'New York' }],\n        filteredValue: filteredInfo.address || null,\n        onFilter: (value, record) => record.address.includes(value),\n        sorter: (a, b) => a.address.length - b.address.length,\n        sortOrder: sortedInfo.columnKey === 'address' && sortedInfo.order,\n        ellipsis: true,\n      },\n    ];\n    return (\n      <div>\n        <div className=\"table-operations\">\n          <Button onClick={this.setAgeSort}>Sort age</Button>\n          <Button onClick={this.clearFilters}>Clear filters</Button>\n          <Button onClick={this.clearAll}>Clear filters and sorters</Button>\n        </div>\n        <Table columns={columns} dataSource={data} onChange={this.handleChange} />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"customized-filter-panel"},"Customized filter panel"),(0,r.kt)("p",null,"Implement a customized column search example via ",(0,r.kt)("inlineCode",{parentName:"p"},"filterDropdown"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Joe Black',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n},\n  {\n    key: '3',\n    name: 'Jim Green',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 32,\n    address: 'London No. 2 Lake Park',\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    searchText: '',\n    searchedColumn: '',\n  };\n\n  getColumnSearchProps = (dataIndex) => ({\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters,\n    }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={(node) => {\n            this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={(e) =>\n            setSelectedKeys(e.target.value ? [e.target.value] : [])\n          }\n          onPressEnter={() =>\n            this.handleSearch(selectedKeys, confirm, dataIndex)\n          }\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Button\n          type=\"primary\"\n          onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\n          icon=\"search\"\n          size=\"small\"\n          style={{ width: 90, marginRight: 8 }}\n        >\n          Search\n        </Button>\n        <Button\n          onClick={() => this.handleReset(clearFilters)}\n          size=\"small\"\n          style={{ width: 90 }}\n        >\n          Reset\n        </Button>\n      </div>\n    ),\n    filterIcon: (filtered) => (\n      <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n    ),\n    onFilter: (value, record) =>\n      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),\n    onFilterDropdownVisibleChange: (visible) => {\n      if (visible) {\n        setTimeout(() => this.searchInput.select());\n      }\n    },\n    render: (text) =>\n      this.state.searchedColumn === dataIndex ? (\n        <Highlighter\n          highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n          searchWords={[this.state.searchText]}\n          autoEscape\n          textToHighlight={text.toString()}\n        />\n      ) : (\n        text\n      ),\n  });\n\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\n    confirm();\n    this.setState({\n      searchText: selectedKeys[0],\n      searchedColumn: dataIndex,\n    });\n  };\n\n  handleReset = (clearFilters) => {\n    clearFilters();\n    this.setState({ searchText: '' });\n  };\n\n  render() {\n    const columns = [\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n        width: '30%',\n        ...this.getColumnSearchProps('name'),\n      },\n      {\n        title: 'Age',\n        dataIndex: 'age',\n        key: 'age',\n        width: '20%',\n        ...this.getColumnSearchProps('age'),\n      },\n      {\n        title: 'Address',\n        dataIndex: 'address',\n        key: 'address',\n        ...this.getColumnSearchProps('address'),\n      },\n    ];\n    return <Table columns={columns} dataSource={data} />;\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"ajax"},"Ajax"),(0,r.kt)("p",null,"This example shows how to fetch and present data from a remote server, and how to implement filtering and sorting in server side by sending related parameters to server."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    sorter: true,\n    render: (name) => `${name.first} ${name.last}`,\n    width: '20%',\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    filters: [\n      { text: 'Male', value: 'male' },\n      { text: 'Female', value: 'female' },\n    ],\n    width: '20%',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n  },\n];\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    pagination: {},\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.fetch();\n  }\n\n  handleTableChange = (pagination, filters, sorter) => {\n    const pager = { ...this.state.pagination };\n    pager.current = pagination.current;\n    this.setState({\n      pagination: pager,\n    });\n    this.fetch({\n      results: pagination.pageSize,\n      page: pagination.current,\n      sortField: sorter.field,\n      sortOrder: sorter.order,\n      ...filters,\n    });\n  };\n\n  fetch = (params = {}) => {\n    console.log('params:', params);\n    this.setState({ loading: true });\n    axios({\n      url: 'https://randomuser.me/api',\n      method: 'get',\n      data: {\n        results: 10,\n        ...params,\n      },\n      type: 'json',\n    }).then(({ data }) => {\n      const pagination = { ...this.state.pagination };\n      // Read total count from server\n      // pagination.total = data.totalCount;\n      pagination.total = 200;\n      this.setState({\n        loading: false,\n        data: data.results,\n        pagination,\n      });\n    });\n  };\n\n  render() {\n    return (\n      <Table\n        columns={columns}\n        rowKey={(record) => record.login.uuid}\n        dataSource={this.state.data}\n        pagination={this.state.pagination}\n        loading={this.state.loading}\n        onChange={this.handleTableChange}\n      />\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"size"},"size"),(0,r.kt)("p",null,"There are two compacted table sizes: ",(0,r.kt)("inlineCode",{parentName:"p"},"middle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"small"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"small")," size is used in Modals only."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n];\n\nReactDOM.render(\n  <div>\n    <h4>Middle size table</h4>\n    <Table columns={columns} dataSource={data} size=\"middle\" />\n    <h4>Small size table</h4>\n    <Table columns={columns} dataSource={data} size=\"small\" />\n  </div>,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"border-title-and-footer"},"border, title and footer"),(0,r.kt)("p",null,"Add border, title and footer for table."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    render: text => <a>{text}</a>,\n  },\n  {\n    title: 'Cash Assets',\n    className: 'column-money',\n    dataIndex: 'money',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    money: '\uffe5300,000.00',\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    money: '\uffe51,256,000.00',\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    money: '\uffe5120,000.00',\n    address: 'Sidney No. 1 Lake Park',\n  },\n];\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    dataSource={data}\n    bordered\n    title={() => 'Header'}\n    footer={() => 'Footer'}\n  />,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"expandable-row"},"Expandable Row"),(0,r.kt)("p",null,"When there's too much information to show and the table can't display all at once."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  { title: 'Name', dataIndex: 'name', key: 'name' },\n  { title: 'Age', dataIndex: 'age', key: 'age' },\n  { title: 'Address', dataIndex: 'address', key: 'address' },\n  {\n    title: 'Action',\n    dataIndex: '',\n    key: 'x',\n    render: () => <a>Delete</a>,\n  },\n];\n\nconst data = [\n  {\n    key: 1,\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park',\n    description:\n      'My name is John Brown, I am 32 years old, living in New York No. 1 Lake Park.',\n  },\n  {\n    key: 2,\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park',\n    description:\n      'My name is Jim Green, I am 42 years old, living in London No. 1 Lake Park.',\n  },\n  {\n    key: 3,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n    description:\n      'My name is Joe Black, I am 32 years old, living in Sidney No. 1 Lake Park.',\n  },\n];\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    expandedRowRender={(record) => (\n      <p style={{ margin: 0 }}>{record.description}</p>\n    )}\n    dataSource={data}\n  />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"colspan-and-rowspan"},"colSpan and rowSpan"),(0,r.kt)("p",null,"Table column title supports ",(0,r.kt)("inlineCode",{parentName:"p"},"colSpan")," that set in ",(0,r.kt)("inlineCode",{parentName:"p"},"column"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"// In the fifth row, other columns are merged into first column\n// by setting it's colSpan to be 0\nconst renderContent = (value, row, index) => {\n  const obj = {\n    children: value,\n    props: {},\n  };\n  if (index === 4) {\n    obj.props.colSpan = 0;\n  }\n  return obj;\n};\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    render: (text, row, index) => {\n      if (index < 4) {\n        return <a>{text}</a>;\n      }\n      return {\n        children: <a>{text}</a>,\n        props: {\n          colSpan: 5,\n        },\n      };\n    },\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    render: renderContent,\n  },\n  {\n    title: 'Home phone',\n    colSpan: 2,\n    dataIndex: 'tel',\n    render: (value, row, index) => {\n      const obj = {\n        children: value,\n        props: {},\n      };\n      if (index === 2) {\n        obj.props.rowSpan = 2;\n      }\n      // These two are merged into above cell\n      if (index === 3) {\n        obj.props.rowSpan = 0;\n      }\n      if (index === 4) {\n        obj.props.colSpan = 0;\n      }\n      return obj;\n    },\n  },\n  {\n    title: 'Phone',\n    colSpan: 0,\n    dataIndex: 'phone',\n    render: renderContent,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    render: renderContent,\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    tel: '0571-22098909',\n    phone: 18889898989,\n    address: 'New York No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    tel: '0571-22098333',\n    phone: 18889898888,\n    age: 42,\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    tel: '0575-22098909',\n    phone: 18900010002,\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'Jim Red',\n    age: 18,\n    tel: '0575-22098909',\n    phone: 18900010002,\n    address: 'London No. 2 Lake Park',\n  },\n  {\n    key: '5',\n    name: 'Jake White',\n    age: 18,\n    tel: '0575-22098909',\n    phone: 18900010002,\n    address: 'Dublin No. 2 Lake Park',\n  },\n];\n\nReactDOM.render(\n  <Table columns={columns} dataSource={data} bordered />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"tree-data"},"Tree data"),(0,r.kt)("p",null,"Display tree structure data in Table when there is field key ",(0,r.kt)("inlineCode",{parentName:"p"},"children")," in dataSource, try to customize ",(0,r.kt)("inlineCode",{parentName:"p"},"childrenColumnName")," property to avoid tree table structure."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n    width: '12%',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    width: '30%',\n    key: 'address',\n  },\n];\n\nconst data = [\n  {\n    key: 1,\n    name: 'John Brown sr.',\n    age: 60,\n    address: 'New York No. 1 Lake Park',\n    children: [\n      {\n        key: 11,\n        name: 'John Brown',\n        age: 42,\n        address: 'New York No. 2 Lake Park',\n      },\n      {\n        key: 12,\n        name: 'John Brown jr.',\n        age: 30,\n        address: 'New York No. 3 Lake Park',\n        children: [\n          {\n            key: 121,\n            name: 'Jimmy Brown',\n            age: 16,\n            address: 'New York No. 3 Lake Park',\n          },\n        ],\n      },\n      {\n        key: 13,\n        name: 'Jim Green sr.',\n        age: 72,\n        address: 'London No. 1 Lake Park',\n        children: [\n          {\n            key: 131,\n            name: 'Jim Green',\n            age: 42,\n            address: 'London No. 2 Lake Park',\n            children: [\n              {\n                key: 1311,\n                name: 'Jim Green jr.',\n                age: 25,\n                address: 'London No. 3 Lake Park',\n              },\n              {\n                key: 1312,\n                name: 'Jimmy Green sr.',\n                age: 18,\n                address: 'London No. 4 Lake Park',\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    key: 2,\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park',\n  },\n];\n\n// rowSelection objects indicates the need for row selection\nconst rowSelection = {\n  onChange: (selectedRowKeys, selectedRows) => {\n    console.log(\n      `selectedRowKeys: ${selectedRowKeys}`,\n      'selectedRows: ',\n      selectedRows\n    );\n  },\n  onSelect: (record, selected, selectedRows) => {\n    console.log(record, selected, selectedRows);\n  },\n  onSelectAll: (selected, selectedRows, changeRows) => {\n    console.log(selected, selectedRows, changeRows);\n  },\n};\n\nReactDOM.render(\n  <Table columns={columns} rowSelection={rowSelection} dataSource={data} />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"fixed-header"},"Fixed Header"),(0,r.kt)("p",null,"Display large amounts of data in scrollable view."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    width: 150,\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    width: 150,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    dataSource={data}\n    pagination={{ pageSize: 50 }}\n    scroll={{ y: 240 }}\n  />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"fixed-columns"},"Fixed Columns"),(0,r.kt)("p",null,"To fix some columns and scroll inside other columns, and you must set ",(0,r.kt)("inlineCode",{parentName:"p"},"scroll.x")," meanwhile."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Full Name',\n    width: 100,\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left',\n  },\n  {\n    title: 'Age',\n    width: 100,\n    dataIndex: 'age',\n    key: 'age',\n    fixed: 'left',\n  },\n  { title: 'Column 1', dataIndex: 'address', key: '1' },\n  { title: 'Column 2', dataIndex: 'address', key: '2' },\n  { title: 'Column 3', dataIndex: 'address', key: '3' },\n  { title: 'Column 4', dataIndex: 'address', key: '4' },\n  { title: 'Column 5', dataIndex: 'address', key: '5' },\n  { title: 'Column 6', dataIndex: 'address', key: '6' },\n  { title: 'Column 7', dataIndex: 'address', key: '7' },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a>action</a>,\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 40,\n    address: 'London Park',\n  },\n];\n\nReactDOM.render(\n  <Table columns={columns} dataSource={data} scroll={{ x: 1300 }} />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"fixed-columns-and-header"},"Fixed Columns and Header"),(0,r.kt)("p",null,"A Solution for displaying large amounts of data with long columns."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Full Name',\n    width: 100,\n    dataIndex: 'name',\n    key: 'name',\n    fixed: 'left',\n  },\n  {\n    title: 'Age',\n    width: 100,\n    dataIndex: 'age',\n    key: 'age',\n    fixed: 'left',\n  },\n  {\n    title: 'Column 1',\n    dataIndex: 'address',\n    key: '1',\n    width: 150,\n  },\n  {\n    title: 'Column 2',\n    dataIndex: 'address',\n    key: '2',\n    width: 150,\n  },\n  {\n    title: 'Column 3',\n    dataIndex: 'address',\n    key: '3',\n    width: 150,\n  },\n  {\n    title: 'Column 4',\n    dataIndex: 'address',\n    key: '4',\n    width: 150,\n  },\n  {\n    title: 'Column 5',\n    dataIndex: 'address',\n    key: '5',\n    width: 150,\n  },\n  {\n    title: 'Column 6',\n    dataIndex: 'address',\n    key: '6',\n    width: 150,\n  },\n  {\n    title: 'Column 7',\n    dataIndex: 'address',\n    key: '7',\n    width: 150,\n  },\n  { title: 'Column 8', dataIndex: 'address', key: '8' },\n  {\n    title: 'Action',\n    key: 'operation',\n    fixed: 'right',\n    width: 100,\n    render: () => <a>action</a>,\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\n\nReactDOM.render(\n  <Table columns={columns} dataSource={data} scroll={{ x: 1500, y: 300 }} />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"grouping-table-head"},"Grouping table head"),(0,r.kt)("p",null,"Group table head with ",(0,r.kt)("inlineCode",{parentName:"p"},"columns\\[n].children"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    width: 100,\n    fixed: 'left',\n    filters: [\n      {\n        text: 'Joe',\n        value: 'Joe',\n      },\n      {\n        text: 'John',\n        value: 'John',\n      },\n    ],\n    onFilter: (value, record) => record.name.indexOf(value) === 0,\n  },\n  {\n    title: 'Other',\n    children: [\n      {\n        title: 'Age',\n        dataIndex: 'age',\n        key: 'age',\n        width: 150,\n        sorter: (a, b) => a.age - b.age,\n      },\n      {\n        title: 'Address',\n        children: [\n          {\n            title: 'Street',\n            dataIndex: 'street',\n            key: 'street',\n            width: 150,\n          },\n          {\n            title: 'Block',\n            children: [\n              {\n                title: 'Building',\n                dataIndex: 'building',\n                key: 'building',\n                width: 100,\n              },\n              {\n                title: 'Door No.',\n                dataIndex: 'number',\n                key: 'number',\n                width: 100,\n              },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    title: 'Company',\n    children: [\n      {\n        title: 'Company Address',\n        dataIndex: 'companyAddress',\n        key: 'companyAddress',\n        width: 200,\n      },\n      {\n        title: 'Company Name',\n        dataIndex: 'companyName',\n        key: 'companyName',\n      },\n    ],\n  },\n  {\n    title: 'Gender',\n    dataIndex: 'gender',\n    key: 'gender',\n    width: 80,\n    fixed: 'right',\n  },\n];\n\nconst data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i,\n    name: 'John Brown',\n    age: i + 1,\n    street: 'Lake Park',\n    building: 'C',\n    number: 2035,\n    companyAddress: 'Lake Street 42',\n    companyName: 'SoftLake Co',\n    gender: 'M',\n  });\n}\n\nReactDOM.render(\n  <Table\n    columns={columns}\n    dataSource={data}\n    bordered\n    size=\"middle\"\n    scroll={{ x: 'calc(700px + 50%)', y: 240 }}\n  />,\n  mountNode\n);\n")),(0,r.kt)("h3",{id:"editable-cells"},"Editable Cells"),(0,r.kt)("p",null,"Table with editable cells."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const EditableContext = React.createContext();\n\nconst EditableRow = ({ form, index, ...props }) => (\n  <EditableContext.Provider value={form}>\n    <tr {...props} />\n  </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n  state = {\n    editing: false,\n  };\n\n  toggleEdit = () => {\n    const editing = !this.state.editing;\n    this.setState({ editing }, () => {\n      if (editing) {\n        this.input.focus();\n      }\n    });\n  };\n\n  save = e => {\n    const { record, handleSave } = this.props;\n    this.form.validateFields((error, values) => {\n      if (error && error[e.currentTarget.id]) {\n        return;\n      }\n      this.toggleEdit();\n      handleSave({ ...record, ...values });\n    });\n  };\n\n  renderCell = form => {\n    this.form = form;\n    const { children, dataIndex, record, title } = this.props;\n    const { editing } = this.state;\n    return editing ? (\n      <Form.Item style={{ margin: 0 }}>\n        {form.getFieldDecorator(dataIndex, {\n          rules: [\n            {\n              required: true,\n              message: `${title} is required.`,\n            },\n          ],\n          initialValue: record[dataIndex],\n        })(<Input ref={node => (this.input = node)} onPressEnter={this.save} onBlur={this.save} />)}\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingRight: 24 }}\n        onClick={this.toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  };\n\n  render() {\n    const {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editable ? (\n          <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '30%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) =>\n          this.state.dataSource.length >= 1 ? (\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\n              <a>Delete</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n\n    this.state = {\n      dataSource: [\n        {\n          key: '0',\n          name: 'Edward King 0',\n          age: '32',\n          address: 'London, Park Lane no. 0',\n        },\n        {\n          key: '1',\n          name: 'Edward King 1',\n          age: '32',\n          address: 'London, Park Lane no. 1',\n        },\n      ],\n      count: 2,\n    };\n  }\n\n  handleDelete = key => {\n    const dataSource = [...this.state.dataSource];\n    this.setState({ dataSource: dataSource.filter(item => item.key !== key) });\n  };\n\n  handleAdd = () => {\n    const { count, dataSource } = this.state;\n    const newData = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: 32,\n      address: `London, Park Lane no. ${count}`,\n    };\n    this.setState({\n      dataSource: [...dataSource, newData],\n      count: count + 1,\n    });\n  };\n\n  handleSave = row => {\n    const newData = [...this.state.dataSource];\n    const index = newData.findIndex(item => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    this.setState({ dataSource: newData });\n  };\n\n  render() {\n    const { dataSource } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell,\n      },\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave,\n        }),\n      };\n    });\n    return (\n      <div>\n        <Button onClick={this.handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n          Add a row\n        </Button>\n        <Table\n          components={components}\n          rowClassName={() => 'editable-row'}\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<EditableTable />, mountNode);\n")),(0,r.kt)("h3",{id:"editable-rows"},"Editable Rows"),(0,r.kt)("p",null,"Table with editable rows."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const data = [];\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    name: `Edrward ${i}`,\n    age: 32,\n    address: `London Park no. ${i}`,\n  });\n}\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  getInput = () => {\n    if (this.props.inputType === 'number') {\n      return <InputNumber />;\n    }\n    return <Input />;\n  };\n\n  renderCell = ({ getFieldDecorator }) => {\n    const {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    } = this.props;\n    return (\n      <td {...restProps}>\n        {editing ? (\n          <Form.Item style={{ margin: 0 }}>\n            {getFieldDecorator(dataIndex, {\n              rules: [\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ],\n              initialValue: record[dataIndex],\n            })(this.getInput())}\n          </Form.Item>\n        ) : (\n          children\n        )}\n      </td>\n    );\n  };\n\n  render() {\n    return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n  }\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { data, editingKey: '' };\n    this.columns = [\n      {\n        title: 'name',\n        dataIndex: 'name',\n        width: '25%',\n        editable: true,\n      },\n      {\n        title: 'age',\n        dataIndex: 'age',\n        width: '15%',\n        editable: true,\n      },\n      {\n        title: 'address',\n        dataIndex: 'address',\n        width: '40%',\n        editable: true,\n      },\n      {\n        title: 'operation',\n        dataIndex: 'operation',\n        render: (text, record) => {\n          const { editingKey } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a\n                    onClick={() => this.save(form, record.key)}\n                    style={{ marginRight: 8 }}\n                  >\n                    Save\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"Sure to cancel?\" onConfirm={() => this.cancel(record.key)}>\n                <a>Cancel</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <a disabled={editingKey !== ''} onClick={() => this.edit(record.key)}>\n              Edit\n            </a>\n          );\n        },\n      },\n    ];\n  }\n\n  isEditing = record => record.key === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, {\n          ...item,\n          ...row,\n        });\n        this.setState({ data: newData, editingKey: '' });\n      } else {\n        newData.push(row);\n        this.setState({ data: newData, editingKey: '' });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({ editingKey: key });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <EditableContext.Provider value={this.props.form}>\n        <Table\n          components={components}\n          bordered\n          dataSource={this.state.data}\n          columns={columns}\n          rowClassName=\"editable-row\"\n          pagination={{\n            onChange: this.cancel,\n          }}\n        />\n      </EditableContext.Provider>\n    );\n  }\n}\n\nconst EditableFormTable = Form.create()(EditableTable);\n\nReactDOM.render(<EditableFormTable />, mountNode);\n")),(0,r.kt)("h3",{id:"nested-tables"},"Nested tables"),(0,r.kt)("p",null,"Showing more detailed info of every row."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const menu = (\n  <Menu>\n    <Menu.Item>Action 1</Menu.Item>\n    <Menu.Item>Action 2</Menu.Item>\n  </Menu>\n);\n\nfunction NestedTable() {\n  const expandedRowRender = () => {\n    const columns = [\n      { title: 'Date', dataIndex: 'date', key: 'date' },\n      { title: 'Name', dataIndex: 'name', key: 'name' },\n      {\n        title: 'Status',\n        key: 'state',\n        render: () => (\n          <span>\n            <Badge status=\"success\" />\n            Finished\n          </span>\n        ),\n      },\n      { title: 'Upgrade Status', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: () => (\n          <span className=\"table-operation\">\n            <a>Pause</a>\n            <a>Stop</a>\n            <Dropdown overlay={menu}>\n              <a>\n                More <Icon type=\"down\" />\n              </a>\n            </Dropdown>\n          </span>\n        ),\n      },\n    ];\n\n    const data = [];\n    for (let i = 0; i < 3; ++i) {\n      data.push({\n        key: i,\n        date: '2014-12-24 23:12:00',\n        name: 'This is production name',\n        upgradeNum: 'Upgraded: 56',\n      });\n    }\n    return <Table columns={columns} dataSource={data} pagination={false} />;\n  };\n\n  const columns = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Platform', dataIndex: 'platform', key: 'platform' },\n    { title: 'Version', dataIndex: 'version', key: 'version' },\n    { title: 'Upgraded', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n    { title: 'Creator', dataIndex: 'creator', key: 'creator' },\n    { title: 'Date', dataIndex: 'createdAt', key: 'createdAt' },\n    { title: 'Action', key: 'operation', render: () => <a>Publish</a> },\n  ];\n\n  const data = [];\n  for (let i = 0; i < 3; ++i) {\n    data.push({\n      key: i,\n      name: 'Screem',\n      platform: 'iOS',\n      version: '10.3.4.5654',\n      upgradeNum: 500,\n      creator: 'Jack',\n      createdAt: '2014-12-24 23:12:00',\n    });\n  }\n\n  return (\n    <Table\n      className=\"components-table-demo-nested\"\n      columns={columns}\n      expandedRowRender={expandedRowRender}\n      dataSource={data}\n    />\n  );\n}\n\nReactDOM.render(<NestedTable />, mountNode);\n")),(0,r.kt)("h3",{id:"drag-sorting"},"Drag sorting"),(0,r.kt)("p",null,"By using custom components, we can integrate table with react-dnd to implement drag sorting."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"let dragingIndex = -1;\n\nclass BodyRow extends React.Component {\n  render() {\n    const { isOver, connectDragSource, connectDropTarget, moveRow, ...restProps } = this.props;\n    const style = { ...restProps.style, cursor: 'move' };\n\n    let { className } = restProps;\n    if (isOver) {\n      if (restProps.index > dragingIndex) {\n        className += ' drop-over-downward';\n      }\n      if (restProps.index < dragingIndex) {\n        className += ' drop-over-upward';\n      }\n    }\n\n    return connectDragSource(\n      connectDropTarget(<tr {...restProps} className={className} style={style} />),\n    );\n  }\n}\n\nconst rowSource = {\n  beginDrag(props) {\n    dragingIndex = props.index;\n    return {\n      index: props.index,\n    };\n  },\n};\n\nconst rowTarget = {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.moveRow(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n};\n\nconst DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n}))(\n  DragSource('row', rowSource, connect => ({\n    connectDragSource: connect.dragSource(),\n  }))(BodyRow),\n);\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\nclass DragSortingTable extends React.Component {\n  state = {\n    data: [\n      {\n        key: '1',\n        name: 'John Brown',\n        age: 32,\n        address: 'New York No. 1 Lake Park',\n      },\n      {\n        key: '2',\n        name: 'Jim Green',\n        age: 42,\n        address: 'London No. 1 Lake Park',\n      },\n      {\n        key: '3',\n        name: 'Joe Black',\n        age: 32,\n        address: 'Sidney No. 1 Lake Park',\n      },\n    ],\n  };\n\n  components = {\n    body: {\n      row: DragableBodyRow,\n    },\n  };\n\n  moveRow = (dragIndex, hoverIndex) => {\n    const { data } = this.state;\n    const dragRow = data[dragIndex];\n\n    this.setState(\n      immutabilityHelper(this.state, {\n        data: {\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\n        },\n      }),\n    );\n  };\n\n  render() {\n    return (\n      <DndProvider backend={HTML5Backend}>\n        <Table\n          columns={columns}\n          dataSource={this.state.data}\n          components={this.components}\n          onRow={(record, index) => ({\n            index,\n            moveRow: this.moveRow,\n          })}\n        />\n      </DndProvider>\n    );\n  }\n}\n\nReactDOM.render(<DragSortingTable />, mountNode);\n")),(0,r.kt)("h3",{id:"resizable-column"},"Resizable column"),(0,r.kt)("p",null,"Implement resizable column by integrate with ","[","react-resizable]","(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/STRML/react-resizable"},"https://github.com/STRML/react-resizable"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const ResizeableTitle = props => {\n  const { onResize, width, ...restProps } = props;\n\n  if (!width) {\n    return <th {...restProps} />;\n  }\n\n  return (\n    <Resizable\n      width={width}\n      height={0}\n      onResize={onResize}\n      draggableOpts={{ enableUserSelectHack: false }}\n    >\n      <th {...restProps} />\n    </Resizable>\n  );\n};\n\nclass Demo extends React.Component {\n  state = {\n    columns: [\n      {\n        title: 'Date',\n        dataIndex: 'date',\n        width: 200,\n      },\n      {\n        title: 'Amount',\n        dataIndex: 'amount',\n        width: 100,\n      },\n      {\n        title: 'Type',\n        dataIndex: 'type',\n        width: 100,\n      },\n      {\n        title: 'Note',\n        dataIndex: 'note',\n        width: 100,\n      },\n      {\n        title: 'Action',\n        key: 'action',\n        render: () => <a>Delete</a>,\n      },\n    ],\n  };\n\n  components = {\n    header: {\n      cell: ResizeableTitle,\n    },\n  };\n\n  data = [\n    {\n      key: 0,\n      date: '2018-02-11',\n      amount: 120,\n      type: 'income',\n      note: 'transfer',\n    },\n    {\n      key: 1,\n      date: '2018-03-11',\n      amount: 243,\n      type: 'income',\n      note: 'transfer',\n    },\n    {\n      key: 2,\n      date: '2018-04-11',\n      amount: 98,\n      type: 'income',\n      note: 'transfer',\n    },\n  ];\n\n  handleResize = index => (e, { size }) => {\n    this.setState(({ columns }) => {\n      const nextColumns = [...columns];\n      nextColumns[index] = {\n        ...nextColumns[index],\n        width: size.width,\n      };\n      return { columns: nextColumns };\n    });\n  };\n\n  render() {\n    const columns = this.state.columns.map((col, index) => ({\n      ...col,\n      onHeaderCell: column => ({\n        width: column.width,\n        onResize: this.handleResize(index),\n      }),\n    }));\n\n    return <Table bordered components={this.components} columns={columns} dataSource={this.data} />;\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,r.kt)("h3",{id:"ellipsis-column"},"ellipsis column"),(0,r.kt)("p",null,"Ellipsize cell content via setting ",(0,r.kt)("inlineCode",{parentName:"p"},"column.ellipsis"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: (text) => <a>{text}</a>,\n    width: 150,\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n    width: 80,\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address 1',\n    ellipsis: true,\n  },\n  {\n    title: 'Long Column Long Column Long Column',\n    dataIndex: 'address',\n    key: 'address 2',\n    ellipsis: true,\n  },\n  {\n    title: 'Long Column Long Column',\n    dataIndex: 'address',\n    key: 'address 3',\n    ellipsis: true,\n  },\n  {\n    title: 'Long Column',\n    dataIndex: 'address',\n    key: 'address 4',\n    ellipsis: true,\n  },\n];\n\nconst data = [\n  {\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park, New York No. 1 Lake Park',\n    tags: ['nice', 'developer'],\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 2 Lake Park, London No. 2 Lake Park',\n    tags: ['loser'],\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park, Sidney No. 1 Lake Park',\n    tags: ['cool', 'teacher'],\n  },\n];\n\nReactDOM.render(<Table columns={columns} dataSource={data} />, mountNode);\n")),(0,r.kt)("h3",{id:"dynamic-settings"},"Dynamic Settings"),(0,r.kt)("p",null,"Select different settings to see the result."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const columns = [\n  {\n    title: \'Name\',\n    dataIndex: \'name\',\n    key: \'name\',\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: \'Age\',\n    dataIndex: \'age\',\n    key: \'age\',\n  },\n  {\n    title: \'Address\',\n    dataIndex: \'address\',\n    key: \'address\',\n  },\n  {\n    title: \'Action\',\n    key: \'action\',\n    render: (text, record) => (\n      <span>\n        <a>Action \u4e00 {record.name}</a>\n        <Divider type="vertical" />\n        <a>Delete</a>\n        <Divider type="vertical" />\n        <a className="ant-dropdown-link">\n          More actions <Icon type="down" />\n        </a>\n      </span>\n    ),\n  },\n];\n\nconst data = [];\nfor (let i = 1; i <= 10; i++) {\n  data.push({\n    key: i,\n    name: \'John Brown\',\n    age: `${i}2`,\n    address: `New York No. ${i} Lake Park`,\n    description: `My name is John Brown, I am ${i}2 years old, living in New York No. ${i} Lake Park.`,\n  });\n}\n\nconst expandedRowRender = (record) => <p>{record.description}</p>;\nconst title = () => \'Here is title\';\nconst showHeader = true;\nconst footer = () => \'Here is footer\';\nconst scroll = { y: 240 };\nconst pagination = { position: \'bottom\' };\n\nclass Demo extends React.Component {\n  state = {\n    bordered: false,\n    loading: false,\n    pagination,\n    size: \'default\',\n    expandedRowRender,\n    title: undefined,\n    showHeader,\n    footer,\n    rowSelection: {},\n    scroll: undefined,\n    hasData: true,\n    tableLayout: undefined,\n  };\n\n  handleToggle = (prop) => (enable) => {\n    this.setState({ [prop]: enable });\n  };\n\n  handleSizeChange = (e) => {\n    this.setState({ size: e.target.value });\n  };\n\n  handleTableLayoutChange = (e) => {\n    this.setState({ tableLayout: e.target.value });\n  };\n\n  handleExpandChange = (enable) => {\n    this.setState({\n      expandedRowRender: enable ? expandedRowRender : undefined,\n    });\n  };\n\n  handleEllipsisChange = (enable) => {\n    this.setState({ ellipsis: enable });\n  };\n\n  handleTitleChange = (enable) => {\n    this.setState({ title: enable ? title : undefined });\n  };\n\n  handleHeaderChange = (enable) => {\n    this.setState({ showHeader: enable ? showHeader : false });\n  };\n\n  handleFooterChange = (enable) => {\n    this.setState({ footer: enable ? footer : undefined });\n  };\n\n  handleRowSelectionChange = (enable) => {\n    this.setState({ rowSelection: enable ? {} : undefined });\n  };\n\n  handleScollChange = (enable) => {\n    this.setState({ scroll: enable ? scroll : undefined });\n  };\n\n  handleDataChange = (hasData) => {\n    this.setState({ hasData });\n  };\n\n  handlePaginationChange = (e) => {\n    const { value } = e.target;\n    this.setState({\n      pagination: value === \'none\' ? false : { position: value },\n    });\n  };\n\n  render() {\n    const { state } = this;\n    return (\n      <div>\n        <Form\n          layout="inline"\n          className="components-table-demo-control-bar"\n          style={{ marginBottom: 16 }}\n        >\n          <Form.Item label="Bordered">\n            <Switch\n              checked={state.bordered}\n              onChange={this.handleToggle(\'bordered\')}\n            />\n          </Form.Item>\n          <Form.Item label="loading">\n            <Switch\n              checked={state.loading}\n              onChange={this.handleToggle(\'loading\')}\n            />\n          </Form.Item>\n          <Form.Item label="Title">\n            <Switch checked={!!state.title} onChange={this.handleTitleChange} />\n          </Form.Item>\n          <Form.Item label="Column Header">\n            <Switch\n              checked={!!state.showHeader}\n              onChange={this.handleHeaderChange}\n            />\n          </Form.Item>\n          <Form.Item label="Footer">\n            <Switch\n              checked={!!state.footer}\n              onChange={this.handleFooterChange}\n            />\n          </Form.Item>\n          <Form.Item label="Expandable">\n            <Switch\n              checked={!!state.expandedRowRender}\n              onChange={this.handleExpandChange}\n            />\n          </Form.Item>\n          <Form.Item label="Checkbox">\n            <Switch\n              checked={!!state.rowSelection}\n              onChange={this.handleRowSelectionChange}\n            />\n          </Form.Item>\n          <Form.Item label="Fixed Header">\n            <Switch\n              checked={!!state.scroll}\n              onChange={this.handleScollChange}\n            />\n          </Form.Item>\n          <Form.Item label="Has Data">\n            <Switch\n              checked={!!state.hasData}\n              onChange={this.handleDataChange}\n            />\n          </Form.Item>\n          <Form.Item label="Ellipsis">\n            <Switch\n              checked={!!state.ellipsis}\n              onChange={this.handleEllipsisChange}\n            />\n          </Form.Item>\n          <Form.Item label="Size">\n            <Radio.Group value={state.size} onChange={this.handleSizeChange}>\n              <Radio.Button value="default">Default</Radio.Button>\n              <Radio.Button value="middle">Middle</Radio.Button>\n              <Radio.Button value="small">Small</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item label="Table Layout">\n            <Radio.Group\n              value={state.tableLayout}\n              onChange={this.handleTableLayoutChange}\n            >\n              <Radio.Button value={undefined}>Unset</Radio.Button>\n              <Radio.Button value="fixed">Fixed</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item label="Pagination">\n            <Radio.Group\n              value={state.pagination ? state.pagination.position : \'none\'}\n              onChange={this.handlePaginationChange}\n            >\n              <Radio.Button value="top">Top</Radio.Button>\n              <Radio.Button value="bottom">Bottom</Radio.Button>\n              <Radio.Button value="both">Both</Radio.Button>\n              <Radio.Button value="none">None</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n        </Form>\n        <Table\n          {...this.state}\n          columns={columns.map((item) => ({\n            ...item,\n            ellipsis: state.ellipsis,\n          }))}\n          dataSource={state.hasData ? data : null}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n')),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"table"},"Table"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tableLayout"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout"},"table-layout")," attribute of table element"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"'auto'"),(0,r.kt)("td",{parentName:"tr",align:null},"'fixed'"),(0,r.kt)("td",{parentName:"tr",align:null},"-",(0,r.kt)("hr",null),(0,r.kt)("inlineCode",{parentName:"td"},"fixed")," when header/columns are fixed, or using ",(0,r.kt)("inlineCode",{parentName:"td"},"column.ellipsis")),(0,r.kt)("td",{parentName:"tr",align:null},"3.24.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"bordered"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show all table borders"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"childrenColumnName"),(0,r.kt)("td",{parentName:"tr",align:null},"The column contains children to display"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"children"),(0,r.kt)("td",{parentName:"tr",align:null},"3.4.2"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"columns"),(0,r.kt)("td",{parentName:"tr",align:null},"Columns of table"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://git.io/JeKZW"},"ColumnProps"),"[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"components"),(0,r.kt)("td",{parentName:"tr",align:null},"Override default table elements"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://git.io/fANxz"},"TableComponents")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataSource"),(0,r.kt)("td",{parentName:"tr",align:null},"Data record array to be displayed"),(0,r.kt)("td",{parentName:"tr",align:null},"any","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultExpandAllRows"),(0,r.kt)("td",{parentName:"tr",align:null},"Expand all rows initially"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultExpandedRowKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial expanded row keys"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandedRowKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"Current expanded row keys"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandedRowRender"),(0,r.kt)("td",{parentName:"tr",align:null},"Expanded container render for each row"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record, index, indent, expanded):ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"Customize row expand Icon. Ref ",(0,r.kt)("a",{parentName:"td",href:"http://react-component.github.io/table/examples/expandIcon.html"},"example")),(0,r.kt)("td",{parentName:"tr",align:null},"Function(props):ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.3"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandRowByClick"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to expand row by clicking anywhere in the whole row"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"3.0.1"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"expandIconColumnIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"The index of ",(0,r.kt)("inlineCode",{parentName:"td"},"expandIcon")," which column will be inserted when ",(0,r.kt)("inlineCode",{parentName:"td"},"expandIconAsCell")," is false"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"footer"),(0,r.kt)("td",{parentName:"tr",align:null},"Table footer renderer"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(currentPageData)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"indentSize"),(0,r.kt)("td",{parentName:"tr",align:null},"Indent size in pixels of tree data"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"15"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loading"),(0,r.kt)("td",{parentName:"tr",align:null},"Loading status of table"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://ant.design/components/spin-cn/#API"},"object")," (",(0,r.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/4544#issuecomment-271533135"},"more"),")"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"locale"),(0,r.kt)("td",{parentName:"tr",align:null},"i18n text including filter, sort, empty text, etc"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"filterConfirm: 'Ok' /",(0,r.kt)("br",null)," filterReset: 'Reset' /",(0,r.kt)("br",null)," emptyText: 'No Data' /",(0,r.kt)("br",null)," ",(0,r.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/575#issuecomment-159169511"},"Default")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pagination"),(0,r.kt)("td",{parentName:"tr",align:null},"Config of pagination. You can ref table pagination ",(0,r.kt)("a",{parentName:"td",href:"#pagination"},"config")," or full ",(0,r.kt)("a",{parentName:"td",href:"/components/pagination/"},(0,r.kt)("inlineCode",{parentName:"a"},"pagination"))," document, hide it by setting it to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rowClassName"),(0,r.kt)("td",{parentName:"tr",align:null},"Row's className"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record, index):string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rowKey"),(0,r.kt)("td",{parentName:"tr",align:null},"Row's unique key, could be a string or function that returns a string"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record):string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"key")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rowSelection"),(0,r.kt)("td",{parentName:"tr",align:null},"Row selection ",(0,r.kt)("a",{parentName:"td",href:"#rowSelection"},"config")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"null"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scroll"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the table can be scrollable, ",(0,r.kt)("a",{parentName:"td",href:"#scroll"},"config")),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showHeader"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show table header"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"Size of table"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"middle")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"default")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"Table title renderer"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(currentPageData)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when pagination, filters or sorter is changed"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(pagination, filters, sorter, extra: { currentDataSource: ","[","] })"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onExpand"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when the row expand icon is clicked"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(expanded, record)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onExpandedRowsChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when the expanded rows change"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(expandedRows)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onHeaderRow"),(0,r.kt)("td",{parentName:"tr",align:null},"Set props on per header row"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(column, index)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onRow"),(0,r.kt)("td",{parentName:"tr",align:null},"Set props on per row"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record, index)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getPopupContainer"),(0,r.kt)("td",{parentName:"tr",align:null},"the render container of dropdowns in table"),(0,r.kt)("td",{parentName:"tr",align:null},"(triggerNode) => HTMLElement"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"() => TableHtmlElement")),(0,r.kt)("td",{parentName:"tr",align:null},"3.21.0"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h4",{id:"onrow-usage"},"onRow usage"),(0,r.kt)("p",null,"Same as ",(0,r.kt)("inlineCode",{parentName:"p"},"onRow")," ",(0,r.kt)("inlineCode",{parentName:"p"},"onHeaderRow")," ",(0,r.kt)("inlineCode",{parentName:"p"},"onCell")," ",(0,r.kt)("inlineCode",{parentName:"p"},"onHeaderCell")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"<Table\n  onRow={(record, rowIndex) => {\n    return {\n      onClick: (event) => {}, // click row\n      onDoubleClick: (event) => {}, // double click row\n      onContextMenu: (event) => {}, // right button click row\n      onMouseEnter: (event) => {}, // mouse enter row\n      onMouseLeave: (event) => {}, // mouse leave row\n    };\n  }}\n  onHeaderRow={(column) => {\n    return {\n      onClick: () => {}, // click header row\n    };\n  }}\n/>\n")),(0,r.kt)("h3",{id:"column"},"Column"),(0,r.kt)("p",null,"One of the Table ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," prop for describing the table's columns, Column has the same API."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"align"),(0,r.kt)("td",{parentName:"tr",align:null},"specify which way that column is aligned"),(0,r.kt)("td",{parentName:"tr",align:null},"'left'"),(0,r.kt)("td",{parentName:"tr",align:null},"'right'"),(0,r.kt)("td",{parentName:"tr",align:null},"'center'"),(0,r.kt)("td",{parentName:"tr",align:null},"'left'"),(0,r.kt)("td",{parentName:"tr",align:null},"3.3.2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ellipsis"),(0,r.kt)("td",{parentName:"tr",align:null},"ellipsize cell content, not working with sorter and filters for now.",(0,r.kt)("br",null),"tableLayout would be ",(0,r.kt)("inlineCode",{parentName:"td"},"fixed")," when ",(0,r.kt)("inlineCode",{parentName:"td"},"ellipsis")," is true."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.24.0"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"className"),(0,r.kt)("td",{parentName:"tr",align:null},"className of this column"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"colSpan"),(0,r.kt)("td",{parentName:"tr",align:null},"Span of this column's title"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dataIndex"),(0,r.kt)("td",{parentName:"tr",align:null},"Display field of the data record, could be set like ",(0,r.kt)("inlineCode",{parentName:"td"},"a.b.c"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"a[0].b.c[1]")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultFilteredValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Default filtered values"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultSortOrder"),(0,r.kt)("td",{parentName:"tr",align:null},"Default order of sorted values"),(0,r.kt)("td",{parentName:"tr",align:null},"'ascend'"),(0,r.kt)("td",{parentName:"tr",align:null},"'descend'"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterDropdown"),(0,r.kt)("td",{parentName:"tr",align:null},"Customized filter overlay"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"(props: ",(0,r.kt)("a",{parentName:"td",href:"https://git.io/fjP5h"},"FilterDropdownProps"),") => React.ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterDropdownVisible"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether ",(0,r.kt)("inlineCode",{parentName:"td"},"filterDropdown")," is visible"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filtered"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the ",(0,r.kt)("inlineCode",{parentName:"td"},"dataSource")," is filtered"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filteredValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Controlled filtered value, filter icon will highlight"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"Customized filter icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"(filtered: boolean) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterMultiple"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether multiple filters can be selected"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filters"),(0,r.kt)("td",{parentName:"tr",align:null},"Filter menu config"),(0,r.kt)("td",{parentName:"tr",align:null},"object","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fixed"),(0,r.kt)("td",{parentName:"tr",align:null},"Set column to be fixed: ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),"(same as left) ",(0,r.kt)("inlineCode",{parentName:"td"},"'left'")," ",(0,r.kt)("inlineCode",{parentName:"td"},"'right'")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique key of this column, you can ignore this prop if you've set a unique ",(0,r.kt)("inlineCode",{parentName:"td"},"dataIndex")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"render"),(0,r.kt)("td",{parentName:"tr",align:null},"Renderer of the table cell. The return value should be a ReactNode, or an object for ",(0,r.kt)("a",{parentName:"td",href:"#components-table-demo-colspan-rowspan"},"colSpan/rowSpan config")),(0,r.kt)("td",{parentName:"tr",align:null},"Function(text, record, index) {}"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sorter"),(0,r.kt)("td",{parentName:"tr",align:null},"Sort function for local sort, see ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"},"Array.sort"),"'s compareFunction. If you need sort buttons only, set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sortOrder"),(0,r.kt)("td",{parentName:"tr",align:null},"Order of sorted values: ",(0,r.kt)("inlineCode",{parentName:"td"},"'ascend'")," ",(0,r.kt)("inlineCode",{parentName:"td"},"'descend'")," ",(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sortDirections"),(0,r.kt)("td",{parentName:"tr",align:null},"supported sort way, could be ",(0,r.kt)("inlineCode",{parentName:"td"},"'ascend'"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"'descend'")),(0,r.kt)("td",{parentName:"tr",align:null},"Array"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"['ascend', 'descend']")),(0,r.kt)("td",{parentName:"tr",align:null},"3.15.2"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"Title of this column"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"({ sortOrder, sortColumn, filters }) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"width"),(0,r.kt)("td",{parentName:"tr",align:null},"Width of this column (",(0,r.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/13825#issuecomment-449889241"},"width not working?"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onCell"),(0,r.kt)("td",{parentName:"tr",align:null},"Set props on per cell"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record, rowIndex)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onFilter"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when the confirm filter button is clicked"),(0,r.kt)("td",{parentName:"tr",align:null},"Function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onFilterDropdownVisibleChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when ",(0,r.kt)("inlineCode",{parentName:"td"},"filterDropdownVisible")," is changed"),(0,r.kt)("td",{parentName:"tr",align:null},"function(visible) {}"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onHeaderCell"),(0,r.kt)("td",{parentName:"tr",align:null},"Set props on per header cell"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(column)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"columngroup"},"ColumnGroup"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},"Title of the column group"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"pagination"},"pagination"),(0,r.kt)("p",null,"Properties for pagination."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"position"),(0,r.kt)("td",{parentName:"tr",align:null},"specify the position of ",(0,r.kt)("inlineCode",{parentName:"td"},"Pagination")),(0,r.kt)("td",{parentName:"tr",align:null},"'top'"),(0,r.kt)("td",{parentName:"tr",align:null},"'bottom'"),(0,r.kt)("td",{parentName:"tr",align:null},"'both'"),(0,r.kt)("td",{parentName:"tr",align:null},"'bottom'"),(0,r.kt)("td",{parentName:"tr",align:null},"3.3.0")))),(0,r.kt)("p",null,"More about pagination, please check ",(0,r.kt)("a",{parentName:"p",href:"/components/pagination/"},(0,r.kt)("inlineCode",{parentName:"a"},"Pagination")),"."),(0,r.kt)("h3",{id:"rowselection"},"rowSelection"),(0,r.kt)("p",null,"Properties for row selection."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"columnWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the width of the selection column"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"60px")),(0,r.kt)("td",{parentName:"tr",align:null},"3.3.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"columnTitle"),(0,r.kt)("td",{parentName:"tr",align:null},"Set the title of the selection column"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.8.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fixed"),(0,r.kt)("td",{parentName:"tr",align:null},"Fixed selection column on the left"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getCheckboxProps"),(0,r.kt)("td",{parentName:"tr",align:null},"Get Checkbox or Radio props"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"hideDefaultSelections"),(0,r.kt)("td",{parentName:"tr",align:null},"Remove the default ",(0,r.kt)("inlineCode",{parentName:"td"},"Select All")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"Select Invert")," selections when ",(0,r.kt)("a",{parentName:"td",href:"#components-table-demo-row-selection-custom"},"custom selection")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"false")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selectedRowKeys"),(0,r.kt)("td",{parentName:"tr",align:null},"Controlled selected row keys"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"number","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"[","]"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"selections"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom selection ",(0,r.kt)("a",{parentName:"td",href:"#rowSelection"},"config"),", only displays default selections when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")),(0,r.kt)("td",{parentName:"tr",align:null},"object","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"type"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"checkbox")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"radio")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"checkbox")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"radio")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"checkbox")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when selected rows change"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(selectedRowKeys, selectedRows)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when select/deselect one row"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(record, selected, selectedRows, nativeEvent)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelectAll"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when select/deselect all rows"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(selected, selectedRows, changeRows)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelectInvert"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when row selection is inverted"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(selectedRows)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"scroll"},"scroll"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"x"),(0,r.kt)("td",{parentName:"tr",align:null},"Set horizontal scrolling, can also be used to specify the width and height of the scroll area, could be number, percent value, true and ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content"},"'max-content'")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"y"),(0,r.kt)("td",{parentName:"tr",align:null},"Set vertical scrolling, can also be used to specify the width and height of the scroll area, could be number, percent value, true and ",(0,r.kt)("a",{parentName:"td",href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/width#max-content"},"'max-content'")),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"scrollToFirstRowOnChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to scroll to the top of the table when paging, sorting, filtering changes"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.24.0"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"selection-1"},"selection"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"Unique key of this selection"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"text"),(0,r.kt)("td",{parentName:"tr",align:null},"Display text of this selection"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"React.ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback executed when this selection is clicked"),(0,r.kt)("td",{parentName:"tr",align:null},"Function(changeableRowKeys)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"using-in-typescript"},"Using in TypeScript"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\n\ninterface User {\n  key: number,\n  name: string;\n}\n\nconst columns: ColumnProps<User>[] = [{\n  key: 'name',\n  title: 'Name',\n  dataIndex: 'name',\n}];\n\nconst data: User[] = [{\n  key: 0,\n  name: 'Jack',\n}];\n\nclass UserTable extends Table<User> {}\n\n<UserTable columns={columns} dataSource={data} />\n\n// Use JSX style API\nclass NameColumn extends Table.Column<User> {}\n\n<UserTable dataSource={data}>\n  <NameColumn key=\"name\" title=\"Name\" dataIndex=\"name\" />\n</UserTable>\n\n// after TypeScript 2.9 can write like this\n// https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html#generic-type-arguments-in-jsx-elements\n<Table<User> columns={columns} dataSource={data} />\n<Table<User> dataSource={data}>\n  <Table.Column<User> key=\"name\" title=\"Name\" dataIndex=\"name\" />\n</Table>\n")),(0,r.kt)("h2",{id:"note"},"Note"),(0,r.kt)("p",null,"According to the ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/react/docs/lists-and-keys.html#keys"},"React documentation"),", every child in an array should be assigned a unique key. The values inside the Table's ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"columns")," should follow this rule. By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource[i].key")," will be treated as the key value for ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource"),"."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://os.alipayobjects.com/rmsportal/luLdLvhPOiRpyss.png",alt:"console warning"})),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"dataSource[i].key")," is not provided, then you should specify the primary key of dataSource value via ",(0,r.kt)("inlineCode",{parentName:"p"},"rowKey"),", as shown below. If not, warnings like the one above will show in browser console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'// primary key is uid\nreturn <Table rowKey="uid" />;\n// or\nreturn <Table rowKey={(record) => record.uid} />;\n')))}u.isMDXComponent=!0},30876:(n,e,t)=>{t.d(e,{Zo:()=>m,kt:()=>c});var a=t(2784);function l(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function d(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){l(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,a,l=function(n,e){if(null==n)return{};var t,a,l={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(l[t]=n[t]);return l}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(l[t]=n[t])}return l}var i=a.createContext({}),s=function(n){var e=a.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):d(d({},e),n)),t},m=function(n){var e=s(n.components);return a.createElement(i.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(n,e){var t=n.components,l=n.mdxType,r=n.originalType,i=n.parentName,m=o(n,["components","mdxType","originalType","parentName"]),u=s(t),c=l,k=u["".concat(i,".").concat(c)]||u[c]||p[c]||r;return t?a.createElement(k,d(d({ref:e},m),{},{components:t})):a.createElement(k,d({ref:e},m))}));function c(n,e){var t=arguments,l=e&&e.mdxType;if("string"==typeof n||l){var r=t.length,d=new Array(r);d[0]=u;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=n,o.mdxType="string"==typeof n?n:l,d[1]=o;for(var s=2;s<r;s++)d[s]=t[s];return a.createElement.apply(null,d)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);