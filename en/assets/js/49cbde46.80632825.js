"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7897],{13486:(e,t,n)=>{n.r(t),n.d(t,{frontMatter:()=>i,contentTitle:()=>m,metadata:()=>s,toc:()=>d,default:()=>u});var a=n(7896),r=n(31461),l=(n(2784),n(30876)),o=["components"],i={tags:["Components"],type:"Data Entry",cols:1,title:"Form"},m=void 0,s={unversionedId:"components/data-entry/form",id:"components/data-entry/form",isDocsHomePage:!1,title:"Form",description:"--------",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/form.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/form",permalink:"/tnt-next/en/docs/components/data-entry/form",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/form.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",cols:1,title:"Form"},sidebar:"componentsSidebar",previous:{title:"DatePicker",permalink:"/tnt-next/en/docs/components/data-entry/date-picker"},next:{title:"InputNumber",permalink:"/tnt-next/en/docs/components/data-entry/input-number"}},d=[{value:"When to use",id:"when-to-use",children:[],level:2},{value:"Form Component",id:"form-component",children:[],level:2},{value:"Form Item Component",id:"form-item-component",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Inline Login Form",id:"inline-login-form",children:[],level:3},{value:"Login Form",id:"login-form",children:[],level:3},{value:"Registration",id:"registration",children:[],level:3},{value:"Advanced search",id:"advanced-search",children:[],level:3},{value:"Dynamic Form Item",id:"dynamic-form-item",children:[],level:3},{value:"Time-related Controls",id:"time-related-controls",children:[],level:3},{value:"Customized Form Controls",id:"customized-form-controls",children:[],level:3},{value:"Store Form Data into Upper Component",id:"store-form-data-into-upper-component",children:[],level:3},{value:"Handle Form Data Manually",id:"handle-form-data-manually",children:[],level:3},{value:"Customized Validation",id:"customized-validation",children:[],level:3},{value:"Coordinated Controls",id:"coordinated-controls",children:[],level:3},{value:"Form Layout",id:"form-layout",children:[],level:3},{value:"Dynamic Rules",id:"dynamic-rules",children:[],level:3},{value:"Other Form Controls",id:"other-form-controls",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Form",id:"form",children:[],level:3},{value:"Form.create(options)",id:"formcreateoptions",children:[],level:3},{value:"validateFields/validateFieldsAndScroll",id:"validatefieldsvalidatefieldsandscroll",children:[{value:"Callback arguments example of validateFields",id:"callback-arguments-example-of-validatefields",children:[],level:4}],level:3},{value:"Form.createFormField",id:"formcreateformfield",children:[],level:3},{value:"this.props.form.getFieldDecorator(id, options)",id:"thispropsformgetfielddecoratorid-options",children:[{value:"Special attention",id:"special-attention",children:[],level:4},{value:"getFieldDecorator(id, options) parameters",id:"getfielddecoratorid-options-parameters",children:[],level:4}],level:3},{value:"Form.Item",id:"formitem",children:[],level:3},{value:"Validation Rules",id:"validation-rules",children:[],level:3}],level:2},{value:"Using in TypeScript",id:"using-in-typescript",children:[],level:2},{value:"FAQ",id:"faq",children:[{value:"Customize validator do not working",id:"customize-validator-do-not-working",children:[],level:3},{value:"Get form instance from function component",id:"get-form-instance-from-function-component",children:[],level:3}],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("hr",null),(0,l.kt)("p",null,"Form is used to collect, validate, and submit the user input, usually contains various form items including checkbox, radio, input, select, and etc."),(0,l.kt)("h2",{id:"when-to-use"},"When to use"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"When you need to create a instance or collect information."),(0,l.kt)("li",{parentName:"ul"},"When you need to validate fields in certain rules.")),(0,l.kt)("h2",{id:"form-component"},"Form Component"),(0,l.kt)("p",null,"You can align the controls of a ",(0,l.kt)("inlineCode",{parentName:"p"},"form")," using the ",(0,l.kt)("inlineCode",{parentName:"p"},"layout")," prop\uff1a"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"horizontal"),"\uff1ato horizontally align the ",(0,l.kt)("inlineCode",{parentName:"li"},"label"),"s and controls of the fields. (Default)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"vertical"),"\uff1ato vertically align the ",(0,l.kt)("inlineCode",{parentName:"li"},"label"),"s and controls of the fields."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"inline"),"\uff1ato render form fields in one line.")),(0,l.kt)("h2",{id:"form-item-component"},"Form Item Component"),(0,l.kt)("p",null,"A form consists of one or more form fields whose type includes input, textarea, checkbox, radio, select, tag, and more. A form field is defined using ",(0,l.kt)("inlineCode",{parentName:"p"},"<Form.Item />"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"<Form.Item {...props}>{children}</Form.Item>\n")),(0,l.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,l.kt)("h3",{id:"inline-login-form"},"Inline Login Form"),(0,l.kt)("p",null,"Inline login form is often used in navigation bar."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass HorizontalLoginForm extends React.Component {\n  componentDidMount() {\n    // To disable submit button at the beginning.\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n\n    // Only show error after a field is touched.\n    const usernameError = isFieldTouched('username') && getFieldError('username');\n    const passwordError = isFieldTouched('password') && getFieldError('password');\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n          {getFieldDecorator('username', {\n            rules: [{ required: true, message: 'Please input your username!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder=\"Username\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item validateStatus={passwordError ? 'error' : ''} help={passwordError || ''}>\n          {getFieldDecorator('password', {\n            rules: [{ required: true, message: 'Please input your Password!' }],\n          })(\n            <Input\n              prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n              type=\"password\"\n              placeholder=\"Password\"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n            Log in\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedHorizontalLoginForm = Form.create({ name: 'horizontal_login' })(HorizontalLoginForm);\n\nReactDOM.render(<WrappedHorizontalLoginForm />, mountNode);\n")),(0,l.kt)("h3",{id:"login-form"},"Login Form"),(0,l.kt)("p",null,"Normal login form which can contain more elements."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class NormalLoginForm extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(\'Received values of form: \', values);\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form onSubmit={this.handleSubmit} className="login-form">\n        <Form.Item>\n          {getFieldDecorator(\'username\', {\n            rules: [{ required: true, message: \'Please input your username!\' }],\n          })(\n            <Input\n              prefix={<Icon type="user" style={{ color: \'rgba(0,0,0,.25)\' }} />}\n              placeholder="Username"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator(\'password\', {\n            rules: [{ required: true, message: \'Please input your Password!\' }],\n          })(\n            <Input\n              prefix={<Icon type="lock" style={{ color: \'rgba(0,0,0,.25)\' }} />}\n              type="password"\n              placeholder="Password"\n            />,\n          )}\n        </Form.Item>\n        <Form.Item>\n          {getFieldDecorator(\'remember\', {\n            valuePropName: \'checked\',\n            initialValue: true,\n          })(<Checkbox>Remember me</Checkbox>)}\n          <a className="login-form-forgot" href="">\n            Forgot password\n          </a>\n          <Button type="primary" htmlType="submit" className="login-form-button">\n            Log in\n          </Button>\n          Or <a href="">register now!</a>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedNormalLoginForm = Form.create({ name: \'normal_login\' })(NormalLoginForm);\n\nReactDOM.render(<WrappedNormalLoginForm />, mountNode);\n')),(0,l.kt)("h3",{id:"registration"},"Registration"),(0,l.kt)("p",null,"Fill in this form to create a new account for you."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\nconst AutoCompleteOption = AutoComplete.Option;\n\nconst residences = [\n  {\n    value: 'zhejiang',\n    label: 'Zhejiang',\n    children: [\n      {\n        value: 'hangzhou',\n        label: 'Hangzhou',\n        children: [\n          {\n            value: 'xihu',\n            label: 'West Lake',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    value: 'jiangsu',\n    label: 'Jiangsu',\n    children: [\n      {\n        value: 'nanjing',\n        label: 'Nanjing',\n        children: [\n          {\n            value: 'zhonghuamen',\n            label: 'Zhong Hua Men',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n    autoCompleteResult: [],\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleConfirmBlur = e => {\n    const { value } = e.target;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  };\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  };\n\n  validateToNextPassword = (rule, value, callback) => {\n    const { form } = this.props;\n    if (value && this.state.confirmDirty) {\n      form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  };\n\n  handleWebsiteChange = value => {\n    let autoCompleteResult;\n    if (!value) {\n      autoCompleteResult = [];\n    } else {\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\n    }\n    this.setState({ autoCompleteResult });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const { autoCompleteResult } = this.state;\n\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0,\n        },\n        sm: {\n          span: 16,\n          offset: 8,\n        },\n      },\n    };\n    const prefixSelector = getFieldDecorator('prefix', {\n      initialValue: '86',\n    })(\n      <Select style={{ width: 70 }}>\n        <Option value=\"86\">+86</Option>\n        <Option value=\"87\">+87</Option>\n      </Select>,\n    );\n\n    const websiteOptions = autoCompleteResult.map(website => (\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\n    ));\n\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item label=\"E-mail\">\n          {getFieldDecorator('email', {\n            rules: [\n              {\n                type: 'email',\n                message: 'The input is not valid E-mail!',\n              },\n              {\n                required: true,\n                message: 'Please input your E-mail!',\n              },\n            ],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Password\" hasFeedback>\n          {getFieldDecorator('password', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your password!',\n              },\n              {\n                validator: this.validateToNextPassword,\n              },\n            ],\n          })(<Input.Password />)}\n        </Form.Item>\n        <Form.Item label=\"Confirm Password\" hasFeedback>\n          {getFieldDecorator('confirm', {\n            rules: [\n              {\n                required: true,\n                message: 'Please confirm your password!',\n              },\n              {\n                validator: this.compareToFirstPassword,\n              },\n            ],\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        </Form.Item>\n        <Form.Item\n          label={\n            <span>\n              Nickname&nbsp;\n              <Tooltip title=\"What do you want others to call you?\">\n                <Icon type=\"question-circle-o\" />\n              </Tooltip>\n            </span>\n          }\n        >\n          {getFieldDecorator('nickname', {\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Habitual Residence\">\n          {getFieldDecorator('residence', {\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n            rules: [\n              { type: 'array', required: true, message: 'Please select your habitual residence!' },\n            ],\n          })(<Cascader options={residences} />)}\n        </Form.Item>\n        <Form.Item label=\"Phone Number\">\n          {getFieldDecorator('phone', {\n            rules: [{ required: true, message: 'Please input your phone number!' }],\n          })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\n        </Form.Item>\n        <Form.Item label=\"Website\">\n          {getFieldDecorator('website', {\n            rules: [{ required: true, message: 'Please input website!' }],\n          })(\n            <AutoComplete\n              dataSource={websiteOptions}\n              onChange={this.handleWebsiteChange}\n              placeholder=\"website\"\n            >\n              <Input />\n            </AutoComplete>,\n          )}\n        </Form.Item>\n        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\n          <Row gutter={8}>\n            <Col span={12}>\n              {getFieldDecorator('captcha', {\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\n              })(<Input />)}\n            </Col>\n            <Col span={12}>\n              <Button>Get captcha</Button>\n            </Col>\n          </Row>\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          {getFieldDecorator('agreement', {\n            valuePropName: 'checked',\n          })(\n            <Checkbox>\n              I have read the <a href=\"\">agreement</a>\n            </Checkbox>,\n          )}\n        </Form.Item>\n        <Form.Item {...tailFormItemLayout}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Register\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\n\nReactDOM.render(<WrappedRegistrationForm />, mountNode);\n")),(0,l.kt)("h3",{id:"advanced-search"},"Advanced search"),(0,l.kt)("p",null,"Three columns layout is often used for advanced searching of data table."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const CollectionCreateForm = Form.create({ name: \'form_in_modal\' })(\n  // eslint-disable-next-line\n  class extends React.Component {\n    render() {\n      const { visible, onCancel, onCreate, form } = this.props;\n      const { getFieldDecorator } = form;\n      return (\n        <Modal\n          visible={visible}\n          title="Create a new collection"\n          okText="Create"\n          onCancel={onCancel}\n          onOk={onCreate}\n        >\n          <Form layout="vertical">\n            <Form.Item label="Title">\n              {getFieldDecorator(\'title\', {\n                rules: [{ required: true, message: \'Please input the title of collection!\' }],\n              })(<Input />)}\n            </Form.Item>\n            <Form.Item label="Description">\n              {getFieldDecorator(\'description\')(<Input type="textarea" />)}\n            </Form.Item>\n            <Form.Item className="collection-create-form_last-form-item">\n              {getFieldDecorator(\'modifier\', {\n                initialValue: \'public\',\n              })(\n                <Radio.Group>\n                  <Radio value="public">Public</Radio>\n                  <Radio value="private">Private</Radio>\n                </Radio.Group>,\n              )}\n            </Form.Item>\n          </Form>\n        </Modal>\n      );\n    }\n  },\n);\n\nclass CollectionsPage extends React.Component {\n  state = {\n    visible: false,\n  };\n\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n\n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n\n  handleCreate = () => {\n    const { form } = this.formRef.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n\n      console.log(\'Received values of form: \', values);\n      form.resetFields();\n      this.setState({ visible: false });\n    });\n  };\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  render() {\n    return (\n      <div>\n        <Button type="primary" onClick={this.showModal}>\n          New Collection\n        </Button>\n        <CollectionCreateForm\n          wrappedComponentRef={this.saveFormRef}\n          visible={this.state.visible}\n          onCancel={this.handleCancel}\n          onCreate={this.handleCreate}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<CollectionsPage />, mountNode);\n')),(0,l.kt)("h3",{id:"dynamic-form-item"},"Dynamic Form Item"),(0,l.kt)("p",null,"Add or remove form items dynamically."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"let id = 0;\n\nclass DynamicFieldSet extends React.Component {\n  remove = k => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    // We need at least one passenger\n    if (keys.length === 1) {\n      return;\n    }\n\n    // can use data-binding to set\n    form.setFieldsValue({\n      keys: keys.filter(key => key !== k),\n    });\n  };\n\n  add = () => {\n    const { form } = this.props;\n    // can use data-binding to get\n    const keys = form.getFieldValue('keys');\n    const nextKeys = keys.concat(id++);\n    // can use data-binding to set\n    // important! notify form to detect changes\n    form.setFieldsValue({\n      keys: nextKeys,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        const { keys, names } = values;\n        console.log('Received values of form: ', values);\n        console.log('Merged values:', keys.map(key => names[key]));\n      }\n    });\n  };\n\n  render() {\n    const { getFieldDecorator, getFieldValue } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 4 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 20 },\n      },\n    };\n    const formItemLayoutWithOutLabel = {\n      wrapperCol: {\n        xs: { span: 24, offset: 0 },\n        sm: { span: 20, offset: 4 },\n      },\n    };\n    getFieldDecorator('keys', { initialValue: [] });\n    const keys = getFieldValue('keys');\n    const formItems = keys.map((k, index) => (\n      <Form.Item\n        {...(index === 0 ? formItemLayout : formItemLayoutWithOutLabel)}\n        label={index === 0 ? 'Passengers' : ''}\n        required={false}\n        key={k}\n      >\n        {getFieldDecorator(`names[${k}]`, {\n          validateTrigger: ['onChange', 'onBlur'],\n          rules: [\n            {\n              required: true,\n              whitespace: true,\n              message: \"Please input passenger's name or delete this field.\",\n            },\n          ],\n        })(<Input placeholder=\"passenger name\" style={{ width: '60%', marginRight: 8 }} />)}\n        {keys.length > 1 ? (\n          <Icon\n            className=\"dynamic-delete-button\"\n            type=\"minus-circle-o\"\n            onClick={() => this.remove(k)}\n          />\n        ) : null}\n      </Form.Item>\n    ));\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        {formItems}\n        <Form.Item {...formItemLayoutWithOutLabel}>\n          <Button type=\"dashed\" onClick={this.add} style={{ width: '60%' }}>\n            <Icon type=\"plus\" /> Add field\n          </Button>\n        </Form.Item>\n        <Form.Item {...formItemLayoutWithOutLabel}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDynamicFieldSet = Form.create({ name: 'dynamic_form_item' })(DynamicFieldSet);\nReactDOM.render(<WrappedDynamicFieldSet />, mountNode);\n")),(0,l.kt)("h3",{id:"time-related-controls"},"Time-related Controls"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," of time-related components is a ",(0,l.kt)("inlineCode",{parentName:"p"},"moment")," object, which we need to pre-process it before we submit to server."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { MonthPicker, RangePicker } = DatePicker;\n\nclass TimeRelatedForm extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.form.validateFields((err, fieldsValue) => {\n      if (err) {\n        return;\n      }\n\n      // Should format date value before submit.\n      const rangeValue = fieldsValue['range-picker'];\n      const rangeTimeValue = fieldsValue['range-time-picker'];\n      const values = {\n        ...fieldsValue,\n        'date-picker': fieldsValue['date-picker'].format('YYYY-MM-DD'),\n        'date-time-picker': fieldsValue['date-time-picker'].format('YYYY-MM-DD HH:mm:ss'),\n        'month-picker': fieldsValue['month-picker'].format('YYYY-MM'),\n        'range-picker': [rangeValue[0].format('YYYY-MM-DD'), rangeValue[1].format('YYYY-MM-DD')],\n        'range-time-picker': [\n          rangeTimeValue[0].format('YYYY-MM-DD HH:mm:ss'),\n          rangeTimeValue[1].format('YYYY-MM-DD HH:mm:ss'),\n        ],\n        'time-picker': fieldsValue['time-picker'].format('HH:mm:ss'),\n      };\n      console.log('Received values of form: ', values);\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: {\n        xs: { span: 24 },\n        sm: { span: 8 },\n      },\n      wrapperCol: {\n        xs: { span: 24 },\n        sm: { span: 16 },\n      },\n    };\n    const config = {\n      rules: [{ type: 'object', required: true, message: 'Please select time!' }],\n    };\n    const rangeConfig = {\n      rules: [{ type: 'array', required: true, message: 'Please select time!' }],\n    };\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item label=\"DatePicker\">\n          {getFieldDecorator('date-picker', config)(<DatePicker />)}\n        </Form.Item>\n        <Form.Item label=\"DatePicker[showTime]\">\n          {getFieldDecorator('date-time-picker', config)(\n            <DatePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />,\n          )}\n        </Form.Item>\n        <Form.Item label=\"MonthPicker\">\n          {getFieldDecorator('month-picker', config)(<MonthPicker />)}\n        </Form.Item>\n        <Form.Item label=\"RangePicker\">\n          {getFieldDecorator('range-picker', rangeConfig)(<RangePicker />)}\n        </Form.Item>\n        <Form.Item label=\"RangePicker[showTime]\">\n          {getFieldDecorator('range-time-picker', rangeConfig)(\n            <RangePicker showTime format=\"YYYY-MM-DD HH:mm:ss\" />,\n          )}\n        </Form.Item>\n        <Form.Item label=\"TimePicker\">\n          {getFieldDecorator('time-picker', config)(<TimePicker />)}\n        </Form.Item>\n        <Form.Item\n          wrapperCol={{\n            xs: { span: 24, offset: 0 },\n            sm: { span: 16, offset: 8 },\n          }}\n        >\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedTimeRelatedForm = Form.create({ name: 'time_related_controls' })(TimeRelatedForm);\n\nReactDOM.render(<WrappedTimeRelatedForm />, mountNode);\n")),(0,l.kt)("h3",{id:"customized-form-controls"},"Customized Form Controls"),(0,l.kt)("p",null,"Customized or third-party form controls can be used in Form, too. Controls must follow these conventions:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\n\nclass PriceInput extends React.Component {\n  handleNumberChange = e => {\n    const number = parseInt(e.target.value || 0, 10);\n    if (isNaN(number)) {\n      return;\n    }\n    this.triggerChange({ number });\n  };\n\n  handleCurrencyChange = currency => {\n    this.triggerChange({ currency });\n  };\n\n  triggerChange = changedValue => {\n    const { onChange, value } = this.props;\n    if (onChange) {\n      onChange({\n        ...value,\n        ...changedValue,\n      });\n    }\n  };\n\n  render() {\n    const { size, value } = this.props;\n    return (\n      <span>\n        <Input\n          type=\"text\"\n          size={size}\n          value={value.number}\n          onChange={this.handleNumberChange}\n          style={{ width: '65%', marginRight: '3%' }}\n        />\n        <Select\n          value={value.currency}\n          size={size}\n          style={{ width: '32%' }}\n          onChange={this.handleCurrencyChange}\n        >\n          <Option value=\"rmb\">RMB</Option>\n          <Option value=\"dollar\">Dollar</Option>\n        </Select>\n      </span>\n    );\n  }\n}\n\nclass Demo extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  checkPrice = (rule, value, callback) => {\n    if (value.number > 0) {\n      return callback();\n    }\n    callback('Price must greater than zero!');\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form layout=\"inline\" onSubmit={this.handleSubmit}>\n        <Form.Item label=\"Price\">\n          {getFieldDecorator('price', {\n            initialValue: { number: 0, currency: 'rmb' },\n            rules: [{ validator: this.checkPrice }],\n          })(<PriceInput />)}\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create({ name: 'customized_form_controls' })(Demo);\n\nReactDOM.render(<WrappedDemo />, mountNode);\n")),(0,l.kt)("h3",{id:"store-form-data-into-upper-component"},"Store Form Data into Upper Component"),(0,l.kt)("p",null,"We can store form data into upper component or ","[","Redux]","(",(0,l.kt)("a",{parentName:"p",href:"https://github.com/reactjs/redux"},"https://github.com/reactjs/redux"),") or ","[","dva]","(",(0,l.kt)("a",{parentName:"p",href:"https://github.com/dvajs/dva"},"https://github.com/dvajs/dva"),") by using ",(0,l.kt)("inlineCode",{parentName:"p"},"onFieldsChange")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"mapPropsToFields"),", see more at this ","[","rc-form demo]","(",(0,l.kt)("a",{parentName:"p",href:"http://react-component.github.io/form/examples/redux.html"},"http://react-component.github.io/form/examples/redux.html"),")."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const CustomizedForm = Form.create({\n  name: 'global_state',\n  onFieldsChange(props, changedFields) {\n    props.onChange(changedFields);\n  },\n  mapPropsToFields(props) {\n    return {\n      username: Form.createFormField({\n        ...props.username,\n        value: props.username.value,\n      }),\n    };\n  },\n  onValuesChange(_, values) {\n    console.log(values);\n  },\n})(props => {\n  const { getFieldDecorator } = props.form;\n  return (\n    <Form layout=\"inline\">\n      <Form.Item label=\"Username\">\n        {getFieldDecorator('username', {\n          rules: [{ required: true, message: 'Username is required!' }],\n        })(<Input />)}\n      </Form.Item>\n    </Form>\n  );\n});\n\nclass Demo extends React.Component {\n  state = {\n    fields: {\n      username: {\n        value: 'benjycui',\n      },\n    },\n  };\n\n  handleFormChange = changedFields => {\n    this.setState(({ fields }) => ({\n      fields: { ...fields, ...changedFields },\n    }));\n  };\n\n  render() {\n    const { fields } = this.state;\n    return (\n      <div>\n        <CustomizedForm {...fields} onChange={this.handleFormChange} />\n        <pre className=\"language-bash\">{JSON.stringify(fields, null, 2)}</pre>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n")),(0,l.kt)("h3",{id:"handle-form-data-manually"},"Handle Form Data Manually"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"Form.create")," will collect and validate form data automatically. But if you don't need this feature or the default behaviour cannot satisfy your business, you can drop ",(0,l.kt)("inlineCode",{parentName:"p"},"Form.create")," and handle form data manually."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function validatePrimeNumber(number) {\n  if (number === 11) {\n    return {\n      validateStatus: 'success',\n      errorMsg: null,\n    };\n  }\n  return {\n    validateStatus: 'error',\n    errorMsg: 'The prime between 8 and 12 is 11!',\n  };\n}\n\nclass RawForm extends React.Component {\n  state = {\n    number: {\n      value: 11,\n    },\n  };\n\n  handleNumberChange = value => {\n    this.setState({\n      number: {\n        ...validatePrimeNumber(value),\n        value,\n      },\n    });\n  };\n\n  render() {\n    const formItemLayout = {\n      labelCol: { span: 7 },\n      wrapperCol: { span: 12 },\n    };\n    const { number } = this.state;\n    const tips =\n      'A prime is a natural number greater than 1 that has no positive divisors other than 1 and itself.';\n    return (\n      <Form>\n        <Form.Item\n          {...formItemLayout}\n          label=\"Prime between 8 & 12\"\n          validateStatus={number.validateStatus}\n          help={number.errorMsg || tips}\n        >\n          <InputNumber min={8} max={12} value={number.value} onChange={this.handleNumberChange} />\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nReactDOM.render(<RawForm />, mountNode);\n")),(0,l.kt)("h3",{id:"customized-validation"},"Customized Validation"),(0,l.kt)("p",null,"We provide properties like ",(0,l.kt)("inlineCode",{parentName:"p"},"validateStatus")," ",(0,l.kt)("inlineCode",{parentName:"p"},"help")," ",(0,l.kt)("inlineCode",{parentName:"p"},"hasFeedback")," to customize your own validate status and message, without using ",(0,l.kt)("inlineCode",{parentName:"p"},"Form.create")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldDecorator"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 5 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 12 },\n  },\n};\n\nReactDOM.render(\n  <Form {...formItemLayout}>\n    <Form.Item\n      label="Fail"\n      validateStatus="error"\n      help="Should be combination of numbers & alphabets"\n    >\n      <Input placeholder="unavailable choice" id="error" />\n    </Form.Item>\n\n    <Form.Item label="Warning" validateStatus="warning">\n      <Input placeholder="Warning" id="warning" />\n    </Form.Item>\n\n    <Form.Item\n      label="Validating"\n      hasFeedback\n      validateStatus="validating"\n      help="The information is being validated..."\n    >\n      <Input placeholder="I\'m the content is being validated" id="validating" />\n    </Form.Item>\n\n    <Form.Item label="Success" hasFeedback validateStatus="success">\n      <Input placeholder="I\'m the content" id="success" />\n    </Form.Item>\n\n    <Form.Item label="Warning" hasFeedback validateStatus="warning">\n      <Input placeholder="Warning" id="warning2" />\n    </Form.Item>\n\n    <Form.Item\n      label="Fail"\n      hasFeedback\n      validateStatus="error"\n      help="Should be combination of numbers & alphabets"\n    >\n      <Input placeholder="unavailable choice" id="error2" />\n    </Form.Item>\n\n    <Form.Item label="Success" hasFeedback validateStatus="success">\n      <DatePicker style={{ width: \'100%\' }} />\n    </Form.Item>\n\n    <Form.Item label="Warning" hasFeedback validateStatus="warning">\n      <TimePicker style={{ width: \'100%\' }} />\n    </Form.Item>\n\n    <Form.Item label="Error" hasFeedback validateStatus="error">\n      <Select defaultValue="1">\n        <Option value="1">Option 1</Option>\n        <Option value="2">Option 2</Option>\n        <Option value="3">Option 3</Option>\n      </Select>\n    </Form.Item>\n\n    <Form.Item\n      label="Validating"\n      hasFeedback\n      validateStatus="validating"\n      help="The information is being validated..."\n    >\n      <Cascader defaultValue={[\'1\']} options={[]} />\n    </Form.Item>\n\n    <Form.Item label="inline" style={{ marginBottom: 0 }}>\n      <Form.Item\n        validateStatus="error"\n        help="Please select the correct date"\n        style={{ display: \'inline-block\', width: \'calc(50% - 12px)\' }}\n      >\n        <DatePicker />\n      </Form.Item>\n      <span style={{ display: \'inline-block\', width: \'24px\', textAlign: \'center\' }}>-</span>\n      <Form.Item style={{ display: \'inline-block\', width: \'calc(50% - 12px)\' }}>\n        <DatePicker />\n      </Form.Item>\n    </Form.Item>\n\n    <Form.Item label="Success" hasFeedback validateStatus="success">\n      <InputNumber style={{ width: \'100%\' }} />\n    </Form.Item>\n\n    <Form.Item label="Success" hasFeedback validateStatus="success">\n      <Input allowClear placeholder="with allowClear" />\n    </Form.Item>\n\n    <Form.Item label="Warning" hasFeedback validateStatus="warning">\n      <Input.Password placeholder="with input password" />\n    </Form.Item>\n\n    <Form.Item label="Error" hasFeedback validateStatus="error">\n      <Input.Password allowClear placeholder="with input password and allowClear" />\n    </Form.Item>\n  </Form>,\n  mountNode,\n);\n')),(0,l.kt)("h3",{id:"coordinated-controls"},"Coordinated Controls"),(0,l.kt)("p",null,"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"setFieldsValue")," to set other control's value programmaticly."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\n\nclass App extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n      }\n    });\n  };\n\n  handleSelectChange = value => {\n    console.log(value);\n    this.props.form.setFieldsValue({\n      note: `Hi, ${value === 'male' ? 'man' : 'lady'}!`,\n    });\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <Form labelCol={{ span: 5 }} wrapperCol={{ span: 12 }} onSubmit={this.handleSubmit}>\n        <Form.Item label=\"Note\">\n          {getFieldDecorator('note', {\n            rules: [{ required: true, message: 'Please input your note!' }],\n          })(<Input />)}\n        </Form.Item>\n        <Form.Item label=\"Gender\">\n          {getFieldDecorator('gender', {\n            rules: [{ required: true, message: 'Please select your gender!' }],\n          })(\n            <Select\n              placeholder=\"Select a option and change input text above\"\n              onChange={this.handleSelectChange}\n            >\n              <Option value=\"male\">male</Option>\n              <Option value=\"female\">female</Option>\n            </Select>,\n          )}\n        </Form.Item>\n        <Form.Item wrapperCol={{ span: 12, offset: 5 }}>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedApp = Form.create({ name: 'coordinated' })(App);\n\nReactDOM.render(<WrappedApp />, mountNode);\n")),(0,l.kt)("h3",{id:"form-layout"},"Form Layout"),(0,l.kt)("p",null,"There are three layout for form: ",(0,l.kt)("inlineCode",{parentName:"p"},"horizontal"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vertical"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"inline"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'class FormLayoutDemo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      formLayout: \'horizontal\',\n    };\n  }\n\n  handleFormLayoutChange = e => {\n    this.setState({ formLayout: e.target.value });\n  };\n\n  render() {\n    const { formLayout } = this.state;\n    const formItemLayout =\n      formLayout === \'horizontal\'\n        ? {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 14 },\n          }\n        : null;\n    const buttonItemLayout =\n      formLayout === \'horizontal\'\n        ? {\n            wrapperCol: { span: 14, offset: 4 },\n          }\n        : null;\n    return (\n      <div>\n        <Form layout={formLayout}>\n          <Form.Item label="Form Layout" {...formItemLayout}>\n            <Radio.Group defaultValue="horizontal" onChange={this.handleFormLayoutChange}>\n              <Radio.Button value="horizontal">Horizontal</Radio.Button>\n              <Radio.Button value="vertical">Vertical</Radio.Button>\n              <Radio.Button value="inline">Inline</Radio.Button>\n            </Radio.Group>\n          </Form.Item>\n          <Form.Item label="Field A" {...formItemLayout}>\n            <Input placeholder="input placeholder" />\n          </Form.Item>\n          <Form.Item label="Field B" {...formItemLayout}>\n            <Input placeholder="input placeholder" />\n          </Form.Item>\n          <Form.Item {...buttonItemLayout}>\n            <Button type="primary">Submit</Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<FormLayoutDemo />, mountNode);\n')),(0,l.kt)("h3",{id:"dynamic-rules"},"Dynamic Rules"),(0,l.kt)("p",null,"Perform different check rules according to different situations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const formItemLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8 },\n};\nconst formTailLayout = {\n  labelCol: { span: 4 },\n  wrapperCol: { span: 8, offset: 4 },\n};\nclass DynamicRule extends React.Component {\n  state = {\n    checkNick: false,\n  };\n\n  check = () => {\n    this.props.form.validateFields(err => {\n      if (!err) {\n        console.info('success');\n      }\n    });\n  };\n\n  handleChange = e => {\n    this.setState(\n      {\n        checkNick: e.target.checked,\n      },\n      () => {\n        this.props.form.validateFields(['nickname'], { force: true });\n      },\n    );\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    return (\n      <div>\n        <Form.Item {...formItemLayout} label=\"Name\">\n          {getFieldDecorator('username', {\n            rules: [\n              {\n                required: true,\n                message: 'Please input your name',\n              },\n            ],\n          })(<Input placeholder=\"Please input your name\" />)}\n        </Form.Item>\n        <Form.Item {...formItemLayout} label=\"Nickname\">\n          {getFieldDecorator('nickname', {\n            rules: [\n              {\n                required: this.state.checkNick,\n                message: 'Please input your nickname',\n              },\n            ],\n          })(<Input placeholder=\"Please input your nickname\" />)}\n        </Form.Item>\n        <Form.Item {...formTailLayout}>\n          <Checkbox checked={this.state.checkNick} onChange={this.handleChange}>\n            Nickname is required\n          </Checkbox>\n        </Form.Item>\n        <Form.Item {...formTailLayout}>\n          <Button type=\"primary\" onClick={this.check}>\n            Check\n          </Button>\n        </Form.Item>\n      </div>\n    );\n  }\n}\n\nconst WrappedDynamicRule = Form.create({ name: 'dynamic_rule' })(DynamicRule);\nReactDOM.render(<WrappedDynamicRule />, mountNode);\n")),(0,l.kt)("h3",{id:"other-form-controls"},"Other Form Controls"),(0,l.kt)("p",null,"Demonstration of validation configuration for form controls which are not shown in the demos above."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nclass Demo extends React.Component {\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log(\'Received values of form: \', values);\n      }\n    });\n  };\n\n  normFile = e => {\n    console.log(\'Upload event:\', e);\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n\n  render() {\n    const { getFieldDecorator } = this.props.form;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 },\n    };\n    return (\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\n        <Form.Item label="Plain Text">\n          <span className="ant-form-text">China</span>\n        </Form.Item>\n        <Form.Item label="Select" hasFeedback>\n          {getFieldDecorator(\'select\', {\n            rules: [{ required: true, message: \'Please select your country!\' }],\n          })(\n            <Select placeholder="Please select a country">\n              <Option value="china">China</Option>\n              <Option value="usa">U.S.A</Option>\n            </Select>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Select[multiple]">\n          {getFieldDecorator(\'select-multiple\', {\n            rules: [\n              { required: true, message: \'Please select your favourite colors!\', type: \'array\' },\n            ],\n          })(\n            <Select mode="multiple" placeholder="Please select favourite colors">\n              <Option value="red">Red</Option>\n              <Option value="green">Green</Option>\n              <Option value="blue">Blue</Option>\n            </Select>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="InputNumber">\n          {getFieldDecorator(\'input-number\', { initialValue: 3 })(<InputNumber min={1} max={10} />)}\n          <span className="ant-form-text"> machines</span>\n        </Form.Item>\n\n        <Form.Item label="Switch">\n          {getFieldDecorator(\'switch\', { valuePropName: \'checked\' })(<Switch />)}\n        </Form.Item>\n\n        <Form.Item label="Slider">\n          {getFieldDecorator(\'slider\')(\n            <Slider\n              marks={{\n                0: \'A\',\n                20: \'B\',\n                40: \'C\',\n                60: \'D\',\n                80: \'E\',\n                100: \'F\',\n              }}\n            />,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Radio.Group">\n          {getFieldDecorator(\'radio-group\')(\n            <Radio.Group>\n              <Radio value="a">item 1</Radio>\n              <Radio value="b">item 2</Radio>\n              <Radio value="c">item 3</Radio>\n            </Radio.Group>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Radio.Button">\n          {getFieldDecorator(\'radio-button\')(\n            <Radio.Group>\n              <Radio.Button value="a">item 1</Radio.Button>\n              <Radio.Button value="b">item 2</Radio.Button>\n              <Radio.Button value="c">item 3</Radio.Button>\n            </Radio.Group>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Checkbox.Group">\n          {getFieldDecorator(\'checkbox-group\', {\n            initialValue: [\'A\', \'B\'],\n          })(\n            <Checkbox.Group style={{ width: \'100%\' }}>\n              <Row>\n                <Col span={8}>\n                  <Checkbox value="A">A</Checkbox>\n                </Col>\n                <Col span={8}>\n                  <Checkbox disabled value="B">\n                    B\n                  </Checkbox>\n                </Col>\n                <Col span={8}>\n                  <Checkbox value="C">C</Checkbox>\n                </Col>\n                <Col span={8}>\n                  <Checkbox value="D">D</Checkbox>\n                </Col>\n                <Col span={8}>\n                  <Checkbox value="E">E</Checkbox>\n                </Col>\n              </Row>\n            </Checkbox.Group>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Rate">\n          {getFieldDecorator(\'rate\', {\n            initialValue: 3.5,\n          })(<Rate />)}\n        </Form.Item>\n\n        <Form.Item label="Upload" extra="longgggggggggggggggggggggggggggggggggg">\n          {getFieldDecorator(\'upload\', {\n            valuePropName: \'fileList\',\n            getValueFromEvent: this.normFile,\n          })(\n            <Upload name="logo" action="/upload.do" listType="picture">\n              <Button>\n                <Icon type="upload" /> Click to upload\n              </Button>\n            </Upload>,\n          )}\n        </Form.Item>\n\n        <Form.Item label="Dragger">\n          {getFieldDecorator(\'dragger\', {\n            valuePropName: \'fileList\',\n            getValueFromEvent: this.normFile,\n          })(\n            <Upload.Dragger name="files" action="/upload.do">\n              <p className="ant-upload-drag-icon">\n                <Icon type="inbox" />\n              </p>\n              <p className="ant-upload-text">Click or drag file to this area to upload</p>\n              <p className="ant-upload-hint">Support for a single or bulk upload.</p>\n            </Upload.Dragger>,\n          )}\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ span: 12, offset: 6 }}>\n          <Button type="primary" htmlType="submit">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    );\n  }\n}\n\nconst WrappedDemo = Form.create({ name: \'validate_other\' })(Demo);\n\nReactDOM.render(<WrappedDemo />, mountNode);\n')),(0,l.kt)("h2",{id:"api"},"API"),(0,l.kt)("h3",{id:"form"},"Form"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"more example ",(0,l.kt)("a",{parentName:"strong",href:"http://react-component.github.io/form/"},"rc-form")),"\u3002"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"form"),(0,l.kt)("td",{parentName:"tr",align:null},"Decorated by ",(0,l.kt)("inlineCode",{parentName:"td"},"Form.create()")," will be automatically set ",(0,l.kt)("inlineCode",{parentName:"td"},"this.props.form")," property"),(0,l.kt)("td",{parentName:"tr",align:null},"object"),(0,l.kt)("td",{parentName:"tr",align:null},"n/a"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hideRequiredMark"),(0,l.kt)("td",{parentName:"tr",align:null},"Hide required mark of all form items"),(0,l.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"labelAlign"),(0,l.kt)("td",{parentName:"tr",align:null},"text align of label of all items"),(0,l.kt)("td",{parentName:"tr",align:null},"'left'"),(0,l.kt)("td",{parentName:"tr",align:null},"'right'"),(0,l.kt)("td",{parentName:"tr",align:null},"'right'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"labelCol"),(0,l.kt)("td",{parentName:"tr",align:null},"(Added in 3.14.0. Previous version can only set on FormItem.) The layout of label. You can set ",(0,l.kt)("inlineCode",{parentName:"td"},"span")," ",(0,l.kt)("inlineCode",{parentName:"td"},"offset")," to something like ",(0,l.kt)("inlineCode",{parentName:"td"},"{span: 3, offset: 12}")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sm: {span: 3, offset: 12}")," same as with ",(0,l.kt)("inlineCode",{parentName:"td"},"<Col>")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://ant.design/components/grid/#Col"},"object")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"3.14.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"layout"),(0,l.kt)("td",{parentName:"tr",align:null},"Define form layout"),(0,l.kt)("td",{parentName:"tr",align:null},"'horizontal'"),(0,l.kt)("td",{parentName:"tr",align:null},"'vertical'"),(0,l.kt)("td",{parentName:"tr",align:null},"'inline'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onSubmit"),(0,l.kt)("td",{parentName:"tr",align:null},"Defines a function will be called if form data validation is successful."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(e:Event)"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wrapperCol"),(0,l.kt)("td",{parentName:"tr",align:null},"(Added in 3.14.0. Previous version can only set on FormItem.) The layout for input controls, same as ",(0,l.kt)("inlineCode",{parentName:"td"},"labelCol")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://ant.design/components/grid/#Col"},"object")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"3.14.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"colon"),(0,l.kt)("td",{parentName:"tr",align:null},"change default props colon value of Form.Item (only effective when prop layout is horizontal)"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"3.15.0")))),(0,l.kt)("h3",{id:"formcreateoptions"},"Form.create(options)"),(0,l.kt)("p",null,"How to use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"class CustomizedForm extends React.Component {}\n\nCustomizedForm = Form.create({})(CustomizedForm);\n")),(0,l.kt)("p",null,"The following ",(0,l.kt)("inlineCode",{parentName:"p"},"options")," are available:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"mapPropsToFields"),(0,l.kt)("td",{parentName:"tr",align:null},"Convert props to field value(e.g. reading the values from Redux store). And you must mark returned fields with ",(0,l.kt)("a",{parentName:"td",href:"#Form.createFormField"},(0,l.kt)("inlineCode",{parentName:"a"},"Form.createFormField")),". Please note that the form fields will become controlled components. Properties like errors will not be automatically mapped and need to be manually passed in."),(0,l.kt)("td",{parentName:"tr",align:null},"(props) => ({ ","[","fieldName]: FormField { value } })"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"name"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the id prefix of fields under form"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validateMessages"),(0,l.kt)("td",{parentName:"tr",align:null},"Default validate message. And its format is similar with ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/yiminghe/async-validator/blob/master/src/messages.js"},"newMessages"),"'s returned value"),(0,l.kt)("td",{parentName:"tr",align:null},"Object { ","[","nested.path]: String }"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onFieldsChange"),(0,l.kt)("td",{parentName:"tr",align:null},"Specify a function that will be called when the fields (including errors) of a ",(0,l.kt)("inlineCode",{parentName:"td"},"Form.Item")," gets changed. Usage example: saving the field's value to Redux store."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(props, changedFields, allFields)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"onValuesChange"),(0,l.kt)("td",{parentName:"tr",align:null},"A handler while value of any field is changed"),(0,l.kt)("td",{parentName:"tr",align:null},"(props, changedValues, allValues) => void"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"If you want to get ",(0,l.kt)("inlineCode",{parentName:"p"},"ref")," after ",(0,l.kt)("inlineCode",{parentName:"p"},"Form.create"),", you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"wrappedComponentRef")," provided by ",(0,l.kt)("inlineCode",{parentName:"p"},"rc-form"),", ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-component/form#note-use-wrappedcomponentref-instead-of-withref-after-rc-form140"},"details can be viewed here"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"class CustomizedForm extends React.Component { ... }\n\n// use wrappedComponentRef\nconst EnhancedForm =  Form.create()(CustomizedForm);\n<EnhancedForm wrappedComponentRef={(form) => this.form = form} />\nthis.form // => The instance of CustomizedForm\n")),(0,l.kt)("p",null,"If the form has been decorated by ",(0,l.kt)("inlineCode",{parentName:"p"},"Form.create")," then it has ",(0,l.kt)("inlineCode",{parentName:"p"},"this.props.form")," property. ",(0,l.kt)("inlineCode",{parentName:"p"},"this.props.form")," provides some APIs as follows:"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note: Before using ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldsValue")," ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldValue")," ",(0,l.kt)("inlineCode",{parentName:"p"},"setFieldsValue")," and so on, please make sure that corresponding field had been registered with ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldDecorator"),".")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getFieldDecorator"),(0,l.kt)("td",{parentName:"tr",align:null},"Two-way binding for form, please read below for details."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getFieldError"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the error of a field."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(name)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getFieldsError"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the specified fields' error. If you don't specify a parameter, you will get all fields' error."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(","[","names: string","[","]])"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getFieldsValue"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the specified fields' values. If you don't specify a parameter, you will get all fields' values."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(","[","fieldNames: string","[","]])"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"getFieldValue"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the value of a field."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(fieldName: string)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isFieldsTouched"),(0,l.kt)("td",{parentName:"tr",align:null},"Check whether any of fields is touched by ",(0,l.kt)("inlineCode",{parentName:"td"},"getFieldDecorator"),"'s ",(0,l.kt)("inlineCode",{parentName:"td"},"options.trigger")," event"),(0,l.kt)("td",{parentName:"tr",align:null},"(names?: string","[","]) => boolean"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isFieldTouched"),(0,l.kt)("td",{parentName:"tr",align:null},"Check whether a field is touched by ",(0,l.kt)("inlineCode",{parentName:"td"},"getFieldDecorator"),"'s ",(0,l.kt)("inlineCode",{parentName:"td"},"options.trigger")," event"),(0,l.kt)("td",{parentName:"tr",align:null},"(name: string) => boolean"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"isFieldValidating"),(0,l.kt)("td",{parentName:"tr",align:null},"Check if the specified field is being validated."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(name)"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"resetFields"),(0,l.kt)("td",{parentName:"tr",align:null},"Reset the specified fields' value(to ",(0,l.kt)("inlineCode",{parentName:"td"},"initialValue"),") and status. If you don't specify a parameter, all the fields will be reset."),(0,l.kt)("td",{parentName:"tr",align:null},"Function(","[","names: string","[","]])"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setFields"),(0,l.kt)("td",{parentName:"tr",align:null},"Set value and error state of fields. ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/react-component/form/blob/3b9959b57ab30b41d8890ff30c79a7e7c383cad3/examples/server-validate.js#L74-L79"},"Code Sample")),(0,l.kt)("td",{parentName:"tr",align:null},"({",(0,l.kt)("br",null),"\xa0\xa0","[","fieldName]: {value: any, errors: ","[","Error] }",(0,l.kt)("br",null),"}) => void"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"setFieldsValue"),(0,l.kt)("td",{parentName:"tr",align:null},"Set the value of a field. (Note: please don't use it in ",(0,l.kt)("inlineCode",{parentName:"td"},"componentWillReceiveProps"),", otherwise, it will cause an endless loop, ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/2985"},"reason"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"(",(0,l.kt)("br",null),"\xa0\xa0{ ","[","fieldName]: value },",(0,l.kt)("br",null),"\xa0\xa0callback: Function",(0,l.kt)("br",null),") => void"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validateFields"),(0,l.kt)("td",{parentName:"tr",align:null},"Validate the specified fields and get their values and errors. If you don't specify the parameter of fieldNames, you will validate all fields."),(0,l.kt)("td",{parentName:"tr",align:null},"(",(0,l.kt)("br",null),"\xa0\xa0","[","fieldNames: string","[","]],",(0,l.kt)("br",null),"\xa0\xa0","[","options: object],",(0,l.kt)("br",null),"\xa0\xa0callback(errors, values)",(0,l.kt)("br",null),") => void"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validateFieldsAndScroll"),(0,l.kt)("td",{parentName:"tr",align:null},"This function is similar to ",(0,l.kt)("inlineCode",{parentName:"td"},"validateFields"),", but after validation, if the target field is not in visible area of form, form will be automatically scrolled to the target field area."),(0,l.kt)("td",{parentName:"tr",align:null},"same as ",(0,l.kt)("inlineCode",{parentName:"td"},"validateFields")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"validatefieldsvalidatefieldsandscroll"},"validateFields/validateFieldsAndScroll"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const {\n  form: { validateFields },\n} = this.props;\nvalidateFields((errors, values) => {\n  // ...\n});\nvalidateFields(['field1', 'field2'], (errors, values) => {\n  // ...\n});\nvalidateFields(['field1', 'field2'], options, (errors, values) => {\n  // ...\n});\n")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.first"),(0,l.kt)("td",{parentName:"tr",align:null},"If ",(0,l.kt)("inlineCode",{parentName:"td"},"true"),", every field will stop validation at first failed rule"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.firstFields"),(0,l.kt)("td",{parentName:"tr",align:null},"Those fields will stop validation at first failed rule"),(0,l.kt)("td",{parentName:"tr",align:null},"String","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.force"),(0,l.kt)("td",{parentName:"tr",align:null},"Should validate validated field again when ",(0,l.kt)("inlineCode",{parentName:"td"},"validateTrigger")," is been triggered again"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.scroll"),(0,l.kt)("td",{parentName:"tr",align:null},"Config scroll behavior of ",(0,l.kt)("inlineCode",{parentName:"td"},"validateFieldsAndScroll"),", more: ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/yiminghe/dom-scroll-into-view#function-parameter"},"dom-scroll-into-view's config")),(0,l.kt)("td",{parentName:"tr",align:null},"Object"),(0,l.kt)("td",{parentName:"tr",align:null},"{}"),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.3")))),(0,l.kt)("h4",{id:"callback-arguments-example-of-validatefields"},"Callback arguments example of validateFields"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"errors"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "username": {\n    "errors": [\n      {\n        "message": "Please input your username!",\n        "field": "username"\n      }\n    ]\n  },\n  "password": {\n    "errors": [\n      {\n        "message": "Please input your Password!",\n        "field": "password"\n      }\n    ]\n  }\n}\n'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"values"),":"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "username": "username",\n  "password": "password",\n}\n')))),(0,l.kt)("h3",{id:"formcreateformfield"},"Form.createFormField"),(0,l.kt)("p",null,"To mark the returned fields data in ",(0,l.kt)("inlineCode",{parentName:"p"},"mapPropsToFields"),", ",(0,l.kt)("a",{parentName:"p",href:"#components-form-demo-global-state"},"demo"),"."),(0,l.kt)("h3",{id:"thispropsformgetfielddecoratorid-options"},"this.props.form.getFieldDecorator(id, options)"),(0,l.kt)("p",null,"After wrapped by ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldDecorator"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),"(or other property defined by ",(0,l.kt)("inlineCode",{parentName:"p"},"valuePropName"),") ",(0,l.kt)("inlineCode",{parentName:"p"},"onChange"),"(or other property defined by ",(0,l.kt)("inlineCode",{parentName:"p"},"trigger"),") props will be added to form controls, the flow of form data will be handled by Form which will cause:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"You shouldn't use ",(0,l.kt)("inlineCode",{parentName:"li"},"onChange")," to collect data, but you still can listen to ",(0,l.kt)("inlineCode",{parentName:"li"},"onChange"),"(and so on) events."),(0,l.kt)("li",{parentName:"ol"},"You cannot set value of form control via ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," ",(0,l.kt)("inlineCode",{parentName:"li"},"defaultValue")," prop, and you should set default value with ",(0,l.kt)("inlineCode",{parentName:"li"},"initialValue")," in ",(0,l.kt)("inlineCode",{parentName:"li"},"getFieldDecorator")," instead."),(0,l.kt)("li",{parentName:"ol"},"You shouldn't call ",(0,l.kt)("inlineCode",{parentName:"li"},"setState")," manually, please use ",(0,l.kt)("inlineCode",{parentName:"li"},"this.props.form.setFieldsValue")," to change value programmatically.")),(0,l.kt)("h4",{id:"special-attention"},"Special attention"),(0,l.kt)("p",null,"If you use ",(0,l.kt)("inlineCode",{parentName:"p"},"react@<15.3.0"),", then, you can't use ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldDecorator")," in stateless component: ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/pull/6534"},"https://github.com/facebook/react/pull/6534")),(0,l.kt)("h4",{id:"getfielddecoratorid-options-parameters"},"getFieldDecorator(id, options) parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"id"),(0,l.kt)("td",{parentName:"tr",align:null},"The unique identifier is required. support ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/react-component/form/pull/48"},"nested fields format"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.getValueFromEvent"),(0,l.kt)("td",{parentName:"tr",align:null},"Specify how to get value from event or other onChange arguments"),(0,l.kt)("td",{parentName:"tr",align:null},"function(..args)"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/react-component/form#option-object"},"reference")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.getValueProps"),(0,l.kt)("td",{parentName:"tr",align:null},"Get the component props according to field value."),(0,l.kt)("td",{parentName:"tr",align:null},"function(value): any"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://github.com/react-component/form#option-object"},"reference")),(0,l.kt)("td",{parentName:"tr",align:null},"3.9.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.initialValue"),(0,l.kt)("td",{parentName:"tr",align:null},"You can specify initial value, type, optional value of children node. (",(0,l.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/4093"},"Note: Because ",(0,l.kt)("inlineCode",{parentName:"a"},"Form")," will test equality with ",(0,l.kt)("inlineCode",{parentName:"a"},"===")," internally, we recommend to use variable as ",(0,l.kt)("inlineCode",{parentName:"a"},"initialValue"),", instead of literal"),")"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"n/a"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.normalize"),(0,l.kt)("td",{parentName:"tr",align:null},"Normalize value to form component, ",(0,l.kt)("a",{parentName:"td",href:"https://codepen.io/afc163/pen/JJVXzG?editors=001"},"a select-all example")),(0,l.kt)("td",{parentName:"tr",align:null},"function(value, prevValue, allValues): any"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.preserve"),(0,l.kt)("td",{parentName:"tr",align:null},"Keep the field even if field removed"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null},"3.12.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.rules"),(0,l.kt)("td",{parentName:"tr",align:null},'Includes validation rules. Please refer to "Validation Rules" part for details.'),(0,l.kt)("td",{parentName:"tr",align:null},"object","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"n/a"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.trigger"),(0,l.kt)("td",{parentName:"tr",align:null},"When to collect the value of children node"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"'onChange'"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.validateFirst"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether stop validate on first rule of error for this field."),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.validateTrigger"),(0,l.kt)("td",{parentName:"tr",align:null},"When to validate the value of children node."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,l.kt)("td",{parentName:"tr",align:null},"'onChange'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"options.valuePropName"),(0,l.kt)("td",{parentName:"tr",align:null},"Props of children node, for example, the prop of Switch is 'checked'."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"'value'"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"More option at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/react-component/form#option-object"},"rc-form option"),"\u3002"),(0,l.kt)("h3",{id:"formitem"},"Form.Item"),(0,l.kt)("p",null,"Note: if Form.Item has multiple children that had been decorated by ",(0,l.kt)("inlineCode",{parentName:"p"},"getFieldDecorator"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"help")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"required")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"validateStatus")," can't be generated automatically."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"colon"),(0,l.kt)("td",{parentName:"tr",align:null},"Used with ",(0,l.kt)("inlineCode",{parentName:"td"},"label"),", whether to display ",(0,l.kt)("inlineCode",{parentName:"td"},":")," after label text."),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"extra"),(0,l.kt)("td",{parentName:"tr",align:null},"The extra prompt message. It is similar to help. Usage example: to display error message and prompt message at the same time."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"hasFeedback"),(0,l.kt)("td",{parentName:"tr",align:null},"Used with ",(0,l.kt)("inlineCode",{parentName:"td"},"validateStatus"),", this option specifies the validation status icon. Recommended to be used only with ",(0,l.kt)("inlineCode",{parentName:"td"},"Input"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"help"),(0,l.kt)("td",{parentName:"tr",align:null},"The prompt message. If not provided, the prompt message will be generated by the validation rule."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"htmlFor"),(0,l.kt)("td",{parentName:"tr",align:null},"Set sub label ",(0,l.kt)("inlineCode",{parentName:"td"},"htmlFor"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"3.17.0")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"label"),(0,l.kt)("td",{parentName:"tr",align:null},"Label text"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"labelCol"),(0,l.kt)("td",{parentName:"tr",align:null},"The layout of label. You can set ",(0,l.kt)("inlineCode",{parentName:"td"},"span")," ",(0,l.kt)("inlineCode",{parentName:"td"},"offset")," to something like ",(0,l.kt)("inlineCode",{parentName:"td"},"{span: 3, offset: 12}")," or ",(0,l.kt)("inlineCode",{parentName:"td"},"sm: {span: 3, offset: 12}")," same as with ",(0,l.kt)("inlineCode",{parentName:"td"},"<Col>"),". You can set on Form one time after 3.14.0. Will take FormItem's prop when both set with Form."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://ant.design/components/grid/#Col"},"object")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"labelAlign"),(0,l.kt)("td",{parentName:"tr",align:null},"text align of label"),(0,l.kt)("td",{parentName:"tr",align:null},"'left'"),(0,l.kt)("td",{parentName:"tr",align:null},"'right'"),(0,l.kt)("td",{parentName:"tr",align:null},"'right'")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether provided or not, it will be generated by the validation rule."),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validateStatus"),(0,l.kt)("td",{parentName:"tr",align:null},"The validation status. If not provided, it will be generated by validation rule. options: 'success' 'warning' 'error' 'validating'"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"wrapperCol"),(0,l.kt)("td",{parentName:"tr",align:null},"The layout for input controls, same as ",(0,l.kt)("inlineCode",{parentName:"td"},"labelCol"),". You can set on Form one time after 3.14.0. Will take FormItem's prop when both set with Form."),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"https://ant.design/components/grid/#Col"},"object")),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h3",{id:"validation-rules"},"Validation Rules"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Version"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"enum"),(0,l.kt)("td",{parentName:"tr",align:null},"validate a value from a list of possible values"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"len"),(0,l.kt)("td",{parentName:"tr",align:null},"validate an exact length of a field"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"max"),(0,l.kt)("td",{parentName:"tr",align:null},"validate a max length of a field"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"validation error message"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,l.kt)("td",{parentName:"tr",align:null},"-")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"min"),(0,l.kt)("td",{parentName:"tr",align:null},"validate a min length of a field"),(0,l.kt)("td",{parentName:"tr",align:null},"number"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"pattern"),(0,l.kt)("td",{parentName:"tr",align:null},"validate from a regular expression"),(0,l.kt)("td",{parentName:"tr",align:null},"RegExp"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},"indicates whether field is required"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transform"),(0,l.kt)("td",{parentName:"tr",align:null},"transform a value before validation"),(0,l.kt)("td",{parentName:"tr",align:null},"function(value) => transformedValue:any"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"type"),(0,l.kt)("td",{parentName:"tr",align:null},"built-in validation type, ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/yiminghe/async-validator#type"},"available options")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"'string'"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"validator"),(0,l.kt)("td",{parentName:"tr",align:null},"custom validate function (Note: ",(0,l.kt)("a",{parentName:"td",href:"https://github.com/ant-design/ant-design/issues/5155"},"callback must be called"),")"),(0,l.kt)("td",{parentName:"tr",align:null},"function(rule, value, callback)"),(0,l.kt)("td",{parentName:"tr",align:null},"-"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"whitespace"),(0,l.kt)("td",{parentName:"tr",align:null},"treat required fields that only contain whitespace as errors"),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"See more advanced usage at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/yiminghe/async-validator"},"async-validator"),"."),(0,l.kt)("h2",{id:"using-in-typescript"},"Using in TypeScript"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Form } from 'antd';\nimport { FormComponentProps } from 'antd/es/form';\n\ninterface UserFormProps extends FormComponentProps {\n  age: number;\n  name: string;\n}\n\nclass UserForm extends React.Component<UserFormProps, any> {\n  // ...\n}\n\nconst App = Form.create<UserFormProps>({\n  // ...\n})(UserForm);\n")),(0,l.kt)("h2",{id:"faq"},"FAQ"),(0,l.kt)("h3",{id:"customize-validator-do-not-working"},"Customize validator do not working"),(0,l.kt)("p",null,"It caused by your ",(0,l.kt)("inlineCode",{parentName:"p"},"validator")," with some error that ",(0,l.kt)("inlineCode",{parentName:"p"},"callback")," can not be called. You can use ",(0,l.kt)("inlineCode",{parentName:"p"},"async")," instead or use ",(0,l.kt)("inlineCode",{parentName:"p"},"try...catch")," to catch the error:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"validator: async (rule, value) => {\n  throw new Error('Something wrong!');\n}\n\n// or\n\nvalidator(rule, value, callback) => {\n  try {\n    throw new Error('Something wrong!');\n  } catch (err) {\n    callback(err);\n  }\n}\n")),(0,l.kt)("h3",{id:"get-form-instance-from-function-component"},"Get form instance from function component"),(0,l.kt)("p",null,"You can combine ",(0,l.kt)("inlineCode",{parentName:"p"},"forwardRef")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"useImperativeHandle")," to get form instance:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { forwardRef, useImperativeHandle } from 'react';\nimport Form, { FormComponentProps } from 'antd/lib/form/Form';\n\nconst FCForm = forwardRef<FormComponentProps, FCFormProps>(({ form, onSubmit }, ref) => {\n  useImperativeHandle(ref, () => ({\n    form,\n  }));\n  `...the rest of your form`;\n});\nconst EnhancedFCForm = Form.create<FCFormProps>()(FCForm);\n")),(0,l.kt)("p",null,"You can use your form component like this\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"const TestForm = () => {\n  const formRef = createRef<Ref>();\n  return (\n    <EnhancedFCForm\n      onSubmit={() => console.log(formRef.current!.form.getFieldValue('name'))}\n      wrappedComponentRef={formRef}\n    />\n  );\n};\n")),(0,l.kt)("p",null,"Online demo:"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/wrappedcomponentref-in-function-component-fj43c?fontsize=14%5C&hidenavigation=1%5C&theme=dark"},(0,l.kt)("img",{parentName:"a",src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Edit wrappedComponentRef-in-function-component"}))))}u.isMDXComponent=!0},30876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,g=u["".concat(m,".").concat(c)]||u[c]||p[c]||l;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);