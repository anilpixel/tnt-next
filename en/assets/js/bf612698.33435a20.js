"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4773],{83252:(t,e,n)=>{n.r(e),n.d(e,{frontMatter:()=>o,contentTitle:()=>d,metadata:()=>p,toc:()=>u,default:()=>c});var a=n(7896),l=n(31461),r=(n(2784),n(30876)),i=["components"],o={tags:["Components"],type:"Data Entry",title:"Select"},d=void 0,p={unversionedId:"components/data-entry/select",id:"components/data-entry/select",isDocsHomePage:!1,title:"Select",description:"---",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/components/data-entry/select.md",sourceDirName:"components/data-entry",slug:"/components/data-entry/select",permalink:"/tnt-next/en/docs/components/data-entry/select",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/components/data-entry/select.md",tags:[{label:"Components",permalink:"/tnt-next/en/docs/tags/components"}],version:"current",frontMatter:{tags:["Components"],type:"Data Entry",title:"Select"},sidebar:"componentsSidebar",previous:{title:"Rate",permalink:"/tnt-next/en/docs/components/data-entry/rate"},next:{title:"Slider",permalink:"/tnt-next/en/docs/components/data-entry/slider"}},u=[{value:"When To Use",id:"when-to-use",children:[],level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",children:[{value:"Basic Usage",id:"basic-usage",children:[],level:3},{value:"Select with search field",id:"select-with-search-field",children:[],level:3},{value:"multiple selection",id:"multiple-selection",children:[],level:3},{value:"Sizes",id:"sizes",children:[],level:3},{value:"Custom selection render",id:"custom-selection-render",children:[],level:3},{value:"Tags",id:"tags",children:[],level:3},{value:"Option Group",id:"option-group",children:[],level:3},{value:"coordinate",id:"coordinate",children:[],level:3},{value:"Search Box",id:"search-box",children:[],level:3},{value:"Get value of selected item",id:"get-value-of-selected-item",children:[],level:3},{value:"Automatic tokenization",id:"automatic-tokenization",children:[],level:3},{value:"Search and Select Users",id:"search-and-select-users",children:[],level:3},{value:"Suffix",id:"suffix",children:[],level:3},{value:"Custom dropdown",id:"custom-dropdown",children:[],level:3},{value:"Hide Already Selected",id:"hide-already-selected",children:[],level:3}],level:2},{value:"API",id:"api",children:[{value:"Select props",id:"select-props",children:[],level:3},{value:"Select Methods",id:"select-methods",children:[],level:3},{value:"Option props",id:"option-props",children:[],level:3},{value:"OptGroup props",id:"optgroup-props",children:[],level:3}],level:2},{value:"FAQ",id:"faq",children:[{value:"The dropdown is closed when click <code>dropdownRender</code> area?",id:"the-dropdown-is-closed-when-click-dropdownrender-area",children:[],level:3}],level:2}],s={toc:u};function c(t){var e=t.components,n=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("p",null,"Select component to select value from options."),(0,r.kt)("h2",{id:"when-to-use"},"When To Use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A dropdown menu for displaying choices - an elegant alternative to the native ",(0,r.kt)("inlineCode",{parentName:"li"},"<select>")," element."),(0,r.kt)("li",{parentName:"ul"},"Utilizing ",(0,r.kt)("a",{parentName:"li",href:"/components/radio/"},"Radio")," is recommended when there are fewer total options (less than 5).")),(0,r.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,r.kt)("h3",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"Basic Usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <div>\n    <Select defaultValue="lucy" style={{ width: 120 }} onChange={handleChange}>\n      <Option value="jack">Jack</Option>\n      <Option value="lucy">Lucy</Option>\n      <Option value="disabled" disabled>\n        Disabled\n      </Option>\n      <Option value="Yiminghe">yiminghe</Option>\n    </Select>\n    <Select defaultValue="lucy" style={{ width: 120 }} disabled>\n      <Option value="lucy">Lucy</Option>\n    </Select>\n    <Select defaultValue="lucy" style={{ width: 120 }} loading>\n      <Option value="lucy">Lucy</Option>\n    </Select>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"select-with-search-field"},"Select with search field"),(0,r.kt)("p",null,"Search the options while expanded."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nfunction onChange(value) {\n  console.log(`selected ${value}`);\n}\n\nfunction onBlur() {\n  console.log(\'blur\');\n}\n\nfunction onFocus() {\n  console.log(\'focus\');\n}\n\nfunction onSearch(val) {\n  console.log(\'search:\', val);\n}\n\nReactDOM.render(\n  <Select\n    showSearch\n    style={{ width: 200 }}\n    placeholder="Select a person"\n    optionFilterProp="children"\n    onChange={onChange}\n    onFocus={onFocus}\n    onBlur={onBlur}\n    onSearch={onSearch}\n    filterOption={(input, option) =>\n      option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    }\n  >\n    <Option value="jack">Jack</Option>\n    <Option value="lucy">Lucy</Option>\n    <Option value="tom">Tom</Option>\n  </Select>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"multiple-selection"},"multiple selection"),(0,r.kt)("p",null,"Multiple selection, selecting from existing items."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    mode=\"multiple\"\n    style={{ width: '100%' }}\n    placeholder=\"Please select\"\n    defaultValue={['a10', 'c12']}\n    onChange={handleChange}\n  >\n    {children}\n  </Select>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"sizes"},"Sizes"),(0,r.kt)("p",null,"The height of the input field for the select defaults to 32px. If size is set to large, the height will be 40px, and if set to small, 24px."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`Selected: ${value}`);\n}\n\nclass SelectSizesDemo extends React.Component {\n  state = {\n    size: \'default\',\n  };\n\n  handleSizeChange = e => {\n    this.setState({ size: e.target.value });\n  };\n\n  render() {\n    const { size } = this.state;\n    return (\n      <div>\n        <Radio.Group value={size} onChange={this.handleSizeChange}>\n          <Radio.Button value="large">Large</Radio.Button>\n          <Radio.Button value="default">Default</Radio.Button>\n          <Radio.Button value="small">Small</Radio.Button>\n        </Radio.Group>\n        <br />\n        <br />\n        <Select size={size} defaultValue="a1" onChange={handleChange} style={{ width: 200 }}>\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode="multiple"\n          size={size}\n          placeholder="Please select"\n          defaultValue={[\'a10\', \'c12\']}\n          onChange={handleChange}\n          style={{ width: \'100%\' }}\n        >\n          {children}\n        </Select>\n        <br />\n        <Select\n          mode="tags"\n          size={size}\n          placeholder="Please select"\n          defaultValue={[\'a10\', \'c12\']}\n          onChange={handleChange}\n          style={{ width: \'100%\' }}\n        >\n          {children}\n        </Select>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<SelectSizesDemo />, mountNode);\n')),(0,r.kt)("h3",{id:"custom-selection-render"},"Custom selection render"),(0,r.kt)("p",null,"Spacified the prop name of Option which will be rendered in select box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select\n    mode="multiple"\n    style={{ width: \'100%\' }}\n    placeholder="select one country"\n    defaultValue={[\'china\']}\n    onChange={handleChange}\n    optionLabelProp="label"\n  >\n    <Option value="china" label="China">\n      <span role="img" aria-label="China">\n        \ud83c\udde8\ud83c\uddf3\n      </span>\n      China (\u4e2d\u56fd)\n    </Option>\n    <Option value="usa" label="USA">\n      <span role="img" aria-label="USA">\n        \ud83c\uddfa\ud83c\uddf8\n      </span>\n      USA (\u7f8e\u56fd)\n    </Option>\n    <Option value="japan" label="Japan">\n      <span role="img" aria-label="Japan">\n        \ud83c\uddef\ud83c\uddf5\n      </span>\n      Japan (\u65e5\u672c)\n    </Option>\n    <Option value="korea" label="Korea">\n      <span role="img" aria-label="Korea">\n        \ud83c\uddf0\ud83c\uddf7\n      </span>\n      Korea (\u97e9\u56fd)\n    </Option>\n  </Select>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"tags"},"Tags"),(0,r.kt)("p",null,"Select with tags, transform input to tag (scroll the menu)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select mode="tags" style={{ width: \'100%\' }} placeholder="Tags Mode" onChange={handleChange}>\n    {children}\n  </Select>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"option-group"},"Option Group"),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},"OptGroup")," to group the options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option, OptGroup } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select defaultValue="lucy" style={{ width: 200 }} onChange={handleChange}>\n    <OptGroup label="Manager">\n      <Option value="jack">Jack</Option>\n      <Option value="lucy">Lucy</Option>\n    </OptGroup>\n    <OptGroup label="Engineer">\n      <Option value="Yiminghe">yiminghe</Option>\n    </OptGroup>\n  </Select>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"coordinate"},"coordinate"),(0,r.kt)("p",null,"Coordinating the selection of provinces and cities is a common use case and demonstrates how selection can be coordinated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\nconst provinceData = ['Zhejiang', 'Jiangsu'];\nconst cityData = {\n  Zhejiang: ['Hangzhou', 'Ningbo', 'Wenzhou'],\n  Jiangsu: ['Nanjing', 'Suzhou', 'Zhenjiang'],\n};\n\nclass App extends React.Component {\n  state = {\n    cities: cityData[provinceData[0]],\n    secondCity: cityData[provinceData[0]][0],\n  };\n\n  handleProvinceChange = value => {\n    this.setState({\n      cities: cityData[value],\n      secondCity: cityData[value][0],\n    });\n  };\n\n  onSecondCityChange = value => {\n    this.setState({\n      secondCity: value,\n    });\n  };\n\n  render() {\n    const { cities } = this.state;\n    return (\n      <div>\n        <Select\n          defaultValue={provinceData[0]}\n          style={{ width: 120 }}\n          onChange={this.handleProvinceChange}\n        >\n          {provinceData.map(province => (\n            <Option key={province}>{province}</Option>\n          ))}\n        </Select>\n        <Select\n          style={{ width: 120 }}\n          value={this.state.secondCity}\n          onChange={this.onSecondCityChange}\n        >\n          {cities.map(city => (\n            <Option key={city}>{city}</Option>\n          ))}\n        </Select>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"search-box"},"Search Box"),(0,r.kt)("p",null,"Search with remote data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nimport jsonp from 'fetch-jsonp';\nconst { Option } = Select;\n\nlet timeout;\nlet currentValue;\n\nfunction fetch(value, callback) {\n  if (timeout) {\n    clearTimeout(timeout);\n    timeout = null;\n  }\n  currentValue = value;\n\n  function fake() {\n    const str = querystring.encode({\n      code: 'utf-8',\n      q: value,\n    });\n    jsonp(`https://suggest.taobao.com/sug?${str}`)\n      .then(response => response.json())\n      .then(d => {\n        if (currentValue === value) {\n          const { result } = d;\n          const data = [];\n          result.forEach(r => {\n            data.push({\n              value: r[0],\n              text: r[0],\n            });\n          });\n          callback(data);\n        }\n      });\n  }\n\n  timeout = setTimeout(fake, 300);\n}\n\nclass SearchInput extends React.Component {\n  state = {\n    data: [],\n    value: undefined,\n  };\n\n  handleSearch = value => {\n    if (value) {\n      fetch(value, data => this.setState({ data }));\n    } else {\n      this.setState({ data: [] });\n    }\n  };\n\n  handleChange = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    const options = this.state.data.map(d => <Option key={d.value}>{d.text}</Option>);\n    return (\n      <Select\n        showSearch\n        value={this.state.value}\n        placeholder={this.props.placeholder}\n        style={this.props.style}\n        defaultActiveFirstOption={false}\n        showArrow={false}\n        filterOption={false}\n        onSearch={this.handleSearch}\n        onChange={this.handleChange}\n        notFoundContent={null}\n      >\n        {options}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<SearchInput placeholder=\"input search text\" style={{ width: 200 }} />, mountNode);\n")),(0,r.kt)("h3",{id:"get-value-of-selected-item"},"Get value of selected item"),(0,r.kt)("p",null,"As a default behavior, the onChange callback can only get the value of the selected item. The labelInValue prop can be used to get the label property of the selected item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const { Option } = Select;\n\nfunction handleChange(value) {\n  console.log(value); // { key: "lucy", label: "Lucy (101)" }\n}\n\nReactDOM.render(\n  <Select\n    labelInValue\n    defaultValue={{ key: \'lucy\' }}\n    style={{ width: 120 }}\n    onChange={handleChange}\n  >\n    <Option value="jack">Jack (100)</Option>\n    <Option value="lucy">Lucy (101)</Option>\n  </Select>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"automatic-tokenization"},"Automatic tokenization"),(0,r.kt)("p",null,"Try to copy ",(0,r.kt)("inlineCode",{parentName:"p"},"Lucy,Jack")," to the input. Only available in tags and multiple mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\n\nconst children = [];\nfor (let i = 10; i < 36; i++) {\n  children.push(<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>);\n}\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <Select mode=\"tags\" style={{ width: '100%' }} onChange={handleChange} tokenSeparators={[',']}>\n    {children}\n  </Select>,\n  mountNode,\n);\n")),(0,r.kt)("h3",{id:"search-and-select-users"},"Search and Select Users"),(0,r.kt)("p",null,"A complete multiple select sample with remote search, debounce fetch, ajax callback order flow, and loading state."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"\nconst { Option } = Select;\n\nclass UserRemoteSelect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.lastFetchId = 0;\n    this.fetchUser = debounce(this.fetchUser, 800);\n  }\n\n  state = {\n    data: [],\n    value: [],\n    fetching: false,\n  };\n\n  fetchUser = value => {\n    console.log('fetching user', value);\n    this.lastFetchId += 1;\n    const fetchId = this.lastFetchId;\n    this.setState({ data: [], fetching: true });\n    fetch('https://randomuser.me/api/?results=5')\n      .then(response => response.json())\n      .then(body => {\n        if (fetchId !== this.lastFetchId) {\n          // for fetch callback order\n          return;\n        }\n        const data = body.results.map(user => ({\n          text: `${user.name.first} ${user.name.last}`,\n          value: user.login.username,\n        }));\n        this.setState({ data, fetching: false });\n      });\n  };\n\n  handleChange = value => {\n    this.setState({\n      value,\n      data: [],\n      fetching: false,\n    });\n  };\n\n  render() {\n    const { fetching, data, value } = this.state;\n    return (\n      <Select\n        mode=\"multiple\"\n        labelInValue\n        value={value}\n        placeholder=\"Select users\"\n        notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n        filterOption={false}\n        onSearch={this.fetchUser}\n        onChange={this.handleChange}\n        style={{ width: '100%' }}\n      >\n        {data.map(d => (\n          <Option key={d.value}>{d.text}</Option>\n        ))}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<UserRemoteSelect />, mountNode);\n")),(0,r.kt)("h3",{id:"suffix"},"Suffix"),(0,r.kt)("p",null,"Basic Usage."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'const smileIcon = <Icon type="smile" />;\nconst mehIcon = <Icon type="meh" />;\nconst { Option } = Select;\n\nfunction handleChange(value) {\n  console.log(`selected ${value}`);\n}\n\nReactDOM.render(\n  <div>\n    <Select\n      suffixIcon={smileIcon}\n      defaultValue="lucy"\n      style={{ width: 120 }}\n      onChange={handleChange}\n    >\n      <Option value="jack">Jack</Option>\n      <Option value="lucy">Lucy</Option>\n      <Option value="disabled" disabled>\n        Disabled\n      </Option>\n      <Option value="Yiminghe">yiminghe</Option>\n    </Select>\n    <Select suffixIcon={mehIcon} defaultValue="lucy" style={{ width: 120 }} disabled>\n      <Option value="lucy">Lucy</Option>\n    </Select>\n  </div>,\n  mountNode,\n);\n')),(0,r.kt)("h3",{id:"custom-dropdown"},"Custom dropdown"),(0,r.kt)("p",null,"Customize the dropdown menu via ",(0,r.kt)("inlineCode",{parentName:"p"},"dropdownRender"),". The selection will be closed if click ",(0,r.kt)("inlineCode",{parentName:"p"},"dropdownRender")," area, you can prevent it by wrapping ",(0,r.kt)("inlineCode",{parentName:"p"},"onMouseDown={e => e.preventDefault()}")," (see more at ","[","#13448]","(",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ant-design/ant-design/issues/13448"},"https://github.com/ant-design/ant-design/issues/13448"),"))."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const { Option } = Select;\n\nlet index = 0;\n\nclass App extends React.Component {\n  state = {\n    items: ['jack', 'lucy'],\n  };\n\n  addItem = () => {\n    console.log('addItem');\n    const { items } = this.state;\n    this.setState({\n      items: [...items, `New item ${index++}`],\n    });\n  };\n\n  render() {\n    const { items } = this.state;\n    return (\n      <Select\n        style={{ width: 240 }}\n        placeholder=\"custom dropdown render\"\n        dropdownRender={menu => (\n          <div>\n            {menu}\n            <Divider style={{ margin: '4px 0' }} />\n            <div\n              style={{ padding: '4px 8px', cursor: 'pointer' }}\n              onMouseDown={e => e.preventDefault()}\n              onClick={this.addItem}\n            >\n              <Icon type=\"plus\" /> Add item\n            </div>\n          </div>\n        )}\n      >\n        {items.map(item => (\n          <Option key={item}>{item}</Option>\n        ))}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<App />, mountNode);\n")),(0,r.kt)("h3",{id:"hide-already-selected"},"Hide Already Selected"),(0,r.kt)("p",null,"Hide already selected options in the dropdown."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"const OPTIONS = ['Apples', 'Nails', 'Bananas', 'Helicopters'];\n\nclass SelectWithHiddenSelectedOptions extends React.Component {\n  state = {\n    selectedItems: [],\n  };\n\n  handleChange = selectedItems => {\n    this.setState({ selectedItems });\n  };\n\n  render() {\n    const { selectedItems } = this.state;\n    const filteredOptions = OPTIONS.filter(o => !selectedItems.includes(o));\n    return (\n      <Select\n        mode=\"multiple\"\n        placeholder=\"Inserted are removed\"\n        value={selectedItems}\n        onChange={this.handleChange}\n        style={{ width: '100%' }}\n      >\n        {filteredOptions.map(item => (\n          <Select.Option key={item} value={item}>\n            {item}\n          </Select.Option>\n        ))}\n      </Select>\n    );\n  }\n}\n\nReactDOM.render(<SelectWithHiddenSelectedOptions />, mountNode);\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<select>\n  <option value="lucy">lucy</option>\n</select>\n')),(0,r.kt)("h3",{id:"select-props"},"Select props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"allowClear"),(0,r.kt)("td",{parentName:"tr",align:null},"Show clear button."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoClearSearchValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether the current search will be cleared on selecting an item. Only applies when ",(0,r.kt)("inlineCode",{parentName:"td"},"mode")," is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"multiple")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"tags"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"autoFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"Get focus by default"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultActiveFirstOption"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether active first option by default"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial selected option."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]",(0,r.kt)("br",null),"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number","[","]",(0,r.kt)("br",null),"LabeledValue")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether disabled select"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownClassName"),(0,r.kt)("td",{parentName:"tr",align:null},"className of dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownMatchSelectWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether dropdown's width is same with select."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownRender"),(0,r.kt)("td",{parentName:"tr",align:null},"Customize dropdown content"),(0,r.kt)("td",{parentName:"tr",align:null},"(menuNode: ReactNode, props) => ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownStyle"),(0,r.kt)("td",{parentName:"tr",align:null},"style of dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dropdownMenuStyle"),(0,r.kt)("td",{parentName:"tr",align:null},"additional style applied to dropdown menu"),(0,r.kt)("td",{parentName:"tr",align:null},"object"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"filterOption"),(0,r.kt)("td",{parentName:"tr",align:null},"If true, filter options by input, if function, filter options against it. The function will receive two arguments, ",(0,r.kt)("inlineCode",{parentName:"td"},"inputValue")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"option"),", if the function returns ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", the option will be included in the filtered set; Otherwise, it will be excluded."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean or function(inputValue, option)"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"firstActiveValue"),(0,r.kt)("td",{parentName:"tr",align:null},"Value of action option by default"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getPopupContainer"),(0,r.kt)("td",{parentName:"tr",align:null},"Parent Node which the selector should be rendered to. Default to ",(0,r.kt)("inlineCode",{parentName:"td"},"body"),". When position issues happen, try to modify it into scrollable content and position it relative. ",(0,r.kt)("a",{parentName:"td",href:"https://codesandbox.io/s/4j168r7jw0"},"Example")),(0,r.kt)("td",{parentName:"tr",align:null},"function(triggerNode)"),(0,r.kt)("td",{parentName:"tr",align:null},"() => document.body"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"labelInValue"),(0,r.kt)("td",{parentName:"tr",align:null},"whether to embed label in value, turn the format of value from ",(0,r.kt)("inlineCode",{parentName:"td"},"string")," to ",(0,r.kt)("inlineCode",{parentName:"td"},"{key: string, label: ReactNode}")),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxTagCount"),(0,r.kt)("td",{parentName:"tr",align:null},"Max tag count to show"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxTagTextLength"),(0,r.kt)("td",{parentName:"tr",align:null},"Max tag text length to show"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.18.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"maxTagPlaceholder"),(0,r.kt)("td",{parentName:"tr",align:null},"Placeholder for not showing tags"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode/function(omittedValues)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mode"),(0,r.kt)("td",{parentName:"tr",align:null},"Set mode of Select"),(0,r.kt)("td",{parentName:"tr",align:null},"'default'"),(0,r.kt)("td",{parentName:"tr",align:null},"'multiple'"),(0,r.kt)("td",{parentName:"tr",align:null},"'tags'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"notFoundContent"),(0,r.kt)("td",{parentName:"tr",align:null},"Specify content to show when no result matches.."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"'Not Found'"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"optionFilterProp"),(0,r.kt)("td",{parentName:"tr",align:null},"Which prop value of option will be used for filter if filterOption is true"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"optionLabelProp"),(0,r.kt)("td",{parentName:"tr",align:null},"Which prop value of option will render as content of select. ",(0,r.kt)("a",{parentName:"td",href:"https://codesandbox.io/s/antd-reproduction-template-tk678"},"Example")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"value")," for ",(0,r.kt)("inlineCode",{parentName:"td"},"combobox"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"children")," for other modes"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"placeholder"),(0,r.kt)("td",{parentName:"tr",align:null},"Placeholder of select"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showArrow"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to show the drop-down arrow"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"3.2.1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"showSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether show search input in single mode."),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size"),(0,r.kt)("td",{parentName:"tr",align:null},"Size of Select input. ",(0,r.kt)("inlineCode",{parentName:"td"},"default")," ",(0,r.kt)("inlineCode",{parentName:"td"},"large")," ",(0,r.kt)("inlineCode",{parentName:"td"},"small")),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"default"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"suffixIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom suffix icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"removeIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom remove icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clearIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom clear icon"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"menuItemSelectedIcon"),(0,r.kt)("td",{parentName:"tr",align:null},"The custom menuItemSelected icon with multiple options"),(0,r.kt)("td",{parentName:"tr",align:null},"ReactNode"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tokenSeparators"),(0,r.kt)("td",{parentName:"tr",align:null},"Separator used to tokenize on tag/multiple mode"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Current selected option."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"string","[","]\\",(0,r.kt)("br",null),"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number","[","]\\",(0,r.kt)("br",null),"LabeledValue")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onBlur"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when blur"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when select an option or input value change, or value of input is changed in combobox mode"),(0,r.kt)("td",{parentName:"tr",align:null},"function(value, option:Option/Array\\<Option",">",")"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDeselect"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when a option is deselected, param is the selected option's value. Only called for multiple or tags, effective in multiple or tags mode only."),(0,r.kt)("td",{parentName:"tr",align:null},"function(string"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"LabeledValue)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onFocus"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when focus"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onInputKeyDown"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when key pressed"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.1.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onMouseEnter"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when mouse enter"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onMouseLeave"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when mouse leave"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onPopupScroll"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when dropdown scrolls"),(0,r.kt)("td",{parentName:"tr",align:null},"function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSearch"),(0,r.kt)("td",{parentName:"tr",align:null},"Callback function that is fired when input changed."),(0,r.kt)("td",{parentName:"tr",align:null},"function(value: string)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSelect"),(0,r.kt)("td",{parentName:"tr",align:null},"Called when a option is selected, the params are option's value (or key) and option instance."),(0,r.kt)("td",{parentName:"tr",align:null},"function(string"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"LabeledValue, option:Option)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"defaultOpen"),(0,r.kt)("td",{parentName:"tr",align:null},"Initial open state of dropdown"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"open"),(0,r.kt)("td",{parentName:"tr",align:null},"Controlled open state of dropdown"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onDropdownVisibleChange"),(0,r.kt)("td",{parentName:"tr",align:null},"Call when dropdown open (Supported after version 3.9.0)"),(0,r.kt)("td",{parentName:"tr",align:null},"function(open)"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.9.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loading"),(0,r.kt)("td",{parentName:"tr",align:null},"indicate loading state"),(0,r.kt)("td",{parentName:"tr",align:null},"Boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"3.11.0")))),(0,r.kt)("h3",{id:"select-methods"},"Select Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"blur()"),(0,r.kt)("td",{parentName:"tr",align:null},"Remove focus"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"focus()"),(0,r.kt)("td",{parentName:"tr",align:null},"Get focus"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"option-props"},"Option props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"Disable this option"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"Same usage as ",(0,r.kt)("inlineCode",{parentName:"td"},"value"),". If React request you to set this property, you can set it to value of option, and then omit value property."),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"title"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"title")," of Select after select this Option"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"default to filter with this property"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"className"),(0,r.kt)("td",{parentName:"tr",align:null},"additional class to option"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"3.10.1")))),(0,r.kt)("h3",{id:"optgroup-props"},"OptGroup props"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"label"),(0,r.kt)("td",{parentName:"tr",align:null},"Group label"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"React.Element"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"the-dropdown-is-closed-when-click-dropdownrender-area"},"The dropdown is closed when click ",(0,r.kt)("inlineCode",{parentName:"h3"},"dropdownRender")," area?"),(0,r.kt)("p",null,"See the instruction in ",(0,r.kt)("a",{parentName:"p",href:"#components-select-demo-custom-dropdown-menu"},"dropdownRender example"),"."))}c.isMDXComponent=!0},30876:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>m});var a=n(2784);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),c=p(n),m=l,g=c["".concat(d,".").concat(m)]||c[m]||s[m]||r;return n?a.createElement(g,i(i({ref:e},u),{},{components:n})):a.createElement(g,i({ref:e},u))}));function m(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=c;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:l,i[1]=o;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"}}]);